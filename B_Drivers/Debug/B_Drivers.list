
B_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001530  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001660  08001660  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001660  08001660  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001660  08001660  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001660  08001660  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001660  08001660  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001664  08001664  00011664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000024  0800168c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  0800168c  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000054d5  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e2e  00000000  00000000  00025522  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002c8  00000000  00000000  00026350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000250  00000000  00000000  00026618  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003876  00000000  00000000  00026868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000394c  00000000  00000000  0002a0de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c68d  00000000  00000000  0002da2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003a0b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000954  00000000  00000000  0003a134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08001648 	.word	0x08001648

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08001648 	.word	0x08001648

08000170 <Motors_Init>:
#define IN2  pin2  // PA2 - IN2
#define IN3  pin3  // PA3 - IN3
#define IN4  pin4  // PA4 - IN4

// Initialize motor control pins
void Motors_Init(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    GPIOA_CLOCK_ENABLE;
 8000174:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <Motors_Init+0x48>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0f      	ldr	r2, [pc, #60]	; (80001b8 <Motors_Init+0x48>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
    MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000180:	2100      	movs	r1, #0
 8000182:	2000      	movs	r0, #0
 8000184:	f000 fb8c 	bl	80008a0 <MCAL_speed_init>
    pinmode(GPIOA, IN1, GPIO_MODE_OUTPUT_push_pull_Speed50);
 8000188:	2203      	movs	r2, #3
 800018a:	2101      	movs	r1, #1
 800018c:	480b      	ldr	r0, [pc, #44]	; (80001bc <Motors_Init+0x4c>)
 800018e:	f000 f971 	bl	8000474 <pinmode>
    pinmode(GPIOA, IN2, GPIO_MODE_OUTPUT_push_pull_Speed50);
 8000192:	2203      	movs	r2, #3
 8000194:	2102      	movs	r1, #2
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <Motors_Init+0x4c>)
 8000198:	f000 f96c 	bl	8000474 <pinmode>
    pinmode(GPIOA, IN3, GPIO_MODE_OUTPUT_push_pull_Speed50);
 800019c:	2203      	movs	r2, #3
 800019e:	2103      	movs	r1, #3
 80001a0:	4806      	ldr	r0, [pc, #24]	; (80001bc <Motors_Init+0x4c>)
 80001a2:	f000 f967 	bl	8000474 <pinmode>
    pinmode(GPIOA, IN4, GPIO_MODE_OUTPUT_push_pull_Speed50);
 80001a6:	2203      	movs	r2, #3
 80001a8:	2104      	movs	r1, #4
 80001aa:	4804      	ldr	r0, [pc, #16]	; (80001bc <Motors_Init+0x4c>)
 80001ac:	f000 f962 	bl	8000474 <pinmode>


    Motors_Stop();
 80001b0:	f000 f88c 	bl	80002cc <Motors_Stop>
}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800

080001c0 <Set_Speed>:
void Set_Speed(uint32_t speed){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	6078      	str	r0, [r7, #4]
    PWM(TIM1, CH_1, speed, 3500, clk);
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <Set_Speed+0x34>)
 80001ca:	9300      	str	r3, [sp, #0]
 80001cc:	f640 53ac 	movw	r3, #3500	; 0xdac
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	2101      	movs	r1, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <Set_Speed+0x38>)
 80001d6:	f000 fbef 	bl	80009b8 <PWM>
    PWM(TIM1, CH_3, speed, 3500, clk);
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <Set_Speed+0x34>)
 80001dc:	9300      	str	r3, [sp, #0]
 80001de:	f640 53ac 	movw	r3, #3500	; 0xdac
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	2103      	movs	r1, #3
 80001e6:	4804      	ldr	r0, [pc, #16]	; (80001f8 <Set_Speed+0x38>)
 80001e8:	f000 fbe6 	bl	80009b8 <PWM>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	02255100 	.word	0x02255100
 80001f8:	40012c00 	.word	0x40012c00

080001fc <Move_Forward>:

// Move forward (both motors forward)
void Move_Forward(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
    // Right motor forward (IN1=1, IN2=0)
    pinwrite(GPIOA, IN1, HIGH);
 8000200:	2201      	movs	r2, #1
 8000202:	2101      	movs	r1, #1
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <Move_Forward+0x30>)
 8000206:	f000 fa17 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN2, LOW);
 800020a:	2200      	movs	r2, #0
 800020c:	2102      	movs	r1, #2
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <Move_Forward+0x30>)
 8000210:	f000 fa12 	bl	8000638 <pinwrite>

    // Left motor forward (IN3=1, IN4=0)
    pinwrite(GPIOA, IN3, HIGH);
 8000214:	2201      	movs	r2, #1
 8000216:	2103      	movs	r1, #3
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <Move_Forward+0x30>)
 800021a:	f000 fa0d 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN4, LOW);
 800021e:	2200      	movs	r2, #0
 8000220:	2104      	movs	r1, #4
 8000222:	4802      	ldr	r0, [pc, #8]	; (800022c <Move_Forward+0x30>)
 8000224:	f000 fa08 	bl	8000638 <pinwrite>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40010800 	.word	0x40010800

08000230 <Move_Backward>:

// Move backward (both motors backward)
void Move_Backward(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    // Right motor backward (IN1=0, IN2=1)
    pinwrite(GPIOA, IN1, LOW);
 8000234:	2200      	movs	r2, #0
 8000236:	2101      	movs	r1, #1
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <Move_Backward+0x30>)
 800023a:	f000 f9fd 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN2, HIGH);
 800023e:	2201      	movs	r2, #1
 8000240:	2102      	movs	r1, #2
 8000242:	4807      	ldr	r0, [pc, #28]	; (8000260 <Move_Backward+0x30>)
 8000244:	f000 f9f8 	bl	8000638 <pinwrite>

    // Left motor backward (IN3=0, IN4=1)
    pinwrite(GPIOA, IN3, LOW);
 8000248:	2200      	movs	r2, #0
 800024a:	2103      	movs	r1, #3
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <Move_Backward+0x30>)
 800024e:	f000 f9f3 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN4, HIGH);
 8000252:	2201      	movs	r2, #1
 8000254:	2104      	movs	r1, #4
 8000256:	4802      	ldr	r0, [pc, #8]	; (8000260 <Move_Backward+0x30>)
 8000258:	f000 f9ee 	bl	8000638 <pinwrite>
}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40010800 	.word	0x40010800

08000264 <Move_Right>:

// Turn left (right motor forward, left motor backward)
void Move_Right(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    // Right motor forward (IN1=1, IN2=0)
    pinwrite(GPIOA, IN1, HIGH);
 8000268:	2201      	movs	r2, #1
 800026a:	2101      	movs	r1, #1
 800026c:	4809      	ldr	r0, [pc, #36]	; (8000294 <Move_Right+0x30>)
 800026e:	f000 f9e3 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN2, LOW);
 8000272:	2200      	movs	r2, #0
 8000274:	2102      	movs	r1, #2
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <Move_Right+0x30>)
 8000278:	f000 f9de 	bl	8000638 <pinwrite>

    // Left motor backward (IN3=0, IN4=1)
    pinwrite(GPIOA, IN3, LOW);
 800027c:	2200      	movs	r2, #0
 800027e:	2103      	movs	r1, #3
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <Move_Right+0x30>)
 8000282:	f000 f9d9 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN4, HIGH);
 8000286:	2201      	movs	r2, #1
 8000288:	2104      	movs	r1, #4
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <Move_Right+0x30>)
 800028c:	f000 f9d4 	bl	8000638 <pinwrite>

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010800 	.word	0x40010800

08000298 <Move_Left>:

// Turn right (left motor forward, right motor backward)
// note that you reverse connection at IN3,4 is right motor and In1,2 left motor
void Move_Left(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    // Left motor forward (IN1=1, IN2=0)
    pinwrite(GPIOA, IN1, LOW);
 800029c:	2200      	movs	r2, #0
 800029e:	2101      	movs	r1, #1
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <Move_Left+0x30>)
 80002a2:	f000 f9c9 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN2, HIGH);
 80002a6:	2201      	movs	r2, #1
 80002a8:	2102      	movs	r1, #2
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <Move_Left+0x30>)
 80002ac:	f000 f9c4 	bl	8000638 <pinwrite>

    // Right motor backward (IN1=3, IN2=4)
    pinwrite(GPIOA, IN3, HIGH);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2103      	movs	r1, #3
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <Move_Left+0x30>)
 80002b6:	f000 f9bf 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN4, LOW);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2104      	movs	r1, #4
 80002be:	4802      	ldr	r0, [pc, #8]	; (80002c8 <Move_Left+0x30>)
 80002c0:	f000 f9ba 	bl	8000638 <pinwrite>

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010800 	.word	0x40010800

080002cc <Motors_Stop>:

// Stop all motors
void Motors_Stop(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
    // Right motor stop (IN1=0, IN2=0)
    pinwrite(GPIOA, IN1, LOW);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2101      	movs	r1, #1
 80002d4:	4809      	ldr	r0, [pc, #36]	; (80002fc <Motors_Stop+0x30>)
 80002d6:	f000 f9af 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN2, LOW);
 80002da:	2200      	movs	r2, #0
 80002dc:	2102      	movs	r1, #2
 80002de:	4807      	ldr	r0, [pc, #28]	; (80002fc <Motors_Stop+0x30>)
 80002e0:	f000 f9aa 	bl	8000638 <pinwrite>

    // Left motor stop (IN3=0, IN4=0)
    pinwrite(GPIOA, IN3, LOW);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2103      	movs	r1, #3
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <Motors_Stop+0x30>)
 80002ea:	f000 f9a5 	bl	8000638 <pinwrite>
    pinwrite(GPIOA, IN4, LOW);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2104      	movs	r1, #4
 80002f2:	4802      	ldr	r0, [pc, #8]	; (80002fc <Motors_Stop+0x30>)
 80002f4:	f000 f9a0 	bl	8000638 <pinwrite>

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40010800 	.word	0x40010800

08000300 <main>:

uint32_t speed = 1000; // global to change speed


int main(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	Motors_Init();
 8000304:	f7ff ff34 	bl	8000170 <Motors_Init>

	Set_Speed(speed);
 8000308:	4b16      	ldr	r3, [pc, #88]	; (8000364 <main+0x64>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f7ff ff57 	bl	80001c0 <Set_Speed>
	while(1){

		Move_Forward();
 8000312:	f7ff ff73 	bl	80001fc <Move_Forward>
	    delay(5000, U_ms, clk);
 8000316:	4a14      	ldr	r2, [pc, #80]	; (8000368 <main+0x68>)
 8000318:	2100      	movs	r1, #0
 800031a:	f241 3088 	movw	r0, #5000	; 0x1388
 800031e:	f000 fed9 	bl	80010d4 <delay>

		Move_Right();
 8000322:	f7ff ff9f 	bl	8000264 <Move_Right>

		delay(5000, U_ms, clk);
 8000326:	4a10      	ldr	r2, [pc, #64]	; (8000368 <main+0x68>)
 8000328:	2100      	movs	r1, #0
 800032a:	f241 3088 	movw	r0, #5000	; 0x1388
 800032e:	f000 fed1 	bl	80010d4 <delay>



		Motors_Stop();
 8000332:	f7ff ffcb 	bl	80002cc <Motors_Stop>
		delay(3000, U_ms, clk);
 8000336:	4a0c      	ldr	r2, [pc, #48]	; (8000368 <main+0x68>)
 8000338:	2100      	movs	r1, #0
 800033a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800033e:	f000 fec9 	bl	80010d4 <delay>

		Move_Left();
 8000342:	f7ff ffa9 	bl	8000298 <Move_Left>
		delay(5000, U_ms, clk);
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <main+0x68>)
 8000348:	2100      	movs	r1, #0
 800034a:	f241 3088 	movw	r0, #5000	; 0x1388
 800034e:	f000 fec1 	bl	80010d4 <delay>

		Move_Backward();
 8000352:	f7ff ff6d 	bl	8000230 <Move_Backward>
		delay(5000, U_ms, clk);
 8000356:	4a04      	ldr	r2, [pc, #16]	; (8000368 <main+0x68>)
 8000358:	2100      	movs	r1, #0
 800035a:	f241 3088 	movw	r0, #5000	; 0x1388
 800035e:	f000 feb9 	bl	80010d4 <delay>
		Move_Forward();
 8000362:	e7d6      	b.n	8000312 <main+0x12>
 8000364:	20000000 	.word	0x20000000
 8000368:	02255100 	.word	0x02255100

0800036c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800036c:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000370:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	; (80003a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	; (80003ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <LoopForever+0xe>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <LoopForever+0x16>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039a:	f001 f931 	bl	8001600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039e:	f7ff ffaf 	bl	8000300 <main>

080003a2 <LoopForever>:

LoopForever:
    b LoopForever
 80003a2:	e7fe      	b.n	80003a2 <LoopForever>
  ldr   r0, =_estack
 80003a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80003b0:	08001668 	.word	0x08001668
  ldr r2, =_sbss
 80003b4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80003b8:	2000009c 	.word	0x2000009c

080003bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC1_2_IRQHandler>

080003be <getposition>:
		else return (uint8_t)(GPIO_PIN_LOCK_FAILED);
	}
	else return (uint8_t)(GPIO_PIN_LOCK_FAILED);
}
//************************************************************************By bassamzain***********************************************//
uint8_t getposition(uint16_t pin_num){
 80003be:	b480      	push	{r7}
 80003c0:	b085      	sub	sp, #20
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4603      	mov	r3, r0
 80003c6:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 80003c8:	88fb      	ldrh	r3, [r7, #6]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d101      	bne.n	80003d2 <getposition+0x14>
		rval =0;
 80003ce:	2300      	movs	r3, #0
 80003d0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d101      	bne.n	80003dc <getposition+0x1e>
		rval =4;
 80003d8:	2304      	movs	r3, #4
 80003da:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 80003dc:	88fb      	ldrh	r3, [r7, #6]
 80003de:	2b02      	cmp	r3, #2
 80003e0:	d101      	bne.n	80003e6 <getposition+0x28>
		rval =8;
 80003e2:	2308      	movs	r3, #8
 80003e4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d101      	bne.n	80003f0 <getposition+0x32>
		rval =12;
 80003ec:	230c      	movs	r3, #12
 80003ee:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 80003f0:	88fb      	ldrh	r3, [r7, #6]
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d101      	bne.n	80003fa <getposition+0x3c>
		rval =16;
 80003f6:	2310      	movs	r3, #16
 80003f8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 80003fa:	88fb      	ldrh	r3, [r7, #6]
 80003fc:	2b05      	cmp	r3, #5
 80003fe:	d101      	bne.n	8000404 <getposition+0x46>
		rval =20;
 8000400:	2314      	movs	r3, #20
 8000402:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 8000404:	88fb      	ldrh	r3, [r7, #6]
 8000406:	2b06      	cmp	r3, #6
 8000408:	d101      	bne.n	800040e <getposition+0x50>
		rval =24;
 800040a:	2318      	movs	r3, #24
 800040c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	2b07      	cmp	r3, #7
 8000412:	d101      	bne.n	8000418 <getposition+0x5a>
		rval =28;
 8000414:	231c      	movs	r3, #28
 8000416:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 8000418:	88fb      	ldrh	r3, [r7, #6]
 800041a:	2b08      	cmp	r3, #8
 800041c:	d101      	bne.n	8000422 <getposition+0x64>
		rval =0;
 800041e:	2300      	movs	r3, #0
 8000420:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 8000422:	88fb      	ldrh	r3, [r7, #6]
 8000424:	2b09      	cmp	r3, #9
 8000426:	d101      	bne.n	800042c <getposition+0x6e>
		rval =4;
 8000428:	2304      	movs	r3, #4
 800042a:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 800042c:	88fb      	ldrh	r3, [r7, #6]
 800042e:	2b0a      	cmp	r3, #10
 8000430:	d101      	bne.n	8000436 <getposition+0x78>
		rval =8;
 8000432:	2308      	movs	r3, #8
 8000434:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 8000436:	88fb      	ldrh	r3, [r7, #6]
 8000438:	2b0b      	cmp	r3, #11
 800043a:	d101      	bne.n	8000440 <getposition+0x82>
		rval =12;
 800043c:	230c      	movs	r3, #12
 800043e:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 8000440:	88fb      	ldrh	r3, [r7, #6]
 8000442:	2b0c      	cmp	r3, #12
 8000444:	d101      	bne.n	800044a <getposition+0x8c>
		rval =16;
 8000446:	2310      	movs	r3, #16
 8000448:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 800044a:	88fb      	ldrh	r3, [r7, #6]
 800044c:	2b0d      	cmp	r3, #13
 800044e:	d101      	bne.n	8000454 <getposition+0x96>
		rval =20;
 8000450:	2314      	movs	r3, #20
 8000452:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	2b0e      	cmp	r3, #14
 8000458:	d101      	bne.n	800045e <getposition+0xa0>
		rval =24;
 800045a:	2318      	movs	r3, #24
 800045c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 800045e:	88fb      	ldrh	r3, [r7, #6]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d101      	bne.n	8000468 <getposition+0xaa>
		rval =28;
 8000464:	231c      	movs	r3, #28
 8000466:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000468:	7bfb      	ldrb	r3, [r7, #15]


}
 800046a:	4618      	mov	r0, r3
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_TypedDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	460b      	mov	r3, r1
 800047e:	607a      	str	r2, [r7, #4]
 8000480:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	4a69      	ldr	r2, [pc, #420]	; (800062c <pinmode+0x1b8>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <pinmode+0x24>
		GPIOA_CLOCK_ENABLE;
 800048a:	4b69      	ldr	r3, [pc, #420]	; (8000630 <pinmode+0x1bc>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	4a68      	ldr	r2, [pc, #416]	; (8000630 <pinmode+0x1bc>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	6193      	str	r3, [r2, #24]
 8000496:	e010      	b.n	80004ba <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	4a66      	ldr	r2, [pc, #408]	; (8000634 <pinmode+0x1c0>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <pinmode+0x3a>
		GPIOB_CLOCK_ENABLE;
 80004a0:	4b63      	ldr	r3, [pc, #396]	; (8000630 <pinmode+0x1bc>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a62      	ldr	r2, [pc, #392]	; (8000630 <pinmode+0x1bc>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	e005      	b.n	80004ba <pinmode+0x46>

	}
	else{
		GPIOC_CLOCK_ENABLE;
 80004ae:	4b60      	ldr	r3, [pc, #384]	; (8000630 <pinmode+0x1bc>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	4a5f      	ldr	r2, [pc, #380]	; (8000630 <pinmode+0x1bc>)
 80004b4:	f043 0310 	orr.w	r3, r3, #16
 80004b8:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 80004ba:	897b      	ldrh	r3, [r7, #10]
 80004bc:	2b07      	cmp	r3, #7
 80004be:	d856      	bhi.n	800056e <pinmode+0xfa>
		GPIOx->CRL &=~(0xf<<(getposition(pin)));
 80004c0:	897b      	ldrh	r3, [r7, #10]
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff7b 	bl	80003be <getposition>
 80004c8:	4603      	mov	r3, r0
 80004ca:	461a      	mov	r2, r3
 80004cc:	230f      	movs	r3, #15
 80004ce:	4093      	lsls	r3, r2
 80004d0:	43da      	mvns	r2, r3
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	401a      	ands	r2, r3
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b08      	cmp	r3, #8
 80004e0:	d002      	beq.n	80004e8 <pinmode+0x74>
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b18      	cmp	r3, #24
 80004e6:	d133      	bne.n	8000550 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2b18      	cmp	r3, #24
 80004ec:	d117      	bne.n	800051e <pinmode+0xaa>
				GPIOx->CRL |=(0b1000<<(getposition(pin)));
 80004ee:	897b      	ldrh	r3, [r7, #10]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff64 	bl	80003be <getposition>
 80004f6:	4603      	mov	r3, r0
 80004f8:	461a      	mov	r2, r3
 80004fa:	2308      	movs	r3, #8
 80004fc:	fa03 f202 	lsl.w	r2, r3, r2
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	431a      	orrs	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]
				GPIOx->ODR |= (1<<pin);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	897a      	ldrh	r2, [r7, #10]
 8000510:	2101      	movs	r1, #1
 8000512:	fa01 f202 	lsl.w	r2, r1, r2
 8000516:	431a      	orrs	r2, r3
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800051c:	e081      	b.n	8000622 <pinmode+0x1ae>
			}
			else{
				GPIOx->CRL |=(0b1000<<(getposition(pin)));
 800051e:	897b      	ldrh	r3, [r7, #10]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff4c 	bl	80003be <getposition>
 8000526:	4603      	mov	r3, r0
 8000528:	461a      	mov	r2, r3
 800052a:	2308      	movs	r3, #8
 800052c:	fa03 f202 	lsl.w	r2, r3, r2
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	431a      	orrs	r2, r3
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	601a      	str	r2, [r3, #0]
				GPIOx->ODR &=~(1<<pin);
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	68db      	ldr	r3, [r3, #12]
 800053e:	897a      	ldrh	r2, [r7, #10]
 8000540:	2101      	movs	r1, #1
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	43d2      	mvns	r2, r2
 8000548:	401a      	ands	r2, r3
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 800054e:	e068      	b.n	8000622 <pinmode+0x1ae>
			}

		}
		else GPIOx->CRL |=(pinmode<<(getposition(pin)));
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff ff33 	bl	80003be <getposition>
 8000558:	4603      	mov	r3, r0
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	fa03 f202 	lsl.w	r2, r3, r2
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	431a      	orrs	r2, r3
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	601a      	str	r2, [r3, #0]

	}



}
 800056c:	e059      	b.n	8000622 <pinmode+0x1ae>
	else if(pin>7){
 800056e:	897b      	ldrh	r3, [r7, #10]
 8000570:	2b07      	cmp	r3, #7
 8000572:	d956      	bls.n	8000622 <pinmode+0x1ae>
		GPIOx->CRH &=~(0xf<<(getposition(pin)));
 8000574:	897b      	ldrh	r3, [r7, #10]
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff ff21 	bl	80003be <getposition>
 800057c:	4603      	mov	r3, r0
 800057e:	461a      	mov	r2, r3
 8000580:	230f      	movs	r3, #15
 8000582:	4093      	lsls	r3, r2
 8000584:	43da      	mvns	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	685b      	ldr	r3, [r3, #4]
 800058a:	401a      	ands	r2, r3
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b08      	cmp	r3, #8
 8000594:	d002      	beq.n	800059c <pinmode+0x128>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b18      	cmp	r3, #24
 800059a:	d133      	bne.n	8000604 <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b18      	cmp	r3, #24
 80005a0:	d117      	bne.n	80005d2 <pinmode+0x15e>
				GPIOx->CRH |=(0b1000<<(getposition(pin)));
 80005a2:	897b      	ldrh	r3, [r7, #10]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff0a 	bl	80003be <getposition>
 80005aa:	4603      	mov	r3, r0
 80005ac:	461a      	mov	r2, r3
 80005ae:	2308      	movs	r3, #8
 80005b0:	fa03 f202 	lsl.w	r2, r3, r2
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	685b      	ldr	r3, [r3, #4]
 80005b8:	431a      	orrs	r2, r3
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	605a      	str	r2, [r3, #4]
				GPIOx->ODR |= (1<<pin);
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	897a      	ldrh	r2, [r7, #10]
 80005c4:	2101      	movs	r1, #1
 80005c6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ca:	431a      	orrs	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 80005d0:	e027      	b.n	8000622 <pinmode+0x1ae>
				GPIOx->CRH |=(0b1000<<(getposition(pin)));
 80005d2:	897b      	ldrh	r3, [r7, #10]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fef2 	bl	80003be <getposition>
 80005da:	4603      	mov	r3, r0
 80005dc:	461a      	mov	r2, r3
 80005de:	2308      	movs	r3, #8
 80005e0:	fa03 f202 	lsl.w	r2, r3, r2
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	431a      	orrs	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	605a      	str	r2, [r3, #4]
				GPIOx->ODR &=~(1<<pin);
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	68db      	ldr	r3, [r3, #12]
 80005f2:	897a      	ldrh	r2, [r7, #10]
 80005f4:	2101      	movs	r1, #1
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	401a      	ands	r2, r3
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000602:	e00e      	b.n	8000622 <pinmode+0x1ae>
		else GPIOx->CRH |=(pinmode<<(getposition(pin)));
 8000604:	897b      	ldrh	r3, [r7, #10]
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fed9 	bl	80003be <getposition>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	fa03 f202 	lsl.w	r2, r3, r2
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	431a      	orrs	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	605a      	str	r2, [r3, #4]
}
 8000620:	e7ff      	b.n	8000622 <pinmode+0x1ae>
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010800 	.word	0x40010800
 8000630:	40021000 	.word	0x40021000
 8000634:	40010c00 	.word	0x40010c00

08000638 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_TypedDef* GPIOx,uint16_t pin,uint8_t status){
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	807b      	strh	r3, [r7, #2]
 8000644:	4613      	mov	r3, r2
 8000646:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8000648:	787b      	ldrb	r3, [r7, #1]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d009      	beq.n	8000662 <pinwrite+0x2a>
		GPIOx->ODR |=(1<<pin);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	887a      	ldrh	r2, [r7, #2]
 8000654:	2101      	movs	r1, #1
 8000656:	fa01 f202 	lsl.w	r2, r1, r2
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->ODR &=~(1<<pin);

}
 8000660:	e009      	b.n	8000676 <pinwrite+0x3e>
	else GPIOx->ODR &=~(1<<pin);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	887a      	ldrh	r2, [r7, #2]
 8000668:	2101      	movs	r1, #1
 800066a:	fa01 f202 	lsl.w	r2, r1, r2
 800066e:	43d2      	mvns	r2, r2
 8000670:	401a      	ands	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60da      	str	r2, [r3, #12]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <EXTI0_IRQHandler>:
	Enable_NVIC(pin);
}



void EXTI0_IRQHandler(void){
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 8000684:	4b05      	ldr	r3, [pc, #20]	; (800069c <EXTI0_IRQHandler+0x1c>)
 8000686:	695b      	ldr	r3, [r3, #20]
 8000688:	4a04      	ldr	r2, [pc, #16]	; (800069c <EXTI0_IRQHandler+0x1c>)
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <EXTI0_IRQHandler+0x20>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4798      	blx	r3
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40010400 	.word	0x40010400
 80006a0:	20000050 	.word	0x20000050

080006a4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <EXTI1_IRQHandler+0x1c>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <EXTI1_IRQHandler+0x1c>)
 80006ae:	f043 0302 	orr.w	r3, r3, #2
 80006b2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 80006b4:	4b03      	ldr	r3, [pc, #12]	; (80006c4 <EXTI1_IRQHandler+0x20>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	4798      	blx	r3

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010400 	.word	0x40010400
 80006c4:	20000050 	.word	0x20000050

080006c8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <EXTI2_IRQHandler+0x1c>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <EXTI2_IRQHandler+0x1c>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 80006d8:	4b03      	ldr	r3, [pc, #12]	; (80006e8 <EXTI2_IRQHandler+0x20>)
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	4798      	blx	r3
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40010400 	.word	0x40010400
 80006e8:	20000050 	.word	0x20000050

080006ec <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <EXTI3_IRQHandler+0x1c>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	4a04      	ldr	r2, [pc, #16]	; (8000708 <EXTI3_IRQHandler+0x1c>)
 80006f6:	f043 0308 	orr.w	r3, r3, #8
 80006fa:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80006fc:	4b03      	ldr	r3, [pc, #12]	; (800070c <EXTI3_IRQHandler+0x20>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4798      	blx	r3
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40010400 	.word	0x40010400
 800070c:	20000050 	.word	0x20000050

08000710 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <EXTI4_IRQHandler+0x1c>)
 8000716:	695b      	ldr	r3, [r3, #20]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <EXTI4_IRQHandler+0x1c>)
 800071a:	f043 0310 	orr.w	r3, r3, #16
 800071e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 8000720:	4b03      	ldr	r3, [pc, #12]	; (8000730 <EXTI4_IRQHandler+0x20>)
 8000722:	691b      	ldr	r3, [r3, #16]
 8000724:	4798      	blx	r3
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010400 	.word	0x40010400
 8000730:	20000050 	.word	0x20000050

08000734 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); GP_IRQ_Callback[5]();  }
 8000738:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 800073a:	695b      	ldr	r3, [r3, #20]
 800073c:	f003 0320 	and.w	r3, r3, #32
 8000740:	2b00      	cmp	r3, #0
 8000742:	d008      	beq.n	8000756 <EXTI9_5_IRQHandler+0x22>
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	4a22      	ldr	r2, [pc, #136]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 800074a:	f043 0320 	orr.w	r3, r3, #32
 800074e:	6153      	str	r3, [r2, #20]
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <EXTI9_5_IRQHandler+0xa4>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_Callback[6]();  }
 8000756:	4b1f      	ldr	r3, [pc, #124]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800075e:	2b00      	cmp	r3, #0
 8000760:	d008      	beq.n	8000774 <EXTI9_5_IRQHandler+0x40>
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000764:	695b      	ldr	r3, [r3, #20]
 8000766:	4a1b      	ldr	r2, [pc, #108]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076c:	6153      	str	r3, [r2, #20]
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <EXTI9_5_IRQHandler+0xa4>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_Callback[7]();  }
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <EXTI9_5_IRQHandler+0x5e>
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000786:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800078a:	6153      	str	r3, [r2, #20]
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <EXTI9_5_IRQHandler+0xa4>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_Callback[8]();  }
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <EXTI9_5_IRQHandler+0x7c>
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 80007a0:	695b      	ldr	r3, [r3, #20]
 80007a2:	4a0c      	ldr	r2, [pc, #48]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 80007a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a8:	6153      	str	r3, [r2, #20]
 80007aa:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <EXTI9_5_IRQHandler+0xa4>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_Callback[9]();  }
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 80007b2:	695b      	ldr	r3, [r3, #20]
 80007b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d008      	beq.n	80007ce <EXTI9_5_IRQHandler+0x9a>
 80007bc:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <EXTI9_5_IRQHandler+0xa0>)
 80007c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c6:	6153      	str	r3, [r2, #20]
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <EXTI9_5_IRQHandler+0xa4>)
 80007ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007cc:	4798      	blx	r3
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40010400 	.word	0x40010400
 80007d8:	20000050 	.word	0x20000050

080007dc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_Callback[10]();  }
 80007e0:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 80007e2:	695b      	ldr	r3, [r3, #20]
 80007e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d008      	beq.n	80007fe <EXTI15_10_IRQHandler+0x22>
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 80007ee:	695b      	ldr	r3, [r3, #20]
 80007f0:	4a29      	ldr	r2, [pc, #164]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 80007f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007f6:	6153      	str	r3, [r2, #20]
 80007f8:	4b28      	ldr	r3, [pc, #160]	; (800089c <EXTI15_10_IRQHandler+0xc0>)
 80007fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007fc:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_Callback[11]();  }
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000806:	2b00      	cmp	r3, #0
 8000808:	d008      	beq.n	800081c <EXTI15_10_IRQHandler+0x40>
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000810:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000814:	6153      	str	r3, [r2, #20]
 8000816:	4b21      	ldr	r3, [pc, #132]	; (800089c <EXTI15_10_IRQHandler+0xc0>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_Callback[12]();  }
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800081e:	695b      	ldr	r3, [r3, #20]
 8000820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d008      	beq.n	800083a <EXTI15_10_IRQHandler+0x5e>
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a1a      	ldr	r2, [pc, #104]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800082e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000832:	6153      	str	r3, [r2, #20]
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <EXTI15_10_IRQHandler+0xc0>)
 8000836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000838:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_Callback[13]();  }
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d008      	beq.n	8000858 <EXTI15_10_IRQHandler+0x7c>
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800084c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000850:	6153      	str	r3, [r2, #20]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <EXTI15_10_IRQHandler+0xc0>)
 8000854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000856:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000860:	2b00      	cmp	r3, #0
 8000862:	d008      	beq.n	8000876 <EXTI15_10_IRQHandler+0x9a>
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 800086a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086e:	6153      	str	r3, [r2, #20]
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <EXTI15_10_IRQHandler+0xc0>)
 8000872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000874:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_Callback[15]();  }
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <EXTI15_10_IRQHandler+0xb8>
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <EXTI15_10_IRQHandler+0xbc>)
 8000888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b03      	ldr	r3, [pc, #12]	; (800089c <EXTI15_10_IRQHandler+0xc0>)
 8000890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000892:	4798      	blx	r3

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40010400 	.word	0x40010400
 800089c:	20000050 	.word	0x20000050

080008a0 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	460a      	mov	r2, r1
 80008aa:	71fb      	strb	r3, [r7, #7]
 80008ac:	4613      	mov	r3, r2
 80008ae:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d139      	bne.n	800092a <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 80008b6:	79bb      	ldrb	r3, [r7, #6]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d175      	bne.n	80009a8 <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 80008bc:	4b3d      	ldr	r3, [pc, #244]	; (80009b4 <MCAL_speed_init+0x114>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	4a3c      	ldr	r2, [pc, #240]	; (80009b4 <MCAL_speed_init+0x114>)
 80008c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008c6:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->CFGR &=~(0b1111<<18);
 80008c8:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <MCAL_speed_init+0x114>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a39      	ldr	r2, [pc, #228]	; (80009b4 <MCAL_speed_init+0x114>)
 80008ce:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80008d2:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 80008d4:	4b37      	ldr	r3, [pc, #220]	; (80009b4 <MCAL_speed_init+0x114>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	4a36      	ldr	r2, [pc, #216]	; (80009b4 <MCAL_speed_init+0x114>)
 80008da:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80008de:	6053      	str	r3, [r2, #4]
			RCC->CR |=(1<<24);//pll on
 80008e0:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <MCAL_speed_init+0x114>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a33      	ldr	r2, [pc, #204]	; (80009b4 <MCAL_speed_init+0x114>)
 80008e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008ea:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->CFGR &=~(0b11<<0);
 80008ec:	4b31      	ldr	r3, [pc, #196]	; (80009b4 <MCAL_speed_init+0x114>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	4a30      	ldr	r2, [pc, #192]	; (80009b4 <MCAL_speed_init+0x114>)
 80008f2:	f023 0303 	bic.w	r3, r3, #3
 80008f6:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b10<<0);//10: PLL selected as system clock
 80008f8:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MCAL_speed_init+0x114>)
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	4a2d      	ldr	r2, [pc, #180]	; (80009b4 <MCAL_speed_init+0x114>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 8000904:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MCAL_speed_init+0x114>)
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	4a2a      	ldr	r2, [pc, #168]	; (80009b4 <MCAL_speed_init+0x114>)
 800090a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800090e:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->CFGR &=~(0b111<<11);//0xx: HCLK not divided
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MCAL_speed_init+0x114>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <MCAL_speed_init+0x114>)
 8000916:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800091a:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->CFGR &=~(0b111<<8);//0xx: HCLK not divided
 800091c:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MCAL_speed_init+0x114>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <MCAL_speed_init+0x114>)
 8000922:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000926:	6053      	str	r3, [r2, #4]

		}
	}


}
 8000928:	e03e      	b.n	80009a8 <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 800092a:	79bb      	ldrb	r3, [r7, #6]
 800092c:	2b03      	cmp	r3, #3
 800092e:	d13b      	bne.n	80009a8 <MCAL_speed_init+0x108>
			RCC->CR &=~(1<<18);
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MCAL_speed_init+0x114>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a1f      	ldr	r2, [pc, #124]	; (80009b4 <MCAL_speed_init+0x114>)
 8000936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800093a:	6013      	str	r3, [r2, #0]
			RCC->CR|=(1<<16);
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MCAL_speed_init+0x114>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a1c      	ldr	r2, [pc, #112]	; (80009b4 <MCAL_speed_init+0x114>)
 8000942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000946:	6013      	str	r3, [r2, #0]
			RCC->CFGR|=(1<<16);
 8000948:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MCAL_speed_init+0x114>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a19      	ldr	r2, [pc, #100]	; (80009b4 <MCAL_speed_init+0x114>)
 800094e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000952:	6053      	str	r3, [r2, #4]
			RCC->CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MCAL_speed_init+0x114>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MCAL_speed_init+0x114>)
 800095a:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 800095e:	6053      	str	r3, [r2, #4]
			RCC->CR |=(1<<24);//pll on
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MCAL_speed_init+0x114>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <MCAL_speed_init+0x114>)
 8000966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800096a:	6013      	str	r3, [r2, #0]
			RCC->CFGR &=~(0b11<<0);
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MCAL_speed_init+0x114>)
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	4a10      	ldr	r2, [pc, #64]	; (80009b4 <MCAL_speed_init+0x114>)
 8000972:	f023 0303 	bic.w	r3, r3, #3
 8000976:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b10<<0);//10: PLL selected as system clock
 8000978:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MCAL_speed_init+0x114>)
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	4a0d      	ldr	r2, [pc, #52]	; (80009b4 <MCAL_speed_init+0x114>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MCAL_speed_init+0x114>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	4a0a      	ldr	r2, [pc, #40]	; (80009b4 <MCAL_speed_init+0x114>)
 800098a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098e:	6053      	str	r3, [r2, #4]
			RCC->CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MCAL_speed_init+0x114>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <MCAL_speed_init+0x114>)
 8000996:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800099a:	6053      	str	r3, [r2, #4]
			RCC->CFGR &=~(0b111<<8);//100: HCLK divided by 2
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <MCAL_speed_init+0x114>)
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <MCAL_speed_init+0x114>)
 80009a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009a6:	6053      	str	r3, [r2, #4]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000

080009b8 <PWM>:
//==================================== stepper motor
static uint32_t stepper_steps=0;
static uint8_t stepper_flage=0;
//===============================================================================================

void PWM(TIMERS_typeDef* TIMERx,uint32_t CH,uint32_t duty_cycle,uint32_t freq,uint32_t clk){
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b088      	sub	sp, #32
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]

	TIMERx->TIMx_CR1 &=~(1<<0);//Counter disabled
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f023 0201 	bic.w	r2, r3, #1
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	601a      	str	r2, [r3, #0]


	char user_flage=1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 80009da:	2301      	movs	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]

	while(user_flage==1){
 80009de:	e011      	b.n	8000a04 <PWM+0x4c>
		user_top = (clk)/(freq * user_pre );
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	fb02 f303 	mul.w	r3, r2, r3
 80009e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ee:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80009f6:	d303      	bcc.n	8000a00 <PWM+0x48>
			user_pre+=2;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3302      	adds	r3, #2
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	e001      	b.n	8000a04 <PWM+0x4c>
		}
		else{
			user_flage=0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8000a04:	7ffb      	ldrb	r3, [r7, #31]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d0ea      	beq.n	80009e0 <PWM+0x28>
	}

	//====================TIM1===================


	if(TIMERx==TIM1){
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4a8e      	ldr	r2, [pc, #568]	; (8000c48 <PWM+0x290>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	f040 80d7 	bne.w	8000bc2 <PWM+0x20a>
		TIMER1_CLOCK_Enable();//enable timer1 clock
 8000a14:	4b8d      	ldr	r3, [pc, #564]	; (8000c4c <PWM+0x294>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	4a8c      	ldr	r2, [pc, #560]	; (8000c4c <PWM+0x294>)
 8000a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a1e:	6193      	str	r3, [r2, #24]
		GPIOA_CLOCK_ENABLE;//enable porta clock
 8000a20:	4b8a      	ldr	r3, [pc, #552]	; (8000c4c <PWM+0x294>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a89      	ldr	r2, [pc, #548]	; (8000c4c <PWM+0x294>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8000a2c:	4b87      	ldr	r3, [pc, #540]	; (8000c4c <PWM+0x294>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	4a86      	ldr	r2, [pc, #536]	; (8000c4c <PWM+0x294>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6193      	str	r3, [r2, #24]
		if(CH==CH_1){
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d12d      	bne.n	8000a9a <PWM+0xe2>
			pinmode(GPIOA, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000a3e:	220b      	movs	r2, #11
 8000a40:	2108      	movs	r1, #8
 8000a42:	4883      	ldr	r0, [pc, #524]	; (8000c50 <PWM+0x298>)
 8000a44:	f7ff fd16 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3); //Output compare 1 preload enable
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f043 0208 	orr.w	r2, r3, #8
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0); // Capture/Compare 1 output enable
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6a1b      	ldr	r3, [r3, #32]
 8000a58:	f043 0201 	orr.w	r2, r3, #1
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);//110: PWM mode 1 - In upcounting, channel 1 is active
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	fb02 f303 	mul.w	r3, r2, r3
 8000a74:	4a77      	ldr	r2, [pc, #476]	; (8000c54 <PWM+0x29c>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	099a      	lsrs	r2, r3, #6
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_BDTR |=(1<<15); // Main output enable
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a84:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b11<<0);//Update interrupt enable Capture/Compare 1 interrupt enable
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f043 0203 	orr.w	r2, r3, #3
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	e2f6      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d12d      	bne.n	8000afc <PWM+0x144>
			pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000aa0:	220b      	movs	r2, #11
 8000aa2:	2109      	movs	r1, #9
 8000aa4:	486a      	ldr	r0, [pc, #424]	; (8000c50 <PWM+0x298>)
 8000aa6:	f7ff fce5 	bl	8000474 <pinmode>
			//pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	6a1b      	ldr	r3, [r3, #32]
 8000aba:	f043 0210 	orr.w	r2, r3, #16
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	fb02 f303 	mul.w	r3, r2, r3
 8000ad6:	4a5f      	ldr	r2, [pc, #380]	; (8000c54 <PWM+0x29c>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	099a      	lsrs	r2, r3, #6
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_BDTR |=(1<<15);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	f043 0205 	orr.w	r2, r3, #5
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	e2c5      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d12d      	bne.n	8000b5e <PWM+0x1a6>
			pinmode(GPIOA, pin10, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000b02:	220b      	movs	r2, #11
 8000b04:	210a      	movs	r1, #10
 8000b06:	4852      	ldr	r0, [pc, #328]	; (8000c50 <PWM+0x298>)
 8000b08:	f7ff fcb4 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	69db      	ldr	r3, [r3, #28]
 8000b10:	f043 0208 	orr.w	r2, r3, #8
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6a1b      	ldr	r3, [r3, #32]
 8000b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	69db      	ldr	r3, [r3, #28]
 8000b28:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	fb02 f303 	mul.w	r3, r2, r3
 8000b38:	4a46      	ldr	r2, [pc, #280]	; (8000c54 <PWM+0x29c>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	099a      	lsrs	r2, r3, #6
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_BDTR |=(1<<15);
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	f043 0209 	orr.w	r2, r3, #9
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	e294      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	2b04      	cmp	r3, #4
 8000b62:	f040 8291 	bne.w	8001088 <PWM+0x6d0>
			pinmode(GPIOA, pin11, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000b66:	220b      	movs	r2, #11
 8000b68:	210b      	movs	r1, #11
 8000b6a:	4839      	ldr	r0, [pc, #228]	; (8000c50 <PWM+0x298>)
 8000b6c:	f7ff fc82 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	69db      	ldr	r3, [r3, #28]
 8000b74:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	fb02 f303 	mul.w	r3, r2, r3
 8000b9c:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <PWM+0x29c>)
 8000b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba2:	099a      	lsrs	r2, r3, #6
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_BDTR |=(1<<15);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bac:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f043 0211 	orr.w	r2, r3, #17
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	e262      	b.n	8001088 <PWM+0x6d0>
		}
	}

	//====================TIM2===================

	else if (TIMERx==TIM2){
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc8:	f040 80c8 	bne.w	8000d5c <PWM+0x3a4>
		TIMER2_CLOCK_Enable();//enable timer2 clock
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <PWM+0x294>)
 8000bce:	69db      	ldr	r3, [r3, #28]
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <PWM+0x294>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	61d3      	str	r3, [r2, #28]
		GPIOA_CLOCK_ENABLE;//enable porta clock
 8000bd8:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <PWM+0x294>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a1b      	ldr	r2, [pc, #108]	; (8000c4c <PWM+0x294>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8000be4:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <PWM+0x294>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <PWM+0x294>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d130      	bne.n	8000c58 <PWM+0x2a0>
			pinmode(GPIOA, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000bf6:	220b      	movs	r2, #11
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4815      	ldr	r0, [pc, #84]	; (8000c50 <PWM+0x298>)
 8000bfc:	f7ff fc3a 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f043 0208 	orr.w	r2, r3, #8
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	f043 0201 	orr.w	r2, r3, #1
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	fb02 f303 	mul.w	r3, r2, r3
 8000c2c:	4a09      	ldr	r2, [pc, #36]	; (8000c54 <PWM+0x29c>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	099a      	lsrs	r2, r3, #6
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	f043 0203 	orr.w	r2, r3, #3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	e220      	b.n	8001088 <PWM+0x6d0>
 8000c46:	bf00      	nop
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010800 	.word	0x40010800
 8000c54:	10624dd3 	.word	0x10624dd3
		}
		else if(CH==CH_2){
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d127      	bne.n	8000cae <PWM+0x2f6>
			pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000c5e:	220b      	movs	r2, #11
 8000c60:	2101      	movs	r1, #1
 8000c62:	488d      	ldr	r0, [pc, #564]	; (8000e98 <PWM+0x4e0>)
 8000c64:	f7ff fc06 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	f043 0210 	orr.w	r2, r3, #16
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	fb02 f303 	mul.w	r3, r2, r3
 8000c94:	4a81      	ldr	r2, [pc, #516]	; (8000e9c <PWM+0x4e4>)
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	099a      	lsrs	r2, r3, #6
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	f043 0205 	orr.w	r2, r3, #5
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	e1ec      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	2b03      	cmp	r3, #3
 8000cb2:	d127      	bne.n	8000d04 <PWM+0x34c>
			pinmode(GPIOA, pin2, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000cb4:	220b      	movs	r2, #11
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	4877      	ldr	r0, [pc, #476]	; (8000e98 <PWM+0x4e0>)
 8000cba:	f7ff fbdb 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f043 0208 	orr.w	r2, r3, #8
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6a1b      	ldr	r3, [r3, #32]
 8000cce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000ce2:	69bb      	ldr	r3, [r7, #24]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	fb02 f303 	mul.w	r3, r2, r3
 8000cea:	4a6c      	ldr	r2, [pc, #432]	; (8000e9c <PWM+0x4e4>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	099a      	lsrs	r2, r3, #6
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	f043 0209 	orr.w	r2, r3, #9
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	e1c1      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	f040 81be 	bne.w	8001088 <PWM+0x6d0>
			pinmode(GPIOA, pin3, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000d0c:	220b      	movs	r2, #11
 8000d0e:	2103      	movs	r1, #3
 8000d10:	4861      	ldr	r0, [pc, #388]	; (8000e98 <PWM+0x4e0>)
 8000d12:	f7ff fbaf 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a1b      	ldr	r3, [r3, #32]
 8000d26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	69db      	ldr	r3, [r3, #28]
 8000d32:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	4a56      	ldr	r2, [pc, #344]	; (8000e9c <PWM+0x4e4>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	099a      	lsrs	r2, r3, #6
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	f043 0211 	orr.w	r2, r3, #17
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	e195      	b.n	8001088 <PWM+0x6d0>
		}
	}
	//====================TIM3===================

	else if (TIMERx==TIM3){
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4a50      	ldr	r2, [pc, #320]	; (8000ea0 <PWM+0x4e8>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	f040 80cf 	bne.w	8000f04 <PWM+0x54c>
		TIMER3_CLOCK_Enable();//enable timer3 clock
 8000d66:	4b4f      	ldr	r3, [pc, #316]	; (8000ea4 <PWM+0x4ec>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a4e      	ldr	r2, [pc, #312]	; (8000ea4 <PWM+0x4ec>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	61d3      	str	r3, [r2, #28]
		GPIOA_CLOCK_ENABLE;//enable porta clock
 8000d72:	4b4c      	ldr	r3, [pc, #304]	; (8000ea4 <PWM+0x4ec>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a4b      	ldr	r2, [pc, #300]	; (8000ea4 <PWM+0x4ec>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6193      	str	r3, [r2, #24]
		GPIOB_CLOCK_ENABLE;//enable porta clock
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <PWM+0x4ec>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	4a48      	ldr	r2, [pc, #288]	; (8000ea4 <PWM+0x4ec>)
 8000d84:	f043 0308 	orr.w	r3, r3, #8
 8000d88:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <PWM+0x4ec>)
 8000d8c:	699b      	ldr	r3, [r3, #24]
 8000d8e:	4a45      	ldr	r2, [pc, #276]	; (8000ea4 <PWM+0x4ec>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d127      	bne.n	8000dec <PWM+0x434>
			pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000d9c:	220b      	movs	r2, #11
 8000d9e:	2106      	movs	r1, #6
 8000da0:	483d      	ldr	r0, [pc, #244]	; (8000e98 <PWM+0x4e0>)
 8000da2:	f7ff fb67 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f043 0208 	orr.w	r2, r3, #8
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6a1b      	ldr	r3, [r3, #32]
 8000db6:	f043 0201 	orr.w	r2, r3, #1
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	699b      	ldr	r3, [r3, #24]
 8000dc2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	4a32      	ldr	r2, [pc, #200]	; (8000e9c <PWM+0x4e4>)
 8000dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd8:	099a      	lsrs	r2, r3, #6
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f043 0203 	orr.w	r2, r3, #3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	e14d      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d127      	bne.n	8000e42 <PWM+0x48a>
			pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000df2:	220b      	movs	r2, #11
 8000df4:	2107      	movs	r1, #7
 8000df6:	4828      	ldr	r0, [pc, #160]	; (8000e98 <PWM+0x4e0>)
 8000df8:	f7ff fb3c 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	6a1b      	ldr	r3, [r3, #32]
 8000e0c:	f043 0210 	orr.w	r2, r3, #16
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <PWM+0x4e4>)
 8000e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e2e:	099a      	lsrs	r2, r3, #6
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	f043 0205 	orr.w	r2, r3, #5
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	60da      	str	r2, [r3, #12]
 8000e40:	e122      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d131      	bne.n	8000eac <PWM+0x4f4>
			pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000e48:	220b      	movs	r2, #11
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	4816      	ldr	r0, [pc, #88]	; (8000ea8 <PWM+0x4f0>)
 8000e4e:	f7ff fb11 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f043 0208 	orr.w	r2, r3, #8
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	6a1b      	ldr	r3, [r3, #32]
 8000e62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	fb02 f303 	mul.w	r3, r2, r3
 8000e7e:	4a07      	ldr	r2, [pc, #28]	; (8000e9c <PWM+0x4e4>)
 8000e80:	fba2 2303 	umull	r2, r3, r2, r3
 8000e84:	099a      	lsrs	r2, r3, #6
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	f043 0209 	orr.w	r2, r3, #9
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	e0f7      	b.n	8001088 <PWM+0x6d0>
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	10624dd3 	.word	0x10624dd3
 8000ea0:	40000400 	.word	0x40000400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010c00 	.word	0x40010c00
		}
		else if(CH==CH_4){
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	f040 80ea 	bne.w	8001088 <PWM+0x6d0>
			pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000eb4:	220b      	movs	r2, #11
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	4882      	ldr	r0, [pc, #520]	; (80010c4 <PWM+0x70c>)
 8000eba:	f7ff fadb 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	fb02 f303 	mul.w	r3, r2, r3
 8000eea:	4a77      	ldr	r2, [pc, #476]	; (80010c8 <PWM+0x710>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	099a      	lsrs	r2, r3, #6
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	f043 0211 	orr.w	r2, r3, #17
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	e0c1      	b.n	8001088 <PWM+0x6d0>
	}


	//====================TIM4===================

	else if (TIMERx==TIM4){
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4a71      	ldr	r2, [pc, #452]	; (80010cc <PWM+0x714>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f040 80bd 	bne.w	8001088 <PWM+0x6d0>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8000f0e:	4b70      	ldr	r3, [pc, #448]	; (80010d0 <PWM+0x718>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a6f      	ldr	r2, [pc, #444]	; (80010d0 <PWM+0x718>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	61d3      	str	r3, [r2, #28]
		GPIOB_CLOCK_ENABLE;//enable porta clock
 8000f1a:	4b6d      	ldr	r3, [pc, #436]	; (80010d0 <PWM+0x718>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a6c      	ldr	r2, [pc, #432]	; (80010d0 <PWM+0x718>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8000f26:	4b6a      	ldr	r3, [pc, #424]	; (80010d0 <PWM+0x718>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a69      	ldr	r2, [pc, #420]	; (80010d0 <PWM+0x718>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d127      	bne.n	8000f88 <PWM+0x5d0>
			pinmode(GPIOB, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000f38:	220b      	movs	r2, #11
 8000f3a:	2106      	movs	r1, #6
 8000f3c:	4861      	ldr	r0, [pc, #388]	; (80010c4 <PWM+0x70c>)
 8000f3e:	f7ff fa99 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f043 0208 	orr.w	r2, r3, #8
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a1b      	ldr	r3, [r3, #32]
 8000f52:	f043 0201 	orr.w	r2, r3, #1
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	699b      	ldr	r3, [r3, #24]
 8000f5e:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	fb02 f303 	mul.w	r3, r2, r3
 8000f6e:	4a56      	ldr	r2, [pc, #344]	; (80010c8 <PWM+0x710>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	099a      	lsrs	r2, r3, #6
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f043 0203 	orr.w	r2, r3, #3
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	e07f      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d127      	bne.n	8000fde <PWM+0x626>
			pinmode(GPIOB, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000f8e:	220b      	movs	r2, #11
 8000f90:	2107      	movs	r1, #7
 8000f92:	484c      	ldr	r0, [pc, #304]	; (80010c4 <PWM+0x70c>)
 8000f94:	f7ff fa6e 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f043 0210 	orr.w	r2, r3, #16
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	fb02 f303 	mul.w	r3, r2, r3
 8000fc4:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <PWM+0x710>)
 8000fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fca:	099a      	lsrs	r2, r3, #6
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	f043 0205 	orr.w	r2, r3, #5
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	e054      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d127      	bne.n	8001034 <PWM+0x67c>
			pinmode(GPIOB, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8000fe4:	220b      	movs	r2, #11
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4836      	ldr	r0, [pc, #216]	; (80010c4 <PWM+0x70c>)
 8000fea:	f7ff fa43 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f043 0208 	orr.w	r2, r3, #8
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	fb02 f303 	mul.w	r3, r2, r3
 800101a:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <PWM+0x710>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	099a      	lsrs	r2, r3, #6
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f043 0209 	orr.w	r2, r3, #9
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	e029      	b.n	8001088 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b04      	cmp	r3, #4
 8001038:	d126      	bne.n	8001088 <PWM+0x6d0>
			pinmode(GPIOB, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 800103a:	220b      	movs	r2, #11
 800103c:	2109      	movs	r1, #9
 800103e:	4821      	ldr	r0, [pc, #132]	; (80010c4 <PWM+0x70c>)
 8001040:	f7ff fa18 	bl	8000474 <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	6a1b      	ldr	r3, [r3, #32]
 8001054:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	fb02 f303 	mul.w	r3, r2, r3
 8001070:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <PWM+0x710>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	099a      	lsrs	r2, r3, #6
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	f043 0211 	orr.w	r2, r3, #17
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->TIMx_CR1 |=(1<<7);
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	TIMERx->TIMx_ARR=user_top;//frec peak value
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx->TIMx_PSC=(user_pre-1);//prescaller
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	1e5a      	subs	r2, r3, #1
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	TIMERx->TIMx_EGR |=(1<<0);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	615a      	str	r2, [r3, #20]

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f043 0201 	orr.w	r2, r3, #1
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	601a      	str	r2, [r3, #0]

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40010c00 	.word	0x40010c00
 80010c8:	10624dd3 	.word	0x10624dd3
 80010cc:	40000800 	.word	0x40000800
 80010d0:	40021000 	.word	0x40021000

080010d4 <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(uint16_t time,uint8_t U,uint32_t clk){
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	603a      	str	r2, [r7, #0]
 80010de:	80fb      	strh	r3, [r7, #6]
 80010e0:	460b      	mov	r3, r1
 80010e2:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 80010e4:	4b4f      	ldr	r3, [pc, #316]	; (8001224 <delay+0x150>)
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <delay+0x150>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80010f0:	4b4d      	ldr	r3, [pc, #308]	; (8001228 <delay+0x154>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b4c      	ldr	r3, [pc, #304]	; (8001228 <delay+0x154>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001100:	2301      	movs	r3, #1
 8001102:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8001108:	2301      	movs	r3, #1
 800110a:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 800110c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001110:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 8001112:	2302      	movs	r3, #2
 8001114:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 8001116:	797b      	ldrb	r3, [r7, #5]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10d      	bne.n	8001138 <delay+0x64>
		unit = 1000;
 800111c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001120:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001128:	4293      	cmp	r3, r2
 800112a:	d902      	bls.n	8001132 <delay+0x5e>
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	73fb      	strb	r3, [r7, #15]
 8001130:	e030      	b.n	8001194 <delay+0xc0>
		else increase = 10;
 8001132:	230a      	movs	r3, #10
 8001134:	73fb      	strb	r3, [r7, #15]
 8001136:	e02d      	b.n	8001194 <delay+0xc0>
	}
	else {
		unit = 1000000;
 8001138:	4b3c      	ldr	r3, [pc, #240]	; (800122c <delay+0x158>)
 800113a:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001142:	4293      	cmp	r3, r2
 8001144:	d902      	bls.n	800114c <delay+0x78>
 8001146:	230a      	movs	r3, #10
 8001148:	73fb      	strb	r3, [r7, #15]
 800114a:	e023      	b.n	8001194 <delay+0xc0>
		else increase = 5;
 800114c:	2305      	movs	r3, #5
 800114e:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 8001150:	e020      	b.n	8001194 <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	88fa      	ldrh	r2, [r7, #6]
 800115c:	fb02 f203 	mul.w	r2, r2, r3
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800116e:	d30f      	bcc.n	8001190 <delay+0xbc>

			if(user_pre>65530){
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8001176:	4293      	cmp	r3, r2
 8001178:	d905      	bls.n	8001186 <delay+0xb2>
				user_pre=65530;
 800117a:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 800117e:	617b      	str	r3, [r7, #20]
				user_flage=0;
 8001180:	2300      	movs	r3, #0
 8001182:	77fb      	strb	r3, [r7, #31]
 8001184:	e006      	b.n	8001194 <delay+0xc0>
			}
			else user_pre+=increase;
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	697a      	ldr	r2, [r7, #20]
 800118a:	4413      	add	r3, r2
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	e001      	b.n	8001194 <delay+0xc0>

		}
		else{
			user_flage=0;
 8001190:	2300      	movs	r3, #0
 8001192:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 8001194:	7ffb      	ldrb	r3, [r7, #31]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d0db      	beq.n	8001152 <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 800119a:	4b23      	ldr	r3, [pc, #140]	; (8001228 <delay+0x154>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <delay+0x154>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 80011aa:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <delay+0x154>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <delay+0x154>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <delay+0x154>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68da      	ldr	r2, [r3, #12]
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <delay+0x154>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0201 	orr.w	r2, r2, #1
 80011c8:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <delay+0x154>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 80011d2:	4b15      	ldr	r3, [pc, #84]	; (8001228 <delay+0x154>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	3a01      	subs	r2, #1
 80011da:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 80011dc:	4b12      	ldr	r3, [pc, #72]	; (8001228 <delay+0x154>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695a      	ldr	r2, [r3, #20]
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <delay+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <delay+0x154>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <delay+0x154>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 0201 	orr.w	r2, r2, #1
 80011fa:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 80011fc:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <delay+0x15c>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <delay+0x160>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <delay+0x160>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 800120e:	bf00      	nop
 8001210:	4b07      	ldr	r3, [pc, #28]	; (8001230 <delay+0x15c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1fb      	bne.n	8001210 <delay+0x13c>

	}
}
 8001218:	bf00      	nop
 800121a:	3724      	adds	r7, #36	; 0x24
 800121c:	46bd      	mov	sp, r7
 800121e:	bc80      	pop	{r7}
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40021000 	.word	0x40021000
 8001228:	20000020 	.word	0x20000020
 800122c:	000f4240 	.word	0x000f4240
 8001230:	2000001c 	.word	0x2000001c
 8001234:	e000e100 	.word	0xe000e100

08001238 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 8001246:	4b3c      	ldr	r3, [pc, #240]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b3a      	ldr	r3, [pc, #232]	; (8001338 <SPWM_timer_INIT+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 8001256:	78fb      	ldrb	r3, [r7, #3]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d12f      	bne.n	80012bc <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 800125c:	4b36      	ldr	r3, [pc, #216]	; (8001338 <SPWM_timer_INIT+0x100>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	699a      	ldr	r2, [r3, #24]
 8001262:	4b35      	ldr	r3, [pc, #212]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800126a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 800126c:	4b32      	ldr	r3, [pc, #200]	; (8001338 <SPWM_timer_INIT+0x100>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	699a      	ldr	r2, [r3, #24]
 8001272:	4b31      	ldr	r3, [pc, #196]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800127a:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 800127c:	4b2e      	ldr	r3, [pc, #184]	; (8001338 <SPWM_timer_INIT+0x100>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	4b2d      	ldr	r3, [pc, #180]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f042 0208 	orr.w	r2, r2, #8
 800128a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 800128c:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <SPWM_timer_INIT+0x100>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	699a      	ldr	r2, [r3, #24]
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800129a:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 800129c:	4b26      	ldr	r3, [pc, #152]	; (8001338 <SPWM_timer_INIT+0x100>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6a1a      	ldr	r2, [r3, #32]
 80012a2:	4b25      	ldr	r3, [pc, #148]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0210 	orr.w	r2, r2, #16
 80012aa:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 80012ac:	4b22      	ldr	r3, [pc, #136]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6a1a      	ldr	r2, [r3, #32]
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f042 0201 	orr.w	r2, r2, #1
 80012ba:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 80012bc:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012ca:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68ba      	ldr	r2, [r7, #8]
 80012da:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68ba      	ldr	r2, [r7, #8]
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <SPWM_timer_INIT+0x100>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <SPWM_timer_INIT+0x100>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0201 	orr.w	r2, r2, #1
 800131a:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SPWM_timer_INIT+0x100>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <SPWM_timer_INIT+0x100>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000004 	.word	0x20000004

0800133c <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <TIM2_IRQHandler+0x34>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <TIM2_IRQHandler+0x34>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <TIM2_IRQHandler+0x38>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <TIM2_IRQHandler+0x34>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <TIM2_IRQHandler+0x34>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0201 	bic.w	r2, r2, #1
 8001364:	601a      	str	r2, [r3, #0]

}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000020 	.word	0x20000020
 8001374:	2000001c 	.word	0x2000001c

08001378 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <TIM3_IRQHandler+0x6c>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b01      	cmp	r3, #1
 8001382:	d119      	bne.n	80013b8 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <TIM3_IRQHandler+0x70>)
 8001386:	691b      	ldr	r3, [r3, #16]
 8001388:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <TIM3_IRQHandler+0x70>)
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8001390:	4b16      	ldr	r3, [pc, #88]	; (80013ec <TIM3_IRQHandler+0x74>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8001398:	4b14      	ldr	r3, [pc, #80]	; (80013ec <TIM3_IRQHandler+0x74>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3b01      	subs	r3, #1
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <TIM3_IRQHandler+0x74>)
 80013a0:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 80013a2:	e01c      	b.n	80013de <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <TIM3_IRQHandler+0x6c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <TIM3_IRQHandler+0x70>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <TIM3_IRQHandler+0x70>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	6013      	str	r3, [r2, #0]
}
 80013b6:	e012      	b.n	80013de <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <TIM3_IRQHandler+0x78>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <TIM3_IRQHandler+0x78>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <TIM3_IRQHandler+0x78>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	691a      	ldr	r2, [r3, #16]
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <TIM3_IRQHandler+0x78>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0201 	bic.w	r2, r2, #1
 80013d6:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <TIM3_IRQHandler+0x7c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4798      	blx	r3
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000048 	.word	0x20000048
 80013e8:	40000400 	.word	0x40000400
 80013ec:	20000044 	.word	0x20000044
 80013f0:	20000098 	.word	0x20000098
 80013f4:	2000008c 	.word	0x2000008c

080013f8 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <TIM4_IRQHandler+0x24>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <TIM4_IRQHandler+0x24>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <TIM4_IRQHandler+0x28>)
 800140a:	881b      	ldrh	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b29a      	uxth	r2, r3
 8001410:	4b03      	ldr	r3, [pc, #12]	; (8001420 <TIM4_IRQHandler+0x28>)
 8001412:	801a      	strh	r2, [r3, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr
 800141c:	40000800 	.word	0x40000800
 8001420:	20000042 	.word	0x20000042

08001424 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 8001428:	4b5d      	ldr	r3, [pc, #372]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	429a      	cmp	r2, r3
 8001432:	d911      	bls.n	8001458 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 8001434:	4b5c      	ldr	r3, [pc, #368]	; (80015a8 <TIM1_UP_IRQHandler+0x184>)
 8001436:	2201      	movs	r2, #1
 8001438:	701a      	strb	r2, [r3, #0]
		flage1=0;
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <TIM1_UP_IRQHandler+0x188>)
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 8001440:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a5a      	ldr	r2, [pc, #360]	; (80015b0 <TIM1_UP_IRQHandler+0x18c>)
 8001446:	7812      	ldrb	r2, [r2, #0]
 8001448:	fbb3 f2f2 	udiv	r2, r3, r2
 800144c:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a53      	ldr	r2, [pc, #332]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e018      	b.n	800148a <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 8001458:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b63      	cmp	r3, #99	; 0x63
 800145e:	d814      	bhi.n	800148a <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 8001460:	4b51      	ldr	r3, [pc, #324]	; (80015a8 <TIM1_UP_IRQHandler+0x184>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
		flage1=1;
 8001466:	4b51      	ldr	r3, [pc, #324]	; (80015ac <TIM1_UP_IRQHandler+0x188>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 800146c:	4b51      	ldr	r3, [pc, #324]	; (80015b4 <TIM1_UP_IRQHandler+0x190>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b4f      	ldr	r3, [pc, #316]	; (80015b4 <TIM1_UP_IRQHandler+0x190>)
 8001478:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a4c      	ldr	r2, [pc, #304]	; (80015b0 <TIM1_UP_IRQHandler+0x18c>)
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	fbb3 f3f2 	udiv	r3, r3, r2
 8001486:	4a46      	ldr	r2, [pc, #280]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 8001488:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 800148a:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <TIM1_UP_IRQHandler+0x190>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d110      	bne.n	80014b4 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8001492:	4b49      	ldr	r3, [pc, #292]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6a1a      	ldr	r2, [r3, #32]
 8001498:	4b47      	ldr	r3, [pc, #284]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 80014a2:	4b45      	ldr	r3, [pc, #276]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f042 0210 	orr.w	r2, r2, #16
 80014b0:	621a      	str	r2, [r3, #32]
 80014b2:	e013      	b.n	80014dc <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 80014b4:	4b3f      	ldr	r3, [pc, #252]	; (80015b4 <TIM1_UP_IRQHandler+0x190>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10f      	bne.n	80014dc <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 80014bc:	4b3e      	ldr	r3, [pc, #248]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6a1a      	ldr	r2, [r3, #32]
 80014c2:	4b3d      	ldr	r3, [pc, #244]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0210 	bic.w	r2, r2, #16
 80014ca:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 80014cc:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0201 	orr.w	r2, r2, #1
 80014da:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 80014dc:	4b33      	ldr	r3, [pc, #204]	; (80015ac <TIM1_UP_IRQHandler+0x188>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d11c      	bne.n	800151e <TIM1_UP_IRQHandler+0xfa>
 80014e4:	4b30      	ldr	r3, [pc, #192]	; (80015a8 <TIM1_UP_IRQHandler+0x184>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d118      	bne.n	800151e <TIM1_UP_IRQHandler+0xfa>
		top=c;
 80014ec:	4b33      	ldr	r3, [pc, #204]	; (80015bc <TIM1_UP_IRQHandler+0x198>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 80014f2:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80014f4:	4b32      	ldr	r3, [pc, #200]	; (80015c0 <TIM1_UP_IRQHandler+0x19c>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2301      	movs	r3, #1
 8001502:	f7ff fe99 	bl	8001238 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8001506:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a29      	ldr	r2, [pc, #164]	; (80015b0 <TIM1_UP_IRQHandler+0x18c>)
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	fbb3 f2f2 	udiv	r2, r3, r2
 8001512:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a21      	ldr	r2, [pc, #132]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	e035      	b.n	800158a <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 800151e:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <TIM1_UP_IRQHandler+0x184>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d129      	bne.n	800157a <TIM1_UP_IRQHandler+0x156>
 8001526:	4b21      	ldr	r3, [pc, #132]	; (80015ac <TIM1_UP_IRQHandler+0x188>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d125      	bne.n	800157a <TIM1_UP_IRQHandler+0x156>
		top=c;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <TIM1_UP_IRQHandler+0x198>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 8001534:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	491c      	ldr	r1, [pc, #112]	; (80015b0 <TIM1_UP_IRQHandler+0x18c>)
 8001540:	7809      	ldrb	r1, [r1, #0]
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 800154a:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 800154c:	4b1c      	ldr	r3, [pc, #112]	; (80015c0 <TIM1_UP_IRQHandler+0x19c>)
 800154e:	6818      	ldr	r0, [r3, #0]
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	2301      	movs	r3, #1
 800155a:	f7ff fe6d 	bl	8001238 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <TIM1_UP_IRQHandler+0x180>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <TIM1_UP_IRQHandler+0x18c>)
 8001564:	7812      	ldrb	r2, [r2, #0]
 8001566:	fbb3 f2f2 	udiv	r2, r3, r2
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d10b      	bne.n	800158a <TIM1_UP_IRQHandler+0x166>
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <TIM1_UP_IRQHandler+0x17c>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e007      	b.n	800158a <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800157a:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0201 	bic.w	r2, r2, #1
 8001588:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691a      	ldr	r2, [r3, #16]
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <TIM1_UP_IRQHandler+0x194>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	611a      	str	r2, [r3, #16]
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000018 	.word	0x20000018
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	20000040 	.word	0x20000040
 80015ac:	20000008 	.word	0x20000008
 80015b0:	20000094 	.word	0x20000094
 80015b4:	20000009 	.word	0x20000009
 80015b8:	20000004 	.word	0x20000004
 80015bc:	20000014 	.word	0x20000014
 80015c0:	20000010 	.word	0x20000010

080015c4 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0

	Global_config->P_IRQ_Callback () ;
 80015c8:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <USART1_IRQHandler+0x10>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	4798      	blx	r3

}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	2000004c 	.word	0x2000004c

080015d8 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 80015dc:	4b02      	ldr	r3, [pc, #8]	; (80015e8 <USART2_IRQHandler+0x10>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4798      	blx	r3

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	2000004c 	.word	0x2000004c

080015ec <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 80015f0:	4b02      	ldr	r3, [pc, #8]	; (80015fc <USART3_IRQHandler+0x10>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	4798      	blx	r3


}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	2000004c 	.word	0x2000004c

08001600 <__libc_init_array>:
 8001600:	b570      	push	{r4, r5, r6, lr}
 8001602:	2500      	movs	r5, #0
 8001604:	4e0c      	ldr	r6, [pc, #48]	; (8001638 <__libc_init_array+0x38>)
 8001606:	4c0d      	ldr	r4, [pc, #52]	; (800163c <__libc_init_array+0x3c>)
 8001608:	1ba4      	subs	r4, r4, r6
 800160a:	10a4      	asrs	r4, r4, #2
 800160c:	42a5      	cmp	r5, r4
 800160e:	d109      	bne.n	8001624 <__libc_init_array+0x24>
 8001610:	f000 f81a 	bl	8001648 <_init>
 8001614:	2500      	movs	r5, #0
 8001616:	4e0a      	ldr	r6, [pc, #40]	; (8001640 <__libc_init_array+0x40>)
 8001618:	4c0a      	ldr	r4, [pc, #40]	; (8001644 <__libc_init_array+0x44>)
 800161a:	1ba4      	subs	r4, r4, r6
 800161c:	10a4      	asrs	r4, r4, #2
 800161e:	42a5      	cmp	r5, r4
 8001620:	d105      	bne.n	800162e <__libc_init_array+0x2e>
 8001622:	bd70      	pop	{r4, r5, r6, pc}
 8001624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001628:	4798      	blx	r3
 800162a:	3501      	adds	r5, #1
 800162c:	e7ee      	b.n	800160c <__libc_init_array+0xc>
 800162e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001632:	4798      	blx	r3
 8001634:	3501      	adds	r5, #1
 8001636:	e7f2      	b.n	800161e <__libc_init_array+0x1e>
 8001638:	08001660 	.word	0x08001660
 800163c:	08001660 	.word	0x08001660
 8001640:	08001660 	.word	0x08001660
 8001644:	08001664 	.word	0x08001664

08001648 <_init>:
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	bf00      	nop
 800164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800164e:	bc08      	pop	{r3}
 8001650:	469e      	mov	lr, r3
 8001652:	4770      	bx	lr

08001654 <_fini>:
 8001654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001656:	bf00      	nop
 8001658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800165a:	bc08      	pop	{r3}
 800165c:	469e      	mov	lr, r3
 800165e:	4770      	bx	lr
