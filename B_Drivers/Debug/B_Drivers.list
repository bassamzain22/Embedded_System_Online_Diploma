
B_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e60  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fe0  08000fe0  00010fe8  2**0
                  CONTENTS
  4 .ARM          00000000  08000fe0  08000fe0  00010fe8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000fe0  08000fe8  00010fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe0  08000fe0  00010fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe4  08000fe4  00010fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010fe8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08000fe8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000fe8  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fe8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004a6a  00000000  00000000  00011011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cb5  00000000  00000000  00015a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000260  00000000  00000000  00016730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f8  00000000  00000000  00016990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003762  00000000  00000000  00016b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002c10  00000000  00000000  0001a2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c275  00000000  00000000  0001cefa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002916f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000808  00000000  00000000  000291ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f78 	.word	0x08000f78

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f78 	.word	0x08000f78

08000170 <Motor_Init>:
 *      Author: Bassam Zain
 */

#include "Motor_L298N.h"

static void Motor_Init(Motor_Config_t* motor) {
 8000170:	b580      	push	{r7, lr}
 8000172:	b08a      	sub	sp, #40	; 0x28
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    MCAL_GPIO_Enable_ClocK(motor->GPIOx);
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	4618      	mov	r0, r3
 800017e:	f000 fbcf 	bl	8000920 <MCAL_GPIO_Enable_ClocK>

    GPIO_PinConfig_t pinConfig ;
    pinConfig.GPIO_Mode = GPIO_Mode_Out_push_pull,
 8000182:	2304      	movs	r3, #4
 8000184:	617b      	str	r3, [r7, #20]
    pinConfig.GPIO_Speed = GPIO_Speed_50MHz;
 8000186:	2303      	movs	r3, #3
 8000188:	61bb      	str	r3, [r7, #24]

    //initalization IN1
    pinConfig.GPIO_PinNumber = motor->IN1_Pin;
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	889b      	ldrh	r3, [r3, #4]
 800018e:	823b      	strh	r3, [r7, #16]
    MCAL_GPIO_Init(motor->GPIOx, &pinConfig);
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	f107 0210 	add.w	r2, r7, #16
 8000198:	4611      	mov	r1, r2
 800019a:	4618      	mov	r0, r3
 800019c:	f000 fc61 	bl	8000a62 <MCAL_GPIO_Init>

    //initalization IN2
    pinConfig.GPIO_PinNumber = motor->IN2_Pin;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	88db      	ldrh	r3, [r3, #6]
 80001a4:	823b      	strh	r3, [r7, #16]
    MCAL_GPIO_Init(motor->GPIOx, &pinConfig);
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	f107 0210 	add.w	r2, r7, #16
 80001ae:	4611      	mov	r1, r2
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 fc56 	bl	8000a62 <MCAL_GPIO_Init>

    uint32_t clock_freq = 72000000;
 80001b6:	4b40      	ldr	r3, [pc, #256]	; (80002b8 <Motor_Init+0x148>)
 80001b8:	623b      	str	r3, [r7, #32]
    uint16_t period = (clock_freq / motor->PWM_Frequency) - 1;
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	68db      	ldr	r3, [r3, #12]
 80001be:	6a3a      	ldr	r2, [r7, #32]
 80001c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80001c4:	b29b      	uxth	r3, r3
 80001c6:	3b01      	subs	r3, #1
 80001c8:	83fb      	strh	r3, [r7, #30]

    TIM_Config_t timerConfig;
	timerConfig.TIM_Prescaler = 0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	81bb      	strh	r3, [r7, #12]
	timerConfig.TIM_Period = period;
 80001ce:	8bfb      	ldrh	r3, [r7, #30]
 80001d0:	81fb      	strh	r3, [r7, #14]


    TIM_Init(motor->TIMx, &timerConfig);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	7a1b      	ldrb	r3, [r3, #8]
 80001d6:	f107 020c 	add.w	r2, r7, #12
 80001da:	4611      	mov	r1, r2
 80001dc:	4618      	mov	r0, r3
 80001de:	f000 fcfd 	bl	8000bdc <TIM_Init>

    TIM_TypeDef* TIMx;
    switch(motor->TIMx) {
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	7a1b      	ldrb	r3, [r3, #8]
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	d817      	bhi.n	800021a <Motor_Init+0xaa>
 80001ea:	a201      	add	r2, pc, #4	; (adr r2, 80001f0 <Motor_Init+0x80>)
 80001ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f0:	08000201 	.word	0x08000201
 80001f4:	08000207 	.word	0x08000207
 80001f8:	0800020f 	.word	0x0800020f
 80001fc:	08000215 	.word	0x08000215
        case TIM1_SELECT: TIMx = TIM1; break;
 8000200:	4b2e      	ldr	r3, [pc, #184]	; (80002bc <Motor_Init+0x14c>)
 8000202:	627b      	str	r3, [r7, #36]	; 0x24
 8000204:	e009      	b.n	800021a <Motor_Init+0xaa>
        case TIM2_SELECT: TIMx = TIM2; break;
 8000206:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800020a:	627b      	str	r3, [r7, #36]	; 0x24
 800020c:	e005      	b.n	800021a <Motor_Init+0xaa>
        case TIM3_SELECT: TIMx = TIM3; break;
 800020e:	4b2c      	ldr	r3, [pc, #176]	; (80002c0 <Motor_Init+0x150>)
 8000210:	627b      	str	r3, [r7, #36]	; 0x24
 8000212:	e002      	b.n	800021a <Motor_Init+0xaa>
        case TIM4_SELECT: TIMx = TIM4; break;
 8000214:	4b2b      	ldr	r3, [pc, #172]	; (80002c4 <Motor_Init+0x154>)
 8000216:	627b      	str	r3, [r7, #36]	; 0x24
 8000218:	bf00      	nop
    }

    switch(motor->PWM_Channel) {
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	8a1b      	ldrh	r3, [r3, #16]
 800021e:	3b01      	subs	r3, #1
 8000220:	2b03      	cmp	r3, #3
 8000222:	d83f      	bhi.n	80002a4 <Motor_Init+0x134>
 8000224:	a201      	add	r2, pc, #4	; (adr r2, 800022c <Motor_Init+0xbc>)
 8000226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800022a:	bf00      	nop
 800022c:	0800023d 	.word	0x0800023d
 8000230:	08000257 	.word	0x08000257
 8000234:	08000271 	.word	0x08000271
 8000238:	0800028b 	.word	0x0800028b
        case 1:
            TIMx->CCMR1 |= (6 << 4);
 800023c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800023e:	699b      	ldr	r3, [r3, #24]
 8000240:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000246:	619a      	str	r2, [r3, #24]
            TIMx->CCER |= (1 << 0);
 8000248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	f043 0201 	orr.w	r2, r3, #1
 8000250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000252:	621a      	str	r2, [r3, #32]
            break;
 8000254:	e026      	b.n	80002a4 <Motor_Init+0x134>
        case 2:
            TIMx->CCMR1 |= (6 << 12);
 8000256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 800025e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000260:	619a      	str	r2, [r3, #24]
            TIMx->CCER |= (1 << 4);
 8000262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000264:	6a1b      	ldr	r3, [r3, #32]
 8000266:	f043 0210 	orr.w	r2, r3, #16
 800026a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800026c:	621a      	str	r2, [r3, #32]
            break;
 800026e:	e019      	b.n	80002a4 <Motor_Init+0x134>
        case 3:
            TIMx->CCMR2 |= (6 << 4);
 8000270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000272:	69db      	ldr	r3, [r3, #28]
 8000274:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8000278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800027a:	61da      	str	r2, [r3, #28]
            TIMx->CCER |= (1 << 8);
 800027c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800027e:	6a1b      	ldr	r3, [r3, #32]
 8000280:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000286:	621a      	str	r2, [r3, #32]
            break;
 8000288:	e00c      	b.n	80002a4 <Motor_Init+0x134>
        case 4:
            TIMx->CCMR2 |= (6 << 12);
 800028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800028c:	69db      	ldr	r3, [r3, #28]
 800028e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8000292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000294:	61da      	str	r2, [r3, #28]
            TIMx->CCER |= (1 << 12);
 8000296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000298:	6a1b      	ldr	r3, [r3, #32]
 800029a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800029e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002a0:	621a      	str	r2, [r3, #32]
            break;
 80002a2:	bf00      	nop
    }

    TIM_Start(motor->TIMx);
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	7a1b      	ldrb	r3, [r3, #8]
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fd2b 	bl	8000d04 <TIM_Start>
}
 80002ae:	bf00      	nop
 80002b0:	3728      	adds	r7, #40	; 0x28
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	044aa200 	.word	0x044aa200
 80002bc:	40012c00 	.word	0x40012c00
 80002c0:	40000400 	.word	0x40000400
 80002c4:	40000800 	.word	0x40000800

080002c8 <Motor_SetSpeed>:

static void Motor_SetSpeed(Motor_Config_t* motor, uint8_t speedPercent) {
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
    if(speedPercent > 100) speedPercent = 100;
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b64      	cmp	r3, #100	; 0x64
 80002d8:	d901      	bls.n	80002de <Motor_SetSpeed+0x16>
 80002da:	2364      	movs	r3, #100	; 0x64
 80002dc:	70fb      	strb	r3, [r7, #3]

    TIM_TypeDef* TIMx;
    switch(motor->TIMx) {
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7a1b      	ldrb	r3, [r3, #8]
 80002e2:	2b03      	cmp	r3, #3
 80002e4:	d817      	bhi.n	8000316 <Motor_SetSpeed+0x4e>
 80002e6:	a201      	add	r2, pc, #4	; (adr r2, 80002ec <Motor_SetSpeed+0x24>)
 80002e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ec:	080002fd 	.word	0x080002fd
 80002f0:	08000303 	.word	0x08000303
 80002f4:	0800030b 	.word	0x0800030b
 80002f8:	08000311 	.word	0x08000311
        case TIM1_SELECT: TIMx = TIM1; break;
 80002fc:	4b1e      	ldr	r3, [pc, #120]	; (8000378 <Motor_SetSpeed+0xb0>)
 80002fe:	60fb      	str	r3, [r7, #12]
 8000300:	e009      	b.n	8000316 <Motor_SetSpeed+0x4e>
        case TIM2_SELECT: TIMx = TIM2; break;
 8000302:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e005      	b.n	8000316 <Motor_SetSpeed+0x4e>
        case TIM3_SELECT: TIMx = TIM3; break;
 800030a:	4b1c      	ldr	r3, [pc, #112]	; (800037c <Motor_SetSpeed+0xb4>)
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	e002      	b.n	8000316 <Motor_SetSpeed+0x4e>
        case TIM4_SELECT: TIMx = TIM4; break;
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <Motor_SetSpeed+0xb8>)
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	bf00      	nop
    }

    uint16_t pulseWidth = (TIMx->ARR * speedPercent) / 100;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031a:	78fa      	ldrb	r2, [r7, #3]
 800031c:	fb02 f303 	mul.w	r3, r2, r3
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <Motor_SetSpeed+0xbc>)
 8000322:	fba2 2303 	umull	r2, r3, r2, r3
 8000326:	095b      	lsrs	r3, r3, #5
 8000328:	817b      	strh	r3, [r7, #10]

    switch(motor->PWM_Channel) {
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	8a1b      	ldrh	r3, [r3, #16]
 800032e:	3b01      	subs	r3, #1
 8000330:	2b03      	cmp	r3, #3
 8000332:	d81b      	bhi.n	800036c <Motor_SetSpeed+0xa4>
 8000334:	a201      	add	r2, pc, #4	; (adr r2, 800033c <Motor_SetSpeed+0x74>)
 8000336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800033a:	bf00      	nop
 800033c:	0800034d 	.word	0x0800034d
 8000340:	08000355 	.word	0x08000355
 8000344:	0800035d 	.word	0x0800035d
 8000348:	08000365 	.word	0x08000365
        case 1: TIMx->CCR1 = pulseWidth; break;
 800034c:	897a      	ldrh	r2, [r7, #10]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	635a      	str	r2, [r3, #52]	; 0x34
 8000352:	e00b      	b.n	800036c <Motor_SetSpeed+0xa4>
        case 2: TIMx->CCR2 = pulseWidth; break;
 8000354:	897a      	ldrh	r2, [r7, #10]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	639a      	str	r2, [r3, #56]	; 0x38
 800035a:	e007      	b.n	800036c <Motor_SetSpeed+0xa4>
        case 3: TIMx->CCR3 = pulseWidth; break;
 800035c:	897a      	ldrh	r2, [r7, #10]
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	63da      	str	r2, [r3, #60]	; 0x3c
 8000362:	e003      	b.n	800036c <Motor_SetSpeed+0xa4>
        case 4: TIMx->CCR4 = pulseWidth; break;
 8000364:	897a      	ldrh	r2, [r7, #10]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	641a      	str	r2, [r3, #64]	; 0x40
 800036a:	bf00      	nop
    }
}
 800036c:	bf00      	nop
 800036e:	3714      	adds	r7, #20
 8000370:	46bd      	mov	sp, r7
 8000372:	bc80      	pop	{r7}
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40012c00 	.word	0x40012c00
 800037c:	40000400 	.word	0x40000400
 8000380:	40000800 	.word	0x40000800
 8000384:	51eb851f 	.word	0x51eb851f

08000388 <MotorSystem_Init>:

void MotorSystem_Init(MotorSystem_Config_t* config) {
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
    Motor_Init(&config->left_forward);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4618      	mov	r0, r3
 8000394:	f7ff feec 	bl	8000170 <Motor_Init>
    Motor_Init(&config->right_forward);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	3314      	adds	r3, #20
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff fee7 	bl	8000170 <Motor_Init>
    Motor_Init(&config->left_backward);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	3328      	adds	r3, #40	; 0x28
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff fee2 	bl	8000170 <Motor_Init>
    Motor_Init(&config->right_backward);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	333c      	adds	r3, #60	; 0x3c
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff fedd 	bl	8000170 <Motor_Init>
}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}

080003be <Move_Forward>:
void Move_Forward(MotorSystem_Config_t* config, uint8_t speed) {
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	460b      	mov	r3, r1
 80003c8:	70fb      	strb	r3, [r7, #3]
    // Enable all forward motors
    Motor_SetSpeed(&config->left_forward, speed);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	78fa      	ldrb	r2, [r7, #3]
 80003ce:	4611      	mov	r1, r2
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ff79 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->right_forward, speed);
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	3314      	adds	r3, #20
 80003da:	78fa      	ldrb	r2, [r7, #3]
 80003dc:	4611      	mov	r1, r2
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff72 	bl	80002c8 <Motor_SetSpeed>

    // enable backward motors
    Motor_SetSpeed(&config->left_backward, speed);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	3328      	adds	r3, #40	; 0x28
 80003e8:	78fa      	ldrb	r2, [r7, #3]
 80003ea:	4611      	mov	r1, r2
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff6b 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->right_backward, speed);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	333c      	adds	r3, #60	; 0x3c
 80003f6:	78fa      	ldrb	r2, [r7, #3]
 80003f8:	4611      	mov	r1, r2
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff64 	bl	80002c8 <Motor_SetSpeed>

    // Set forward direction
    // forward motor
    MCAL_GPIO_WritePin(config->left_forward.GPIOx, config->left_forward.IN1_Pin, GPIO_PIN_SET);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6818      	ldr	r0, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	889b      	ldrh	r3, [r3, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	4619      	mov	r1, r3
 800040c:	f000 fbcd 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->left_forward.GPIOx, config->left_forward.IN2_Pin, GPIO_PIN_RESET);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6818      	ldr	r0, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	88db      	ldrh	r3, [r3, #6]
 8000418:	2200      	movs	r2, #0
 800041a:	4619      	mov	r1, r3
 800041c:	f000 fbc5 	bl	8000baa <MCAL_GPIO_WritePin>

    MCAL_GPIO_WritePin(config->right_forward.GPIOx, config->right_forward.IN1_Pin, GPIO_PIN_SET);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	6958      	ldr	r0, [r3, #20]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	8b1b      	ldrh	r3, [r3, #24]
 8000428:	2201      	movs	r2, #1
 800042a:	4619      	mov	r1, r3
 800042c:	f000 fbbd 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->right_forward.GPIOx, config->right_forward.IN2_Pin, GPIO_PIN_RESET);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	6958      	ldr	r0, [r3, #20]
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	8b5b      	ldrh	r3, [r3, #26]
 8000438:	2200      	movs	r2, #0
 800043a:	4619      	mov	r1, r3
 800043c:	f000 fbb5 	bl	8000baa <MCAL_GPIO_WritePin>

    //backward motor
    MCAL_GPIO_WritePin(config->left_backward.GPIOx, config->left_backward.IN1_Pin, GPIO_PIN_SET);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	f000 fbad 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->left_forward.GPIOx, config->left_forward.IN2_Pin, GPIO_PIN_RESET);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	88db      	ldrh	r3, [r3, #6]
 8000458:	2200      	movs	r2, #0
 800045a:	4619      	mov	r1, r3
 800045c:	f000 fba5 	bl	8000baa <MCAL_GPIO_WritePin>

    MCAL_GPIO_WritePin(config->right_forward.GPIOx, config->right_forward.IN1_Pin, GPIO_PIN_SET);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	6958      	ldr	r0, [r3, #20]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	8b1b      	ldrh	r3, [r3, #24]
 8000468:	2201      	movs	r2, #1
 800046a:	4619      	mov	r1, r3
 800046c:	f000 fb9d 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->right_forward.GPIOx, config->right_forward.IN2_Pin, GPIO_PIN_RESET);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	6958      	ldr	r0, [r3, #20]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	8b5b      	ldrh	r3, [r3, #26]
 8000478:	2200      	movs	r2, #0
 800047a:	4619      	mov	r1, r3
 800047c:	f000 fb95 	bl	8000baa <MCAL_GPIO_WritePin>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <Move_Right>:
    MCAL_GPIO_WritePin(config->left_backward.GPIOx, config->left_backward.IN1_Pin, GPIO_PIN_RESET);

    MCAL_GPIO_WritePin(config->right_backward.GPIOx, config->right_backward.IN2_Pin, GPIO_PIN_SET);
    MCAL_GPIO_WritePin(config->right_backward.GPIOx, config->right_backward.IN1_Pin, GPIO_PIN_RESET);
}
void Move_Right(MotorSystem_Config_t* config, uint8_t speed) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	460b      	mov	r3, r1
 8000492:	70fb      	strb	r3, [r7, #3]
    // Enable left motors
    Motor_SetSpeed(&config->left_forward, speed);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	78fa      	ldrb	r2, [r7, #3]
 8000498:	4611      	mov	r1, r2
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff14 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->left_backward, speed);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3328      	adds	r3, #40	; 0x28
 80004a4:	78fa      	ldrb	r2, [r7, #3]
 80004a6:	4611      	mov	r1, r2
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff0d 	bl	80002c8 <Motor_SetSpeed>

    // Disable right motors
    Motor_SetSpeed(&config->right_forward, 0);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	3314      	adds	r3, #20
 80004b2:	2100      	movs	r1, #0
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff ff07 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->right_backward, 0);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	333c      	adds	r3, #60	; 0x3c
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff01 	bl	80002c8 <Motor_SetSpeed>

    // Set directions
    MCAL_GPIO_WritePin(config->left_forward.GPIOx, config->left_forward.IN1_Pin, GPIO_PIN_SET);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6818      	ldr	r0, [r3, #0]
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	889b      	ldrh	r3, [r3, #4]
 80004ce:	2201      	movs	r2, #1
 80004d0:	4619      	mov	r1, r3
 80004d2:	f000 fb6a 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->left_forward.GPIOx, config->left_forward.IN2_Pin, GPIO_PIN_RESET);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	6818      	ldr	r0, [r3, #0]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	88db      	ldrh	r3, [r3, #6]
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	f000 fb62 	bl	8000baa <MCAL_GPIO_WritePin>

    MCAL_GPIO_WritePin(config->left_backward.GPIOx, config->left_backward.IN1_Pin, GPIO_PIN_SET);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80004ee:	2201      	movs	r2, #1
 80004f0:	4619      	mov	r1, r3
 80004f2:	f000 fb5a 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->left_backward.GPIOx, config->left_backward.IN2_Pin, GPIO_PIN_RESET);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80004fe:	2200      	movs	r2, #0
 8000500:	4619      	mov	r1, r3
 8000502:	f000 fb52 	bl	8000baa <MCAL_GPIO_WritePin>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <Move_Left>:

void Move_Left(MotorSystem_Config_t* config, uint8_t speed) {
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	460b      	mov	r3, r1
 8000518:	70fb      	strb	r3, [r7, #3]
    // Enable right motors
    Motor_SetSpeed(&config->right_forward, speed);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	3314      	adds	r3, #20
 800051e:	78fa      	ldrb	r2, [r7, #3]
 8000520:	4611      	mov	r1, r2
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fed0 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->right_backward, speed);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	333c      	adds	r3, #60	; 0x3c
 800052c:	78fa      	ldrb	r2, [r7, #3]
 800052e:	4611      	mov	r1, r2
 8000530:	4618      	mov	r0, r3
 8000532:	f7ff fec9 	bl	80002c8 <Motor_SetSpeed>

    // Disable left motors
    Motor_SetSpeed(&config->left_forward, 0);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fec4 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->left_backward, 0);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	3328      	adds	r3, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f7ff febe 	bl	80002c8 <Motor_SetSpeed>

    // Set directions
    MCAL_GPIO_WritePin(config->right_forward.GPIOx, config->right_forward.IN1_Pin, GPIO_PIN_SET);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	6958      	ldr	r0, [r3, #20]
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	8b1b      	ldrh	r3, [r3, #24]
 8000554:	2201      	movs	r2, #1
 8000556:	4619      	mov	r1, r3
 8000558:	f000 fb27 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->right_forward.GPIOx, config->right_forward.IN2_Pin, GPIO_PIN_RESET);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	6958      	ldr	r0, [r3, #20]
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	8b5b      	ldrh	r3, [r3, #26]
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	f000 fb1f 	bl	8000baa <MCAL_GPIO_WritePin>

    MCAL_GPIO_WritePin(config->right_backward.GPIOx, config->right_backward.IN1_Pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000576:	2201      	movs	r2, #1
 8000578:	4619      	mov	r1, r3
 800057a:	f000 fb16 	bl	8000baa <MCAL_GPIO_WritePin>
    MCAL_GPIO_WritePin(config->right_backward.GPIOx, config->right_backward.IN2_Pin, GPIO_PIN_RESET);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	f000 fb0d 	bl	8000baa <MCAL_GPIO_WritePin>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Stop_All>:

void Stop_All(MotorSystem_Config_t* config) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
    Motor_SetSpeed(&config->left_forward, 0);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe8f 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->right_forward, 0);
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3314      	adds	r3, #20
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff fe89 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->left_backward, 0);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	3328      	adds	r3, #40	; 0x28
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe83 	bl	80002c8 <Motor_SetSpeed>
    Motor_SetSpeed(&config->right_backward, 0);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	333c      	adds	r3, #60	; 0x3c
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe7d 	bl	80002c8 <Motor_SetSpeed>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
	...

080005d8 <Delay_us>:
void Delay_us(uint32_t microseconds) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    // Configure TIM4 for 1MHz clock (1μs per tick)
    TIM_Config_t timerConfig = {
 80005e0:	2347      	movs	r3, #71	; 0x47
 80005e2:	81bb      	strh	r3, [r7, #12]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	81fb      	strh	r3, [r7, #14]
        .TIM_Prescaler = 72 - 1,  // 72MHz/72 = 1MHz (1μs per tick)
        .TIM_Period = microseconds // Direct μs count
    };

    // Initialize and start TIM4
    TIM_Init(TIM4_SELECT, &timerConfig);
 80005ea:	f107 030c 	add.w	r3, r7, #12
 80005ee:	4619      	mov	r1, r3
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 faf3 	bl	8000bdc <TIM_Init>
    TIM_Start(TIM4_SELECT);
 80005f6:	2003      	movs	r0, #3
 80005f8:	f000 fb84 	bl	8000d04 <TIM_Start>

    // Wait for timer to complete
    while(!(TIM4->SR & 1));  // Wait for update interrupt flag
 80005fc:	bf00      	nop
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <Delay_us+0x4c>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0f9      	beq.n	80005fe <Delay_us+0x26>

    // Cleanup
    TIM4->SR &= ~1;  // Clear the update flag
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <Delay_us+0x4c>)
 800060c:	691b      	ldr	r3, [r3, #16]
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <Delay_us+0x4c>)
 8000610:	f023 0301 	bic.w	r3, r3, #1
 8000614:	6113      	str	r3, [r2, #16]
    TIM_Stop(TIM4_SELECT);
 8000616:	2003      	movs	r0, #3
 8000618:	f000 fbb2 	bl	8000d80 <TIM_Stop>
}
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40000800 	.word	0x40000800

08000628 <Delay_ms>:
void Delay_ms(uint32_t milliseconds) {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
    while(milliseconds--) {
 8000630:	e003      	b.n	800063a <Delay_ms+0x12>
        Delay_us(1000);  // 1000μs = 1ms
 8000632:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000636:	f7ff ffcf 	bl	80005d8 <Delay_us>
    while(milliseconds--) {
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	1e5a      	subs	r2, r3, #1
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d1f6      	bne.n	8000632 <Delay_ms+0xa>
    }
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}

0800064c <main>:
        Move_Forward(config, (uint8_t)current_speed);
        Motor_Delay_ms(step_delay);
    }
}
int main(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
	 MotorSystem_Config_t motors = {
 8000652:	4a15      	ldr	r2, [pc, #84]	; (80006a8 <main+0x5c>)
 8000654:	463b      	mov	r3, r7
 8000656:	4611      	mov	r1, r2
 8000658:	2250      	movs	r2, #80	; 0x50
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fc80 	bl	8000f60 <memcpy>
	            .PWM_Frequency = 1000,
	            .PWM_Channel = 1
	        }
	    };

	 	    MotorSystem_Init(&motors);
 8000660:	463b      	mov	r3, r7
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fe90 	bl	8000388 <MotorSystem_Init>
	 	    Move_Forward(&motors, 50);
 8000668:	463b      	mov	r3, r7
 800066a:	2132      	movs	r1, #50	; 0x32
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fea6 	bl	80003be <Move_Forward>
	    	Move_Left(&motors, 70);  // Left motors at 70%, right stopped
 8000672:	463b      	mov	r3, r7
 8000674:	2146      	movs	r1, #70	; 0x46
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff49 	bl	800050e <Move_Left>
	        Delay_ms(3000);
 800067c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000680:	f7ff ffd2 	bl	8000628 <Delay_ms>

	        Move_Right(&motors, 70); // Right motors at 70%, left stopped
 8000684:	463b      	mov	r3, r7
 8000686:	2146      	movs	r1, #70	; 0x46
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fefd 	bl	8000488 <Move_Right>
	        Delay_ms(3000);
 800068e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000692:	f7ff ffc9 	bl	8000628 <Delay_ms>

	        Stop_All(&motors);
 8000696:	463b      	mov	r3, r7
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ff7d 	bl	8000598 <Stop_All>
	        Delay_ms(1000);
 800069e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006a2:	f7ff ffc1 	bl	8000628 <Delay_ms>

	    while(1) {
 80006a6:	e7fe      	b.n	80006a6 <main+0x5a>
 80006a8:	08000f90 	.word	0x08000f90

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	; (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	; (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	; (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 fc1d 	bl	8000f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff ffb5 	bl	800064c <main>

080006e2 <LoopForever>:

LoopForever:
    b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f0:	08000fe8 	.word	0x08000fe8
  ldr r2, =_sbss
 80006f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f8:	20000070 	.word	0x20000070

080006fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC1_2_IRQHandler>
	...

08000700 <EXTI0_IRQHandler>:

}


void EXTI0_IRQHandler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	GP_FuncCallBack[0]();
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <EXTI0_IRQHandler+0x1c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4798      	blx	r3
	EXTI->PR |= (1 << 0);
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <EXTI0_IRQHandler+0x20>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a04      	ldr	r2, [pc, #16]	; (8000720 <EXTI0_IRQHandler+0x20>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	6153      	str	r3, [r2, #20]

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000030 	.word	0x20000030
 8000720:	40010400 	.word	0x40010400

08000724 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	GP_FuncCallBack[1]();
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <EXTI1_IRQHandler+0x1c>)
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4798      	blx	r3
	EXTI->PR |= (1 << 1);
 800072e:	4b05      	ldr	r3, [pc, #20]	; (8000744 <EXTI1_IRQHandler+0x20>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	4a04      	ldr	r2, [pc, #16]	; (8000744 <EXTI1_IRQHandler+0x20>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6153      	str	r3, [r2, #20]

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000030 	.word	0x20000030
 8000744:	40010400 	.word	0x40010400

08000748 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	GP_FuncCallBack[2]();
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <EXTI2_IRQHandler+0x1c>)
 800074e:	689b      	ldr	r3, [r3, #8]
 8000750:	4798      	blx	r3
	EXTI->PR |= (1 << 2);
 8000752:	4b05      	ldr	r3, [pc, #20]	; (8000768 <EXTI2_IRQHandler+0x20>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a04      	ldr	r2, [pc, #16]	; (8000768 <EXTI2_IRQHandler+0x20>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	6153      	str	r3, [r2, #20]


}
 800075e:	bf00      	nop
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000030 	.word	0x20000030
 8000768:	40010400 	.word	0x40010400

0800076c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	GP_FuncCallBack[3]();
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <EXTI3_IRQHandler+0x1c>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	4798      	blx	r3
	EXTI->PR |= (1 << 3);
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <EXTI3_IRQHandler+0x20>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <EXTI3_IRQHandler+0x20>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6153      	str	r3, [r2, #20]

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000030 	.word	0x20000030
 800078c:	40010400 	.word	0x40010400

08000790 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	GP_FuncCallBack[4]();
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <EXTI4_IRQHandler+0x1c>)
 8000796:	691b      	ldr	r3, [r3, #16]
 8000798:	4798      	blx	r3
	EXTI->PR |= (1 << 4);
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <EXTI4_IRQHandler+0x20>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <EXTI4_IRQHandler+0x20>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	6153      	str	r3, [r2, #20]

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000030 	.word	0x20000030
 80007b0:	40010400 	.word	0x40010400

080007b4 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) { GP_FuncCallBack[5]();   EXTI->PR |= (1 << 5); }
 80007b8:	4b26      	ldr	r3, [pc, #152]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d008      	beq.n	80007d6 <EXTI9_5_IRQHandler+0x22>
 80007c4:	4b24      	ldr	r3, [pc, #144]	; (8000858 <EXTI9_5_IRQHandler+0xa4>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4798      	blx	r3
 80007ca:	4b22      	ldr	r3, [pc, #136]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007cc:	695b      	ldr	r3, [r3, #20]
 80007ce:	4a21      	ldr	r2, [pc, #132]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<6)) { GP_FuncCallBack[6]();   EXTI->PR |= (1 << 6); }
 80007d6:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d008      	beq.n	80007f4 <EXTI9_5_IRQHandler+0x40>
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <EXTI9_5_IRQHandler+0xa4>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	4798      	blx	r3
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f2:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<7)) { GP_FuncCallBack[7]();   EXTI->PR |= (1 << 7); }
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 80007f6:	695b      	ldr	r3, [r3, #20]
 80007f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d008      	beq.n	8000812 <EXTI9_5_IRQHandler+0x5e>
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <EXTI9_5_IRQHandler+0xa4>)
 8000802:	69db      	ldr	r3, [r3, #28]
 8000804:	4798      	blx	r3
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 8000808:	695b      	ldr	r3, [r3, #20]
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 800080c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000810:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<8)) { GP_FuncCallBack[8]();   EXTI->PR |= (1 << 8); }
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800081a:	2b00      	cmp	r3, #0
 800081c:	d008      	beq.n	8000830 <EXTI9_5_IRQHandler+0x7c>
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <EXTI9_5_IRQHandler+0xa4>)
 8000820:	6a1b      	ldr	r3, [r3, #32]
 8000822:	4798      	blx	r3
 8000824:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 8000826:	695b      	ldr	r3, [r3, #20]
 8000828:	4a0a      	ldr	r2, [pc, #40]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 800082a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082e:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<9)) { GP_FuncCallBack[9]();   EXTI->PR |= (1 << 9); }
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000838:	2b00      	cmp	r3, #0
 800083a:	d008      	beq.n	800084e <EXTI9_5_IRQHandler+0x9a>
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <EXTI9_5_IRQHandler+0xa4>)
 800083e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000840:	4798      	blx	r3
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 8000844:	695b      	ldr	r3, [r3, #20]
 8000846:	4a03      	ldr	r2, [pc, #12]	; (8000854 <EXTI9_5_IRQHandler+0xa0>)
 8000848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800084c:	6153      	str	r3, [r2, #20]
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010400 	.word	0x40010400
 8000858:	20000030 	.word	0x20000030

0800085c <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) { GP_FuncCallBack[10]();   EXTI->PR |= (1 << 10); }
 8000860:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000868:	2b00      	cmp	r3, #0
 800086a:	d008      	beq.n	800087e <EXTI15_10_IRQHandler+0x22>
 800086c:	4b2b      	ldr	r3, [pc, #172]	; (800091c <EXTI15_10_IRQHandler+0xc0>)
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	4798      	blx	r3
 8000872:	4b29      	ldr	r3, [pc, #164]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	4a28      	ldr	r2, [pc, #160]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 8000878:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800087c:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<11)) { GP_FuncCallBack[11]();   EXTI->PR |= (1 << 11); }
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000886:	2b00      	cmp	r3, #0
 8000888:	d008      	beq.n	800089c <EXTI15_10_IRQHandler+0x40>
 800088a:	4b24      	ldr	r3, [pc, #144]	; (800091c <EXTI15_10_IRQHandler+0xc0>)
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	4798      	blx	r3
 8000890:	4b21      	ldr	r3, [pc, #132]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	4a20      	ldr	r2, [pc, #128]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 8000896:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800089a:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<12)) { GP_FuncCallBack[12]();   EXTI->PR |= (1 << 12); }
 800089c:	4b1e      	ldr	r3, [pc, #120]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d008      	beq.n	80008ba <EXTI15_10_IRQHandler+0x5e>
 80008a8:	4b1c      	ldr	r3, [pc, #112]	; (800091c <EXTI15_10_IRQHandler+0xc0>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	4798      	blx	r3
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008b8:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<13)) { GP_FuncCallBack[13]();   EXTI->PR |= (1 << 13); }
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d008      	beq.n	80008d8 <EXTI15_10_IRQHandler+0x7c>
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <EXTI15_10_IRQHandler+0xc0>)
 80008c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ca:	4798      	blx	r3
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	4a11      	ldr	r2, [pc, #68]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008d6:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<14)) { GP_FuncCallBack[14]();   EXTI->PR |= (1 << 14); }
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d008      	beq.n	80008f6 <EXTI15_10_IRQHandler+0x9a>
 80008e4:	4b0d      	ldr	r3, [pc, #52]	; (800091c <EXTI15_10_IRQHandler+0xc0>)
 80008e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008e8:	4798      	blx	r3
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008ec:	695b      	ldr	r3, [r3, #20]
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6153      	str	r3, [r2, #20]
	if(EXTI->PR & (1<<15)) { GP_FuncCallBack[15]();   EXTI->PR |= (1 << 15); }
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 80008f8:	695b      	ldr	r3, [r3, #20]
 80008fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d008      	beq.n	8000914 <EXTI15_10_IRQHandler+0xb8>
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <EXTI15_10_IRQHandler+0xc0>)
 8000904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000906:	4798      	blx	r3
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a02      	ldr	r2, [pc, #8]	; (8000918 <EXTI15_10_IRQHandler+0xbc>)
 800090e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000912:	6153      	str	r3, [r2, #20]

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40010400 	.word	0x40010400
 800091c:	20000030 	.word	0x20000030

08000920 <MCAL_GPIO_Enable_ClocK>:
 * @retval -Not
 * Note-.....
 */

void MCAL_GPIO_Enable_ClocK(GPIO_TypedDef* GPIOx)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	if(  GPIOx ==  GPIOA)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a17      	ldr	r2, [pc, #92]	; (8000988 <MCAL_GPIO_Enable_ClocK+0x68>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d106      	bne.n	800093e <MCAL_GPIO_Enable_ClocK+0x1e>
	{
		GPIOA_CLOCK_ENABLE;
 8000930:	4b16      	ldr	r3, [pc, #88]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a15      	ldr	r2, [pc, #84]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
	}
	else
	{
		//DoNothing
	}
}
 800093c:	e01f      	b.n	800097e <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOB)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a13      	ldr	r2, [pc, #76]	; (8000990 <MCAL_GPIO_Enable_ClocK+0x70>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <MCAL_GPIO_Enable_ClocK+0x34>
		GPIOB_CLOCK_ENABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a10      	ldr	r2, [pc, #64]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6193      	str	r3, [r2, #24]
}
 8000952:	e014      	b.n	800097e <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOC)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <MCAL_GPIO_Enable_ClocK+0x74>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d106      	bne.n	800096a <MCAL_GPIO_Enable_ClocK+0x4a>
		GPIOC_CLOCK_ENABLE;
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6193      	str	r3, [r2, #24]
}
 8000968:	e009      	b.n	800097e <MCAL_GPIO_Enable_ClocK+0x5e>
	else if(GPIOx ==  GPIOD)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <MCAL_GPIO_Enable_ClocK+0x78>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d105      	bne.n	800097e <MCAL_GPIO_Enable_ClocK+0x5e>
		GPIOD_CLOCK_ENABLE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <MCAL_GPIO_Enable_ClocK+0x6c>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	6193      	str	r3, [r2, #24]
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40010800 	.word	0x40010800
 800098c:	40021000 	.word	0x40021000
 8000990:	40010c00 	.word	0x40010c00
 8000994:	40011000 	.word	0x40011000
 8000998:	40011400 	.word	0x40011400

0800099c <Get_Pos_CRLH>:
 * @param [in] - PinNumber >>>>>> based on @ref GPIO_PINS_Define in header of gpio
 * @retval -Suitable Pos for Config_Register [uint8_t]
 * */

uint8_t Get_Pos_CRLH(uint16_t PinNumber)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b80      	cmp	r3, #128	; 0x80
 80009aa:	d042      	beq.n	8000a32 <Get_Pos_CRLH+0x96>
 80009ac:	2b80      	cmp	r3, #128	; 0x80
 80009ae:	dc11      	bgt.n	80009d4 <Get_Pos_CRLH+0x38>
 80009b0:	2b08      	cmp	r3, #8
 80009b2:	d036      	beq.n	8000a22 <Get_Pos_CRLH+0x86>
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	dc06      	bgt.n	80009c6 <Get_Pos_CRLH+0x2a>
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d02e      	beq.n	8000a1a <Get_Pos_CRLH+0x7e>
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d02e      	beq.n	8000a1e <Get_Pos_CRLH+0x82>
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d028      	beq.n	8000a16 <Get_Pos_CRLH+0x7a>
 80009c4:	e047      	b.n	8000a56 <Get_Pos_CRLH+0xba>
 80009c6:	2b20      	cmp	r3, #32
 80009c8:	d02f      	beq.n	8000a2a <Get_Pos_CRLH+0x8e>
 80009ca:	2b40      	cmp	r3, #64	; 0x40
 80009cc:	d02f      	beq.n	8000a2e <Get_Pos_CRLH+0x92>
 80009ce:	2b10      	cmp	r3, #16
 80009d0:	d029      	beq.n	8000a26 <Get_Pos_CRLH+0x8a>
 80009d2:	e040      	b.n	8000a56 <Get_Pos_CRLH+0xba>
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d8:	d033      	beq.n	8000a42 <Get_Pos_CRLH+0xa6>
 80009da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009de:	dc09      	bgt.n	80009f4 <Get_Pos_CRLH+0x58>
 80009e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e4:	d029      	beq.n	8000a3a <Get_Pos_CRLH+0x9e>
 80009e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009ea:	d028      	beq.n	8000a3e <Get_Pos_CRLH+0xa2>
 80009ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f0:	d021      	beq.n	8000a36 <Get_Pos_CRLH+0x9a>
 80009f2:	e030      	b.n	8000a56 <Get_Pos_CRLH+0xba>
 80009f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009f8:	d027      	beq.n	8000a4a <Get_Pos_CRLH+0xae>
 80009fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009fe:	dc03      	bgt.n	8000a08 <Get_Pos_CRLH+0x6c>
 8000a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a04:	d01f      	beq.n	8000a46 <Get_Pos_CRLH+0xaa>
 8000a06:	e026      	b.n	8000a56 <Get_Pos_CRLH+0xba>
 8000a08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a0c:	d01f      	beq.n	8000a4e <Get_Pos_CRLH+0xb2>
 8000a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a12:	d01e      	beq.n	8000a52 <Get_Pos_CRLH+0xb6>
 8000a14:	e01f      	b.n	8000a56 <Get_Pos_CRLH+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	e01e      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	e01c      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 8000a1e:	2308      	movs	r3, #8
 8000a20:	e01a      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000a22:	230c      	movs	r3, #12
 8000a24:	e018      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000a26:	2310      	movs	r3, #16
 8000a28:	e016      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000a2a:	2314      	movs	r3, #20
 8000a2c:	e014      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 8000a2e:	2318      	movs	r3, #24
 8000a30:	e012      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000a32:	231c      	movs	r3, #28
 8000a34:	e010      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e00e      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_9 :
		return 4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	e00c      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	e00a      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000a42:	230c      	movs	r3, #12
 8000a44:	e008      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000a46:	2310      	movs	r3, #16
 8000a48:	e006      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000a4a:	2314      	movs	r3, #20
 8000a4c:	e004      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 8000a4e:	2318      	movs	r3, #24
 8000a50:	e002      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000a52:	231c      	movs	r3, #28
 8000a54:	e000      	b.n	8000a58 <Get_Pos_CRLH+0xbc>
		break;

	default:
		return 0;
 8000a56:	2300      	movs	r3, #0


	}

}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr

08000a62 <MCAL_GPIO_Init>:
 * Note-You must Create Instant from "GPIO_PinConfig_t" Structure,
 * Before using This func "MCAL_GPIO_Init" and pass it to @param [in] -Address of the PinConfig
 */

void MCAL_GPIO_Init(GPIO_TypedDef* GPIOx, GPIO_PinConfig_t* PinConfig )
{
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b085      	sub	sp, #20
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
 8000a6a:	6039      	str	r1, [r7, #0]

	volatile uint32_t* Reg_Config= NULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]

	Reg_Config = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ?  &(GPIOx->CRL):  &(GPIOx->CRH) ;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d801      	bhi.n	8000a7c <MCAL_GPIO_Init+0x1a>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	e001      	b.n	8000a80 <MCAL_GPIO_Init+0x1e>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	60fb      	str	r3, [r7, #12]
	*Reg_Config &= ~(0xF << Get_Pos_CRLH(PinConfig->GPIO_PinNumber) );
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff88 	bl	800099c <Get_Pos_CRLH>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	461a      	mov	r2, r3
 8000a90:	230f      	movs	r3, #15
 8000a92:	4093      	lsls	r3, r2
 8000a94:	43da      	mvns	r2, r3
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	401a      	ands	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	601a      	str	r2, [r3, #0]


	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	2b04      	cmp	r3, #4
 8000aa6:	d00b      	beq.n	8000ac0 <MCAL_GPIO_Init+0x5e>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	2b05      	cmp	r3, #5
 8000aae:	d007      	beq.n	8000ac0 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
	if(PinConfig->GPIO_Mode == GPIO_Mode_Out_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_Open_drain ||
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d003      	beq.n	8000ac0 <MCAL_GPIO_Init+0x5e>
			PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_push_pull ||  PinConfig->GPIO_Mode == GPIO_Mode_Out_AF_Open_drain )
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	2b07      	cmp	r3, #7
 8000abe:	d117      	bne.n	8000af0 <MCAL_GPIO_Init+0x8e>
	{
		*Reg_Config |= (((((PinConfig->GPIO_Mode - 4) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	3b04      	subs	r3, #4
 8000ac6:	009a      	lsls	r2, r3, #2
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	f003 040f 	and.w	r4, r3, #15
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	881b      	ldrh	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff ff60 	bl	800099c <Get_Pos_CRLH>
 8000adc:	4603      	mov	r3, r0
 8000ade:	fa04 f203 	lsl.w	r2, r4, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	431a      	orrs	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	bf00      	nop

		}

	}

}
 8000aee:	e058      	b.n	8000ba2 <MCAL_GPIO_Init+0x140>
		if(PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_up )
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	685b      	ldr	r3, [r3, #4]
 8000af4:	2b02      	cmp	r3, #2
 8000af6:	d11c      	bne.n	8000b32 <MCAL_GPIO_Init+0xd0>
			GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	8812      	ldrh	r2, [r2, #0]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	009a      	lsls	r2, r3, #2
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	f003 040f 	and.w	r4, r3, #15
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff ff3e 	bl	800099c <Get_Pos_CRLH>
 8000b20:	4603      	mov	r3, r0
 8000b22:	fa04 f203 	lsl.w	r2, r4, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	431a      	orrs	r2, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	e037      	b.n	8000ba2 <MCAL_GPIO_Init+0x140>
		else if (PinConfig->GPIO_Mode == GPIO_Mode_Inp_pull_down)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b03      	cmp	r3, #3
 8000b38:	d11e      	bne.n	8000b78 <MCAL_GPIO_Init+0x116>
			GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber) ;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	68db      	ldr	r3, [r3, #12]
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	8812      	ldrh	r2, [r2, #0]
 8000b42:	43d2      	mvns	r2, r2
 8000b44:	401a      	ands	r2, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	60da      	str	r2, [r3, #12]
			*Reg_Config |= (((((PinConfig->GPIO_Mode - 1) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	009a      	lsls	r2, r3, #2
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	4313      	orrs	r3, r2
 8000b58:	f003 040f 	and.w	r4, r3, #15
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff1b 	bl	800099c <Get_Pos_CRLH>
 8000b66:	4603      	mov	r3, r0
 8000b68:	fa04 f203 	lsl.w	r2, r4, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	431a      	orrs	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	601a      	str	r2, [r3, #0]
}
 8000b76:	e014      	b.n	8000ba2 <MCAL_GPIO_Init+0x140>
			*Reg_Config |= (((((PinConfig->GPIO_Mode) << 2) |(PinConfig->GPIO_Speed)) & (0x0F)) << Get_Pos_CRLH(PinConfig->GPIO_PinNumber));
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	009a      	lsls	r2, r3, #2
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	f003 040f 	and.w	r4, r3, #15
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff05 	bl	800099c <Get_Pos_CRLH>
 8000b92:	4603      	mov	r3, r0
 8000b94:	fa04 f203 	lsl.w	r2, r4, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	601a      	str	r2, [r3, #0]
}
 8000ba2:	bf00      	nop
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd90      	pop	{r4, r7, pc}

08000baa <MCAL_GPIO_WritePin>:
 * @param [in] - Set "Value" which is 0 or 1,
 * @retval -NOT......
 * Note-..........................................................
 */
void MCAL_GPIO_WritePin(GPIO_TypedDef* GPIOx,uint16_t PinNumber , uint8_t Value)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	807b      	strh	r3, [r7, #2]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	707b      	strb	r3, [r7, #1]

	if(Value == (uint8_t) GPIO_PIN_SET)
 8000bba:	787b      	ldrb	r3, [r7, #1]
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d103      	bne.n	8000bc8 <MCAL_GPIO_WritePin+0x1e>
	{
		//Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15), you do not need any or "|" with Atomic Bit Register BSRR
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000bc0:	887a      	ldrh	r2, [r7, #2]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	611a      	str	r2, [r3, #16]
	else
	{
		//Bits 31:16 BRy: Port x Reset bit y (y= 0 .. 15),  you do not need any or "|" with Atomic Bit Register BSRR
		GPIOx->BSRR = (uint32_t)(PinNumber << 16);
	}
}
 8000bc6:	e004      	b.n	8000bd2 <MCAL_GPIO_WritePin+0x28>
		GPIOx->BSRR = (uint32_t)(PinNumber << 16);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	041b      	lsls	r3, r3, #16
 8000bcc:	461a      	mov	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	611a      	str	r2, [r3, #16]
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <TIM_Init>:
static void (*TIM2_Callback)(void) = 0;
static void (*TIM3_Callback)(void) = 0;
static void (*TIM4_Callback)(void) = 0;

void TIM_Init(TIM_Select_t tim, TIM_Config_t* config)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
    switch(tim)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	d87c      	bhi.n	8000ce8 <TIM_Init+0x10c>
 8000bee:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <TIM_Init+0x18>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c05 	.word	0x08000c05
 8000bf8:	08000c3b 	.word	0x08000c3b
 8000bfc:	08000c7d 	.word	0x08000c7d
 8000c00:	08000cb3 	.word	0x08000cb3
    {
        case TIM1_SELECT:
            RCC_TIM1_CLK_EN();
 8000c04:	4b3b      	ldr	r3, [pc, #236]	; (8000cf4 <TIM_Init+0x118>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <TIM_Init+0x118>)
 8000c0a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c0e:	6193      	str	r3, [r2, #24]
            TIM1->PSC = config->TIM_Prescaler;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	881a      	ldrh	r2, [r3, #0]
 8000c14:	4b38      	ldr	r3, [pc, #224]	; (8000cf8 <TIM_Init+0x11c>)
 8000c16:	629a      	str	r2, [r3, #40]	; 0x28
            TIM1->ARR = config->TIM_Period;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	885a      	ldrh	r2, [r3, #2]
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <TIM_Init+0x11c>)
 8000c1e:	62da      	str	r2, [r3, #44]	; 0x2c
            /* Clear DIR bit (bit 4) for up-counting mode */
            TIM1->CR1 &= ~(1 << 4);
 8000c20:	4b35      	ldr	r3, [pc, #212]	; (8000cf8 <TIM_Init+0x11c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a34      	ldr	r2, [pc, #208]	; (8000cf8 <TIM_Init+0x11c>)
 8000c26:	f023 0310 	bic.w	r3, r3, #16
 8000c2a:	6013      	str	r3, [r2, #0]
            /* Generate an update event to load the prescaler value immediately */
            TIM1->EGR |= 1;
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <TIM_Init+0x11c>)
 8000c2e:	695b      	ldr	r3, [r3, #20]
 8000c30:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <TIM_Init+0x11c>)
 8000c32:	f043 0301 	orr.w	r3, r3, #1
 8000c36:	6153      	str	r3, [r2, #20]
            break;
 8000c38:	e056      	b.n	8000ce8 <TIM_Init+0x10c>

        case TIM2_SELECT:
            RCC_TIM2_CLK_EN();
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <TIM_Init+0x118>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <TIM_Init+0x118>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	61d3      	str	r3, [r2, #28]
            TIM2->PSC = config->TIM_Prescaler;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	881a      	ldrh	r2, [r3, #0]
 8000c4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
            TIM2->ARR = config->TIM_Period;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	885a      	ldrh	r2, [r3, #2]
 8000c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c58:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM2->CR1 &= ~(1 << 4);
 8000c5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	f023 0310 	bic.w	r3, r3, #16
 8000c68:	6013      	str	r3, [r2, #0]
            TIM2->EGR |= 1;
 8000c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6153      	str	r3, [r2, #20]
            break;
 8000c7a:	e035      	b.n	8000ce8 <TIM_Init+0x10c>

        case TIM3_SELECT:
            RCC_TIM3_CLK_EN();
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <TIM_Init+0x118>)
 8000c7e:	69db      	ldr	r3, [r3, #28]
 8000c80:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <TIM_Init+0x118>)
 8000c82:	f043 0302 	orr.w	r3, r3, #2
 8000c86:	61d3      	str	r3, [r2, #28]
            TIM3->PSC = config->TIM_Prescaler;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <TIM_Init+0x120>)
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
            TIM3->ARR = config->TIM_Period;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	885a      	ldrh	r2, [r3, #2]
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <TIM_Init+0x120>)
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM3->CR1 &= ~(1 << 4);
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <TIM_Init+0x120>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <TIM_Init+0x120>)
 8000c9e:	f023 0310 	bic.w	r3, r3, #16
 8000ca2:	6013      	str	r3, [r2, #0]
            TIM3->EGR |= 1;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <TIM_Init+0x120>)
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <TIM_Init+0x120>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6153      	str	r3, [r2, #20]
            break;
 8000cb0:	e01a      	b.n	8000ce8 <TIM_Init+0x10c>

        case TIM4_SELECT:
            RCC_TIM4_CLK_EN();
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <TIM_Init+0x118>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0f      	ldr	r2, [pc, #60]	; (8000cf4 <TIM_Init+0x118>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	61d3      	str	r3, [r2, #28]
            TIM4->PSC = config->TIM_Prescaler;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	881a      	ldrh	r2, [r3, #0]
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <TIM_Init+0x124>)
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
            TIM4->ARR = config->TIM_Period;
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	885a      	ldrh	r2, [r3, #2]
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <TIM_Init+0x124>)
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
            TIM4->CR1 &= ~(1 << 4);
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <TIM_Init+0x124>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <TIM_Init+0x124>)
 8000cd4:	f023 0310 	bic.w	r3, r3, #16
 8000cd8:	6013      	str	r3, [r2, #0]
            TIM4->EGR |= 1;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <TIM_Init+0x124>)
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	4a08      	ldr	r2, [pc, #32]	; (8000d00 <TIM_Init+0x124>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6153      	str	r3, [r2, #20]
            break;
 8000ce6:	bf00      	nop
    }
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bc80      	pop	{r7}
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40012c00 	.word	0x40012c00
 8000cfc:	40000400 	.word	0x40000400
 8000d00:	40000800 	.word	0x40000800

08000d04 <TIM_Start>:

void TIM_Start(TIM_Select_t tim)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
    switch(tim)
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	d829      	bhi.n	8000d68 <TIM_Start+0x64>
 8000d14:	a201      	add	r2, pc, #4	; (adr r2, 8000d1c <TIM_Start+0x18>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000d2d 	.word	0x08000d2d
 8000d20:	08000d3b 	.word	0x08000d3b
 8000d24:	08000d4d 	.word	0x08000d4d
 8000d28:	08000d5b 	.word	0x08000d5b
    {
        case TIM1_SELECT:
            TIM1->CR1 |= 1;  // Set CEN bit to start timer
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <TIM_Start+0x70>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a10      	ldr	r2, [pc, #64]	; (8000d74 <TIM_Start+0x70>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	6013      	str	r3, [r2, #0]
            break;
 8000d38:	e016      	b.n	8000d68 <TIM_Start+0x64>
        case TIM2_SELECT:
            TIM2->CR1 |= 1;
 8000d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6013      	str	r3, [r2, #0]
            break;
 8000d4a:	e00d      	b.n	8000d68 <TIM_Start+0x64>
        case TIM3_SELECT:
            TIM3->CR1 |= 1;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <TIM_Start+0x74>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a09      	ldr	r2, [pc, #36]	; (8000d78 <TIM_Start+0x74>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6013      	str	r3, [r2, #0]
            break;
 8000d58:	e006      	b.n	8000d68 <TIM_Start+0x64>
        case TIM4_SELECT:
            TIM4->CR1 |= 1;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <TIM_Start+0x78>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <TIM_Start+0x78>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6013      	str	r3, [r2, #0]
            break;
 8000d66:	bf00      	nop
    }
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40012c00 	.word	0x40012c00
 8000d78:	40000400 	.word	0x40000400
 8000d7c:	40000800 	.word	0x40000800

08000d80 <TIM_Stop>:

void TIM_Stop(TIM_Select_t tim)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
    switch(tim)
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	d829      	bhi.n	8000de4 <TIM_Stop+0x64>
 8000d90:	a201      	add	r2, pc, #4	; (adr r2, 8000d98 <TIM_Stop+0x18>)
 8000d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d96:	bf00      	nop
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000db7 	.word	0x08000db7
 8000da0:	08000dc9 	.word	0x08000dc9
 8000da4:	08000dd7 	.word	0x08000dd7
    {
        case TIM1_SELECT:
            TIM1->CR1 &= ~1;  // Clear CEN bit to stop timer
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <TIM_Stop+0x70>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <TIM_Stop+0x70>)
 8000dae:	f023 0301 	bic.w	r3, r3, #1
 8000db2:	6013      	str	r3, [r2, #0]
            break;
 8000db4:	e016      	b.n	8000de4 <TIM_Stop+0x64>
        case TIM2_SELECT:
            TIM2->CR1 &= ~1;
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc0:	f023 0301 	bic.w	r3, r3, #1
 8000dc4:	6013      	str	r3, [r2, #0]
            break;
 8000dc6:	e00d      	b.n	8000de4 <TIM_Stop+0x64>
        case TIM3_SELECT:
            TIM3->CR1 &= ~1;
 8000dc8:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <TIM_Stop+0x74>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <TIM_Stop+0x74>)
 8000dce:	f023 0301 	bic.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]
            break;
 8000dd4:	e006      	b.n	8000de4 <TIM_Stop+0x64>
        case TIM4_SELECT:
            TIM4->CR1 &= ~1;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <TIM_Stop+0x78>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <TIM_Stop+0x78>)
 8000ddc:	f023 0301 	bic.w	r3, r3, #1
 8000de0:	6013      	str	r3, [r2, #0]
            break;
 8000de2:	bf00      	nop
    }
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40000400 	.word	0x40000400
 8000df8:	40000800 	.word	0x40000800

08000dfc <TIM1_UP_IRQHandler>:
 * Below are the interrupt handler functions.
 * Make sure these handlers are correctly linked in your startup code.
 */

void TIM1_UP_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    /* Check update interrupt flag */
    if (TIM1->SR & 1)
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <TIM1_UP_IRQHandler+0x30>)
 8000e02:	691b      	ldr	r3, [r3, #16]
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00c      	beq.n	8000e26 <TIM1_UP_IRQHandler+0x2a>
    {
        TIM1->SR &= ~1;  // Clear the update flag
 8000e0c:	4b07      	ldr	r3, [pc, #28]	; (8000e2c <TIM1_UP_IRQHandler+0x30>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	4a06      	ldr	r2, [pc, #24]	; (8000e2c <TIM1_UP_IRQHandler+0x30>)
 8000e12:	f023 0301 	bic.w	r3, r3, #1
 8000e16:	6113      	str	r3, [r2, #16]
        if (TIM1_Callback)
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <TIM1_UP_IRQHandler+0x34>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <TIM1_UP_IRQHandler+0x2a>
        {
            TIM1_Callback();
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <TIM1_UP_IRQHandler+0x34>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4798      	blx	r3
        }
    }
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40012c00 	.word	0x40012c00
 8000e30:	2000001c 	.word	0x2000001c

08000e34 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    if (TIM2->SR & 1)
 8000e38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00e      	beq.n	8000e64 <TIM2_IRQHandler+0x30>
    {
        TIM2->SR &= ~1;
 8000e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e50:	f023 0301 	bic.w	r3, r3, #1
 8000e54:	6113      	str	r3, [r2, #16]
        if (TIM2_Callback)
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <TIM2_IRQHandler+0x34>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <TIM2_IRQHandler+0x30>
        {
            TIM2_Callback();
 8000e5e:	4b02      	ldr	r3, [pc, #8]	; (8000e68 <TIM2_IRQHandler+0x34>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4798      	blx	r3
        }
    }
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000020 	.word	0x20000020

08000e6c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    if (TIM3->SR & 1)
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <TIM3_IRQHandler+0x30>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00c      	beq.n	8000e96 <TIM3_IRQHandler+0x2a>
    {
        TIM3->SR &= ~1;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <TIM3_IRQHandler+0x30>)
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <TIM3_IRQHandler+0x30>)
 8000e82:	f023 0301 	bic.w	r3, r3, #1
 8000e86:	6113      	str	r3, [r2, #16]
        if (TIM3_Callback)
 8000e88:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <TIM3_IRQHandler+0x34>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <TIM3_IRQHandler+0x2a>
        {
            TIM3_Callback();
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <TIM3_IRQHandler+0x34>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4798      	blx	r3
        }
    }
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000400 	.word	0x40000400
 8000ea0:	20000024 	.word	0x20000024

08000ea4 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
    if (TIM4->SR & 1)
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <TIM4_IRQHandler+0x30>)
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d00c      	beq.n	8000ece <TIM4_IRQHandler+0x2a>
    {
        TIM4->SR &= ~1;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <TIM4_IRQHandler+0x30>)
 8000eb6:	691b      	ldr	r3, [r3, #16]
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <TIM4_IRQHandler+0x30>)
 8000eba:	f023 0301 	bic.w	r3, r3, #1
 8000ebe:	6113      	str	r3, [r2, #16]
        if (TIM4_Callback)
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <TIM4_IRQHandler+0x34>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d002      	beq.n	8000ece <TIM4_IRQHandler+0x2a>
        {
            TIM4_Callback();
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <TIM4_IRQHandler+0x34>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4798      	blx	r3
        }
    }
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40000800 	.word	0x40000800
 8000ed8:	20000028 	.word	0x20000028

08000edc <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0

	Global_config->P_IRQ_Callback () ;
 8000ee0:	4b02      	ldr	r3, [pc, #8]	; (8000eec <USART1_IRQHandler+0x10>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	691b      	ldr	r3, [r3, #16]
 8000ee6:	4798      	blx	r3

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	2000002c 	.word	0x2000002c

08000ef0 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <USART2_IRQHandler+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	691b      	ldr	r3, [r3, #16]
 8000efa:	4798      	blx	r3

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000002c 	.word	0x2000002c

08000f04 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 8000f08:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <USART3_IRQHandler+0x10>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	4798      	blx	r3


}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000002c 	.word	0x2000002c

08000f18 <__libc_init_array>:
 8000f18:	b570      	push	{r4, r5, r6, lr}
 8000f1a:	2500      	movs	r5, #0
 8000f1c:	4e0c      	ldr	r6, [pc, #48]	; (8000f50 <__libc_init_array+0x38>)
 8000f1e:	4c0d      	ldr	r4, [pc, #52]	; (8000f54 <__libc_init_array+0x3c>)
 8000f20:	1ba4      	subs	r4, r4, r6
 8000f22:	10a4      	asrs	r4, r4, #2
 8000f24:	42a5      	cmp	r5, r4
 8000f26:	d109      	bne.n	8000f3c <__libc_init_array+0x24>
 8000f28:	f000 f826 	bl	8000f78 <_init>
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	4e0a      	ldr	r6, [pc, #40]	; (8000f58 <__libc_init_array+0x40>)
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <__libc_init_array+0x44>)
 8000f32:	1ba4      	subs	r4, r4, r6
 8000f34:	10a4      	asrs	r4, r4, #2
 8000f36:	42a5      	cmp	r5, r4
 8000f38:	d105      	bne.n	8000f46 <__libc_init_array+0x2e>
 8000f3a:	bd70      	pop	{r4, r5, r6, pc}
 8000f3c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f40:	4798      	blx	r3
 8000f42:	3501      	adds	r5, #1
 8000f44:	e7ee      	b.n	8000f24 <__libc_init_array+0xc>
 8000f46:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f4a:	4798      	blx	r3
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	e7f2      	b.n	8000f36 <__libc_init_array+0x1e>
 8000f50:	08000fe0 	.word	0x08000fe0
 8000f54:	08000fe0 	.word	0x08000fe0
 8000f58:	08000fe0 	.word	0x08000fe0
 8000f5c:	08000fe4 	.word	0x08000fe4

08000f60 <memcpy>:
 8000f60:	b510      	push	{r4, lr}
 8000f62:	1e43      	subs	r3, r0, #1
 8000f64:	440a      	add	r2, r1
 8000f66:	4291      	cmp	r1, r2
 8000f68:	d100      	bne.n	8000f6c <memcpy+0xc>
 8000f6a:	bd10      	pop	{r4, pc}
 8000f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000f74:	e7f7      	b.n	8000f66 <memcpy+0x6>
	...

08000f78 <_init>:
 8000f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f7a:	bf00      	nop
 8000f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f7e:	bc08      	pop	{r3}
 8000f80:	469e      	mov	lr, r3
 8000f82:	4770      	bx	lr

08000f84 <_fini>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr
