
B_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080025f0  080025f0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080025f0  080025f0  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  080025f0  080025f0  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025f0  080025f0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025f0  080025f0  000125f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080025f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000028  08002620  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002620  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000061d2  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001011  00000000  00000000  00026223  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000340  00000000  00000000  00027238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000002b8  00000000  00000000  00027578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003d65  00000000  00000000  00027830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004204  00000000  00000000  0002b595  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ca2d  00000000  00000000  0002f799  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003c1c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af8  00000000  00000000  0003c244  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000028 	.word	0x20000028
 800014c:	00000000 	.word	0x00000000
 8000150:	080025d8 	.word	0x080025d8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000002c 	.word	0x2000002c
 800016c:	080025d8 	.word	0x080025d8

08000170 <Motors_Init>:
#define IN2  pin5  // PA2 - IN2
#define IN3  pin6  // PA3 - IN3
#define IN4  pin7  // PA4 - IN4

// Initialize motor control pins
void Motors_Init(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
    GPIOA_CLOCK_ENABLE;
 8000174:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <Motors_Init+0x48>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0f      	ldr	r2, [pc, #60]	; (80001b8 <Motors_Init+0x48>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
    MCAL_speed_init(CLK_SORC_IN_CLK8MHz, mood_FAST_MOOD_36MHzCORE);
 8000180:	2100      	movs	r1, #0
 8000182:	2000      	movs	r0, #0
 8000184:	f001 fae0 	bl	8001748 <MCAL_speed_init>
    pinmode(GPIOA, IN1, GPIO_MODE_OUTPUT_push_pull_Speed50);
 8000188:	2203      	movs	r2, #3
 800018a:	2104      	movs	r1, #4
 800018c:	480b      	ldr	r0, [pc, #44]	; (80001bc <Motors_Init+0x4c>)
 800018e:	f000 fc45 	bl	8000a1c <pinmode>
    pinmode(GPIOA, IN2, GPIO_MODE_OUTPUT_push_pull_Speed50);
 8000192:	2203      	movs	r2, #3
 8000194:	2105      	movs	r1, #5
 8000196:	4809      	ldr	r0, [pc, #36]	; (80001bc <Motors_Init+0x4c>)
 8000198:	f000 fc40 	bl	8000a1c <pinmode>
    pinmode(GPIOA, IN3, GPIO_MODE_OUTPUT_push_pull_Speed50);
 800019c:	2203      	movs	r2, #3
 800019e:	2106      	movs	r1, #6
 80001a0:	4806      	ldr	r0, [pc, #24]	; (80001bc <Motors_Init+0x4c>)
 80001a2:	f000 fc3b 	bl	8000a1c <pinmode>
    pinmode(GPIOA, IN4, GPIO_MODE_OUTPUT_push_pull_Speed50);
 80001a6:	2203      	movs	r2, #3
 80001a8:	2107      	movs	r1, #7
 80001aa:	4804      	ldr	r0, [pc, #16]	; (80001bc <Motors_Init+0x4c>)
 80001ac:	f000 fc36 	bl	8000a1c <pinmode>


    Motors_Stop();
 80001b0:	f000 f872 	bl	8000298 <Motors_Stop>
}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800

080001c0 <Set_Speed>:
void Set_Speed(uint32_t speed){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	6078      	str	r0, [r7, #4]
    PWM(TIM1, CH_1, speed, 3500, clk);
 80001c8:	4b0a      	ldr	r3, [pc, #40]	; (80001f4 <Set_Speed+0x34>)
 80001ca:	9300      	str	r3, [sp, #0]
 80001cc:	f640 53ac 	movw	r3, #3500	; 0xdac
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	2101      	movs	r1, #1
 80001d4:	4808      	ldr	r0, [pc, #32]	; (80001f8 <Set_Speed+0x38>)
 80001d6:	f001 fb43 	bl	8001860 <PWM>
    PWM(TIM1, CH_3, speed, 3500, clk);
 80001da:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <Set_Speed+0x34>)
 80001dc:	9300      	str	r3, [sp, #0]
 80001de:	f640 53ac 	movw	r3, #3500	; 0xdac
 80001e2:	687a      	ldr	r2, [r7, #4]
 80001e4:	2103      	movs	r1, #3
 80001e6:	4804      	ldr	r0, [pc, #16]	; (80001f8 <Set_Speed+0x38>)
 80001e8:	f001 fb3a 	bl	8001860 <PWM>
}
 80001ec:	bf00      	nop
 80001ee:	3708      	adds	r7, #8
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	02255100 	.word	0x02255100
 80001f8:	40012c00 	.word	0x40012c00

080001fc <Move_Forward>:

// Move forward (both motors forward)
void Move_Forward(void) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
    // Right motor forward (IN1=1, IN2=0)
    pinwrite(GPIOA, IN1, HIGH);
 8000200:	2201      	movs	r2, #1
 8000202:	2104      	movs	r1, #4
 8000204:	4809      	ldr	r0, [pc, #36]	; (800022c <Move_Forward+0x30>)
 8000206:	f000 fceb 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN2, LOW);
 800020a:	2200      	movs	r2, #0
 800020c:	2105      	movs	r1, #5
 800020e:	4807      	ldr	r0, [pc, #28]	; (800022c <Move_Forward+0x30>)
 8000210:	f000 fce6 	bl	8000be0 <pinwrite>

    // Left motor forward (IN3=1, IN4=0)
    pinwrite(GPIOA, IN3, HIGH);
 8000214:	2201      	movs	r2, #1
 8000216:	2106      	movs	r1, #6
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <Move_Forward+0x30>)
 800021a:	f000 fce1 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN4, LOW);
 800021e:	2200      	movs	r2, #0
 8000220:	2107      	movs	r1, #7
 8000222:	4802      	ldr	r0, [pc, #8]	; (800022c <Move_Forward+0x30>)
 8000224:	f000 fcdc 	bl	8000be0 <pinwrite>
}
 8000228:	bf00      	nop
 800022a:	bd80      	pop	{r7, pc}
 800022c:	40010800 	.word	0x40010800

08000230 <Move_Right>:
    pinwrite(GPIOA, IN3, LOW);
    pinwrite(GPIOA, IN4, HIGH);
}

// Turn left (right motor forward, left motor backward)
void Move_Right(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
    // Right motor forward (IN1=1, IN2=0)
    pinwrite(GPIOA, IN1, HIGH);
 8000234:	2201      	movs	r2, #1
 8000236:	2104      	movs	r1, #4
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <Move_Right+0x30>)
 800023a:	f000 fcd1 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN2, LOW);
 800023e:	2200      	movs	r2, #0
 8000240:	2105      	movs	r1, #5
 8000242:	4807      	ldr	r0, [pc, #28]	; (8000260 <Move_Right+0x30>)
 8000244:	f000 fccc 	bl	8000be0 <pinwrite>

    // Left motor backward (IN3=0, IN4=1)
    pinwrite(GPIOA, IN3, LOW);
 8000248:	2200      	movs	r2, #0
 800024a:	2106      	movs	r1, #6
 800024c:	4804      	ldr	r0, [pc, #16]	; (8000260 <Move_Right+0x30>)
 800024e:	f000 fcc7 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN4, HIGH);
 8000252:	2201      	movs	r2, #1
 8000254:	2107      	movs	r1, #7
 8000256:	4802      	ldr	r0, [pc, #8]	; (8000260 <Move_Right+0x30>)
 8000258:	f000 fcc2 	bl	8000be0 <pinwrite>

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	40010800 	.word	0x40010800

08000264 <Move_Left>:

// Turn right (left motor forward, right motor backward)
// note that you reverse connection at IN3,4 is right motor and In1,2 left motor
void Move_Left(void) {
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
    // Left motor forward (IN1=1, IN2=0)
    pinwrite(GPIOA, IN1, LOW);
 8000268:	2200      	movs	r2, #0
 800026a:	2104      	movs	r1, #4
 800026c:	4809      	ldr	r0, [pc, #36]	; (8000294 <Move_Left+0x30>)
 800026e:	f000 fcb7 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN2, HIGH);
 8000272:	2201      	movs	r2, #1
 8000274:	2105      	movs	r1, #5
 8000276:	4807      	ldr	r0, [pc, #28]	; (8000294 <Move_Left+0x30>)
 8000278:	f000 fcb2 	bl	8000be0 <pinwrite>

    // Right motor backward (IN1=3, IN2=4)
    pinwrite(GPIOA, IN3, HIGH);
 800027c:	2201      	movs	r2, #1
 800027e:	2106      	movs	r1, #6
 8000280:	4804      	ldr	r0, [pc, #16]	; (8000294 <Move_Left+0x30>)
 8000282:	f000 fcad 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN4, LOW);
 8000286:	2200      	movs	r2, #0
 8000288:	2107      	movs	r1, #7
 800028a:	4802      	ldr	r0, [pc, #8]	; (8000294 <Move_Left+0x30>)
 800028c:	f000 fca8 	bl	8000be0 <pinwrite>

}
 8000290:	bf00      	nop
 8000292:	bd80      	pop	{r7, pc}
 8000294:	40010800 	.word	0x40010800

08000298 <Motors_Stop>:

// Stop all motors
void Motors_Stop(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    // Right motor stop (IN1=0, IN2=0)
    pinwrite(GPIOA, IN1, LOW);
 800029c:	2200      	movs	r2, #0
 800029e:	2104      	movs	r1, #4
 80002a0:	4809      	ldr	r0, [pc, #36]	; (80002c8 <Motors_Stop+0x30>)
 80002a2:	f000 fc9d 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN2, LOW);
 80002a6:	2200      	movs	r2, #0
 80002a8:	2105      	movs	r1, #5
 80002aa:	4807      	ldr	r0, [pc, #28]	; (80002c8 <Motors_Stop+0x30>)
 80002ac:	f000 fc98 	bl	8000be0 <pinwrite>

    // Left motor stop (IN3=0, IN4=0)
    pinwrite(GPIOA, IN3, LOW);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2106      	movs	r1, #6
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <Motors_Stop+0x30>)
 80002b6:	f000 fc93 	bl	8000be0 <pinwrite>
    pinwrite(GPIOA, IN4, LOW);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2107      	movs	r1, #7
 80002be:	4802      	ldr	r0, [pc, #8]	; (80002c8 <Motors_Stop+0x30>)
 80002c0:	f000 fc8e 	bl	8000be0 <pinwrite>

}
 80002c4:	bf00      	nop
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40010800 	.word	0x40010800

080002cc <speed_increment>:



void speed_increment(uint32_t *current_speed, uint32_t V2_speed, uint32_t distance) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	60f8      	str	r0, [r7, #12]
 80002d4:	60b9      	str	r1, [r7, #8]
 80002d6:	607a      	str	r2, [r7, #4]
    if (distance > action_distance+5) {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b2d      	cmp	r3, #45	; 0x2d
 80002dc:	d940      	bls.n	8000360 <speed_increment+0x94>
       if(V2_speed == max_speed){
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002e4:	d103      	bne.n	80002ee <speed_increment+0x22>
    	   *current_speed = V2_speed;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	68ba      	ldr	r2, [r7, #8]
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	e033      	b.n	8000356 <speed_increment+0x8a>
       }
       else if(V2_speed < max_speed){
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002f4:	d22f      	bcs.n	8000356 <speed_increment+0x8a>
    	   if(distance - action_distance > 15){
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	3b28      	subs	r3, #40	; 0x28
 80002fa:	2b0f      	cmp	r3, #15
 80002fc:	d911      	bls.n	8000322 <speed_increment+0x56>
    		   if(V2_speed<=700) *current_speed = V2_speed + 200;
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000304:	d805      	bhi.n	8000312 <speed_increment+0x46>
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	e007      	b.n	8000322 <speed_increment+0x56>
    		   else if (V2_speed > 700) *current_speed = max_speed;
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000318:	d903      	bls.n	8000322 <speed_increment+0x56>
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000320:	601a      	str	r2, [r3, #0]

    	   }
    	   if(distance-action_distance <= 15 && distance-action_distance > 5){
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3b28      	subs	r3, #40	; 0x28
 8000326:	2b0f      	cmp	r3, #15
 8000328:	d815      	bhi.n	8000356 <speed_increment+0x8a>
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	3b28      	subs	r3, #40	; 0x28
 800032e:	2b05      	cmp	r3, #5
 8000330:	d911      	bls.n	8000356 <speed_increment+0x8a>
    		   if(V2_speed<=700) *current_speed = V2_speed + 100;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8000338:	d805      	bhi.n	8000346 <speed_increment+0x7a>
 800033a:	68bb      	ldr	r3, [r7, #8]
 800033c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	e007      	b.n	8000356 <speed_increment+0x8a>
    		    else if (V2_speed > 700) *current_speed = max_speed;
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800034c:	d903      	bls.n	8000356 <speed_increment+0x8a>
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000354:	601a      	str	r2, [r3, #0]

    	   }

       }
       // Update PWM with new speed
       Set_Speed(*current_speed);
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ff30 	bl	80001c0 <Set_Speed>
    }


}
 8000360:	bf00      	nop
 8000362:	3710      	adds	r7, #16
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <speed_decrement>:

void speed_decrement(uint32_t *current_speed, uint32_t V2_speed, uint32_t distance) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
  if(distance <= action_distance && distance >= min_distance )
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b28      	cmp	r3, #40	; 0x28
 8000378:	d80c      	bhi.n	8000394 <speed_decrement+0x2c>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	2b09      	cmp	r3, #9
 800037e:	d909      	bls.n	8000394 <speed_decrement+0x2c>
  {
	  *current_speed = V2_speed-100;
 8000380:	68bb      	ldr	r3, [r7, #8]
 8000382:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	601a      	str	r2, [r3, #0]
	  if(*current_speed < 0 )*current_speed = V2_speed;
      // Update PWM with new speed
      Set_Speed(*current_speed);
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff ff16 	bl	80001c0 <Set_Speed>
  }


}
 8000394:	bf00      	nop
 8000396:	3710      	adds	r7, #16
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}

0800039c <Turn_left>:
	      // Update PWM with new speed
	      Set_Speed(*current_speed);
	  }

}
void Turn_left(uint32_t current_speed ,uint32_t Left_distance, uint32_t Right_distance){
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	if(Right_distance <= turn_distance && Left_distance > turn_distance + 5 ){
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b0a      	cmp	r3, #10
 80003ac:	d83d      	bhi.n	800042a <Turn_left+0x8e>
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	2b0f      	cmp	r3, #15
 80003b2:	d93a      	bls.n	800042a <Turn_left+0x8e>
		if (current_speed <= max_speed && current_speed>= 800) {
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80003ba:	d80c      	bhi.n	80003d6 <Turn_left+0x3a>
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003c2:	d308      	bcc.n	80003d6 <Turn_left+0x3a>
			Move_Left();
 80003c4:	f7ff ff4e 	bl	8000264 <Move_Left>
			delay(1000, U_ms, clk);
 80003c8:	4a1b      	ldr	r2, [pc, #108]	; (8000438 <Turn_left+0x9c>)
 80003ca:	2100      	movs	r1, #0
 80003cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003d0:	f001 fdd4 	bl	8001f7c <delay>
 80003d4:	e029      	b.n	800042a <Turn_left+0x8e>
		}
		else if (current_speed < 800 && current_speed>= 600) {
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80003dc:	d20c      	bcs.n	80003f8 <Turn_left+0x5c>
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80003e4:	d308      	bcc.n	80003f8 <Turn_left+0x5c>
					Move_Left();
 80003e6:	f7ff ff3d 	bl	8000264 <Move_Left>
					delay(2000, U_ms, clk);
 80003ea:	4a13      	ldr	r2, [pc, #76]	; (8000438 <Turn_left+0x9c>)
 80003ec:	2100      	movs	r1, #0
 80003ee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003f2:	f001 fdc3 	bl	8001f7c <delay>
 80003f6:	e018      	b.n	800042a <Turn_left+0x8e>
				}
		else if (current_speed <600 && current_speed >= 500) {
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80003fe:	d20c      	bcs.n	800041a <Turn_left+0x7e>
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000406:	d308      	bcc.n	800041a <Turn_left+0x7e>
							Move_Left();
 8000408:	f7ff ff2c 	bl	8000264 <Move_Left>
							delay(3000, U_ms, clk);
 800040c:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <Turn_left+0x9c>)
 800040e:	2100      	movs	r1, #0
 8000410:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000414:	f001 fdb2 	bl	8001f7c <delay>
 8000418:	e007      	b.n	800042a <Turn_left+0x8e>
						}
		else {
			Move_Left();
 800041a:	f7ff ff23 	bl	8000264 <Move_Left>
			delay(3500, U_ms, clk);
 800041e:	4a06      	ldr	r2, [pc, #24]	; (8000438 <Turn_left+0x9c>)
 8000420:	2100      	movs	r1, #0
 8000422:	f640 50ac 	movw	r0, #3500	; 0xdac
 8000426:	f001 fda9 	bl	8001f7c <delay>
		}

	}
	Move_Forward();
 800042a:	f7ff fee7 	bl	80001fc <Move_Forward>

}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	02255100 	.word	0x02255100

0800043c <Turn_right>:
void Turn_right(uint32_t current_speed  , uint32_t Left_distance , uint32_t Right_distance){
 800043c:	b580      	push	{r7, lr}
 800043e:	b084      	sub	sp, #16
 8000440:	af00      	add	r7, sp, #0
 8000442:	60f8      	str	r0, [r7, #12]
 8000444:	60b9      	str	r1, [r7, #8]
 8000446:	607a      	str	r2, [r7, #4]
	if(Left_distance <= turn_distance && Right_distance > turn_distance + 5 ){
 8000448:	68bb      	ldr	r3, [r7, #8]
 800044a:	2b0a      	cmp	r3, #10
 800044c:	d83d      	bhi.n	80004ca <Turn_right+0x8e>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2b0f      	cmp	r3, #15
 8000452:	d93a      	bls.n	80004ca <Turn_right+0x8e>
			if (current_speed <= max_speed && current_speed>= 800) {
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800045a:	d80c      	bhi.n	8000476 <Turn_right+0x3a>
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8000462:	d308      	bcc.n	8000476 <Turn_right+0x3a>
				Move_Right();
 8000464:	f7ff fee4 	bl	8000230 <Move_Right>
				delay(500, U_ms, clk);
 8000468:	4a1b      	ldr	r2, [pc, #108]	; (80004d8 <Turn_right+0x9c>)
 800046a:	2100      	movs	r1, #0
 800046c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000470:	f001 fd84 	bl	8001f7c <delay>
 8000474:	e029      	b.n	80004ca <Turn_right+0x8e>
			}
			else if (current_speed < 800 && current_speed>= 600) {
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800047c:	d20c      	bcs.n	8000498 <Turn_right+0x5c>
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000484:	d308      	bcc.n	8000498 <Turn_right+0x5c>
						Move_Right();
 8000486:	f7ff fed3 	bl	8000230 <Move_Right>
						delay(1000, U_ms, clk);
 800048a:	4a13      	ldr	r2, [pc, #76]	; (80004d8 <Turn_right+0x9c>)
 800048c:	2100      	movs	r1, #0
 800048e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000492:	f001 fd73 	bl	8001f7c <delay>
 8000496:	e018      	b.n	80004ca <Turn_right+0x8e>
					}
			else if (current_speed <600 && current_speed >= 500) {
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800049e:	d20c      	bcs.n	80004ba <Turn_right+0x7e>
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80004a6:	d308      	bcc.n	80004ba <Turn_right+0x7e>
								Move_Right();
 80004a8:	f7ff fec2 	bl	8000230 <Move_Right>
								delay(1500, U_ms, clk);
 80004ac:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <Turn_right+0x9c>)
 80004ae:	2100      	movs	r1, #0
 80004b0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80004b4:	f001 fd62 	bl	8001f7c <delay>
 80004b8:	e007      	b.n	80004ca <Turn_right+0x8e>
							}
			else {
				Move_Right();
 80004ba:	f7ff feb9 	bl	8000230 <Move_Right>
				delay(2500, U_ms, clk);
 80004be:	4a06      	ldr	r2, [pc, #24]	; (80004d8 <Turn_right+0x9c>)
 80004c0:	2100      	movs	r1, #0
 80004c2:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80004c6:	f001 fd59 	bl	8001f7c <delay>
			}

		}
		Move_Forward();
 80004ca:	f7ff fe97 	bl	80001fc <Move_Forward>
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	02255100 	.word	0x02255100

080004dc <Front_EchoISR>:
volatile uint8_t  Right_echo_received = 0;

static volatile uint8_t current_sensor = SENSOR_FRONT;

// Interrupt handlers
static void Front_EchoISR(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
    if (READ_PIN(FRONT_ECHO_PORT, FRONT_ECHO_PIN) == HIGH) {
 80004e0:	2101      	movs	r1, #1
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <Front_EchoISR+0x3c>)
 80004e4:	f000 fba0 	bl	8000c28 <READ_PIN>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b01      	cmp	r3, #1
 80004ec:	d107      	bne.n	80004fe <Front_EchoISR+0x22>
        Front_echo_start_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_START);
 80004ee:	2101      	movs	r1, #1
 80004f0:	480a      	ldr	r0, [pc, #40]	; (800051c <Front_EchoISR+0x40>)
 80004f2:	f001 fdf5 	bl	80020e0 <TIME_CALCULATION>
 80004f6:	4602      	mov	r2, r0
 80004f8:	4b09      	ldr	r3, [pc, #36]	; (8000520 <Front_EchoISR+0x44>)
 80004fa:	601a      	str	r2, [r3, #0]
    } else {
        Front_echo_end_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP);
        Front_echo_received = 1;
    }
}
 80004fc:	e009      	b.n	8000512 <Front_EchoISR+0x36>
        Front_echo_end_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP);
 80004fe:	2100      	movs	r1, #0
 8000500:	4806      	ldr	r0, [pc, #24]	; (800051c <Front_EchoISR+0x40>)
 8000502:	f001 fded 	bl	80020e0 <TIME_CALCULATION>
 8000506:	4602      	mov	r2, r0
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <Front_EchoISR+0x48>)
 800050a:	601a      	str	r2, [r3, #0]
        Front_echo_received = 1;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <Front_EchoISR+0x4c>)
 800050e:	2201      	movs	r2, #1
 8000510:	701a      	strb	r2, [r3, #0]
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40010800 	.word	0x40010800
 800051c:	007a1200 	.word	0x007a1200
 8000520:	20000044 	.word	0x20000044
 8000524:	20000048 	.word	0x20000048
 8000528:	2000004c 	.word	0x2000004c

0800052c <Left_EchoISR>:

static void Left_EchoISR(void) {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
	if (READ_PIN(FRONT_ECHO_PORT, FRONT_ECHO_PIN) == HIGH) {
 8000530:	2101      	movs	r1, #1
 8000532:	480d      	ldr	r0, [pc, #52]	; (8000568 <Left_EchoISR+0x3c>)
 8000534:	f000 fb78 	bl	8000c28 <READ_PIN>
 8000538:	4603      	mov	r3, r0
 800053a:	2b01      	cmp	r3, #1
 800053c:	d107      	bne.n	800054e <Left_EchoISR+0x22>
	        Left_echo_start_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_START);
 800053e:	2101      	movs	r1, #1
 8000540:	480a      	ldr	r0, [pc, #40]	; (800056c <Left_EchoISR+0x40>)
 8000542:	f001 fdcd 	bl	80020e0 <TIME_CALCULATION>
 8000546:	4602      	mov	r2, r0
 8000548:	4b09      	ldr	r3, [pc, #36]	; (8000570 <Left_EchoISR+0x44>)
 800054a:	601a      	str	r2, [r3, #0]
	    } else {
	        Left_echo_end_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP);
	        Left_echo_received = 1;
	    }
}
 800054c:	e009      	b.n	8000562 <Left_EchoISR+0x36>
	        Left_echo_end_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP);
 800054e:	2100      	movs	r1, #0
 8000550:	4806      	ldr	r0, [pc, #24]	; (800056c <Left_EchoISR+0x40>)
 8000552:	f001 fdc5 	bl	80020e0 <TIME_CALCULATION>
 8000556:	4602      	mov	r2, r0
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <Left_EchoISR+0x48>)
 800055a:	601a      	str	r2, [r3, #0]
	        Left_echo_received = 1;
 800055c:	4b06      	ldr	r3, [pc, #24]	; (8000578 <Left_EchoISR+0x4c>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010800 	.word	0x40010800
 800056c:	007a1200 	.word	0x007a1200
 8000570:	20000050 	.word	0x20000050
 8000574:	20000054 	.word	0x20000054
 8000578:	20000058 	.word	0x20000058

0800057c <Right_EchoISR>:

static void Right_EchoISR(void) {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	if (READ_PIN(FRONT_ECHO_PORT, FRONT_ECHO_PIN) == HIGH) {
 8000580:	2101      	movs	r1, #1
 8000582:	480d      	ldr	r0, [pc, #52]	; (80005b8 <Right_EchoISR+0x3c>)
 8000584:	f000 fb50 	bl	8000c28 <READ_PIN>
 8000588:	4603      	mov	r3, r0
 800058a:	2b01      	cmp	r3, #1
 800058c:	d107      	bne.n	800059e <Right_EchoISR+0x22>
	        Right_echo_start_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_START);
 800058e:	2101      	movs	r1, #1
 8000590:	480a      	ldr	r0, [pc, #40]	; (80005bc <Right_EchoISR+0x40>)
 8000592:	f001 fda5 	bl	80020e0 <TIME_CALCULATION>
 8000596:	4602      	mov	r2, r0
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <Right_EchoISR+0x44>)
 800059a:	601a      	str	r2, [r3, #0]
	    } else {
	        Right_echo_end_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP);
	        Right_echo_received = 1;
	    }
}
 800059c:	e009      	b.n	80005b2 <Right_EchoISR+0x36>
	        Right_echo_end_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP);
 800059e:	2100      	movs	r1, #0
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <Right_EchoISR+0x40>)
 80005a2:	f001 fd9d 	bl	80020e0 <TIME_CALCULATION>
 80005a6:	4602      	mov	r2, r0
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <Right_EchoISR+0x48>)
 80005aa:	601a      	str	r2, [r3, #0]
	        Right_echo_received = 1;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <Right_EchoISR+0x4c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	701a      	strb	r2, [r3, #0]
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40010800 	.word	0x40010800
 80005bc:	007a1200 	.word	0x007a1200
 80005c0:	2000005c 	.word	0x2000005c
 80005c4:	20000060 	.word	0x20000060
 80005c8:	20000064 	.word	0x20000064

080005cc <Ultrasonic_Init>:

void Ultrasonic_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    // Enable clocks
    GPIOA_CLOCK_ENABLE;
 80005d0:	4b29      	ldr	r3, [pc, #164]	; (8000678 <Ultrasonic_Init+0xac>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <Ultrasonic_Init+0xac>)
 80005d6:	f043 0304 	orr.w	r3, r3, #4
 80005da:	6193      	str	r3, [r2, #24]
    GPIOB_CLOCK_ENABLE;
 80005dc:	4b26      	ldr	r3, [pc, #152]	; (8000678 <Ultrasonic_Init+0xac>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a25      	ldr	r2, [pc, #148]	; (8000678 <Ultrasonic_Init+0xac>)
 80005e2:	f043 0308 	orr.w	r3, r3, #8
 80005e6:	6193      	str	r3, [r2, #24]
    AFIO_CLOCK_ENABLE;
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <Ultrasonic_Init+0xac>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <Ultrasonic_Init+0xac>)
 80005ee:	f043 0301 	orr.w	r3, r3, #1
 80005f2:	6193      	str	r3, [r2, #24]

    // Configure Front trigger
    pinmode(FRONT_TRIG_PORT, FRONT_TRIG_PIN, GPIO_MODE_OUTPUT_push_pull_Speed2);
 80005f4:	2202      	movs	r2, #2
 80005f6:	210b      	movs	r1, #11
 80005f8:	4820      	ldr	r0, [pc, #128]	; (800067c <Ultrasonic_Init+0xb0>)
 80005fa:	f000 fa0f 	bl	8000a1c <pinmode>
    pinwrite(FRONT_TRIG_PORT, FRONT_TRIG_PIN, LOW);
 80005fe:	2200      	movs	r2, #0
 8000600:	210b      	movs	r1, #11
 8000602:	481e      	ldr	r0, [pc, #120]	; (800067c <Ultrasonic_Init+0xb0>)
 8000604:	f000 faec 	bl	8000be0 <pinwrite>

    // Configure Left trigger
    pinmode(LEFT_TRIG_PORT, LEFT_TRIG_PIN, GPIO_MODE_OUTPUT_push_pull_Speed2);
 8000608:	2202      	movs	r2, #2
 800060a:	210c      	movs	r1, #12
 800060c:	481b      	ldr	r0, [pc, #108]	; (800067c <Ultrasonic_Init+0xb0>)
 800060e:	f000 fa05 	bl	8000a1c <pinmode>
    pinwrite(LEFT_TRIG_PORT, LEFT_TRIG_PIN, LOW);
 8000612:	2200      	movs	r2, #0
 8000614:	210c      	movs	r1, #12
 8000616:	4819      	ldr	r0, [pc, #100]	; (800067c <Ultrasonic_Init+0xb0>)
 8000618:	f000 fae2 	bl	8000be0 <pinwrite>

    // Configure Right trigger
    pinmode(RIGHT_TRIG_PORT, RIGHT_TRIG_PIN, GPIO_MODE_OUTPUT_push_pull_Speed2);
 800061c:	2202      	movs	r2, #2
 800061e:	210d      	movs	r1, #13
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <Ultrasonic_Init+0xb0>)
 8000622:	f000 f9fb 	bl	8000a1c <pinmode>
    pinwrite(RIGHT_TRIG_PORT, RIGHT_TRIG_PIN, LOW);
 8000626:	2200      	movs	r2, #0
 8000628:	210d      	movs	r1, #13
 800062a:	4814      	ldr	r0, [pc, #80]	; (800067c <Ultrasonic_Init+0xb0>)
 800062c:	f000 fad8 	bl	8000be0 <pinwrite>

    // Configure Front Echo
    pinmode(FRONT_ECHO_PORT , FRONT_ECHO_PIN  , GPIO_MODE_INPUT_FLO);
 8000630:	2204      	movs	r2, #4
 8000632:	2101      	movs	r1, #1
 8000634:	4812      	ldr	r0, [pc, #72]	; (8000680 <Ultrasonic_Init+0xb4>)
 8000636:	f000 f9f1 	bl	8000a1c <pinmode>

    //Configure Left Echo
    pinmode(LEFT_ECHO_PORT  , LEFT_ECHO_PIN   , GPIO_MODE_INPUT_FLO);
 800063a:	2204      	movs	r2, #4
 800063c:	2102      	movs	r1, #2
 800063e:	4810      	ldr	r0, [pc, #64]	; (8000680 <Ultrasonic_Init+0xb4>)
 8000640:	f000 f9ec 	bl	8000a1c <pinmode>

    //Configure Right Echo
    pinmode(RIGHT_ECHO_PORT , RIGHT_ECHO_PIN  , GPIO_MODE_INPUT_FLO);
 8000644:	2204      	movs	r2, #4
 8000646:	2103      	movs	r1, #3
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <Ultrasonic_Init+0xb4>)
 800064a:	f000 f9e7 	bl	8000a1c <pinmode>

    // EXTI Front
    EXIT(FRONT_ECHO_PORT, FRONT_ECHO_PIN , EXTI_Trigger_RisingAndFalling, Front_EchoISR);
 800064e:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <Ultrasonic_Init+0xb8>)
 8000650:	2202      	movs	r2, #2
 8000652:	2101      	movs	r1, #1
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <Ultrasonic_Init+0xb4>)
 8000656:	f000 fb61 	bl	8000d1c <EXIT>

    //EXTI Left
    EXIT(LEFT_ECHO_PORT , LEFT_ECHO_PIN  , EXTI_Trigger_RisingAndFalling, Left_EchoISR);
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <Ultrasonic_Init+0xbc>)
 800065c:	2202      	movs	r2, #2
 800065e:	2102      	movs	r1, #2
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <Ultrasonic_Init+0xb4>)
 8000662:	f000 fb5b 	bl	8000d1c <EXIT>

    //EXTI Right
    EXIT(RIGHT_ECHO_PORT, RIGHT_ECHO_PIN , EXTI_Trigger_RisingAndFalling, Right_EchoISR);
 8000666:	4b09      	ldr	r3, [pc, #36]	; (800068c <Ultrasonic_Init+0xc0>)
 8000668:	2202      	movs	r2, #2
 800066a:	2103      	movs	r1, #3
 800066c:	4804      	ldr	r0, [pc, #16]	; (8000680 <Ultrasonic_Init+0xb4>)
 800066e:	f000 fb55 	bl	8000d1c <EXIT>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40021000 	.word	0x40021000
 800067c:	40010c00 	.word	0x40010c00
 8000680:	40010800 	.word	0x40010800
 8000684:	080004dd 	.word	0x080004dd
 8000688:	0800052d 	.word	0x0800052d
 800068c:	0800057d 	.word	0x0800057d

08000690 <Get_Distance_Front>:
uint32_t Get_Distance_Front(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0

		pinwrite(FRONT_TRIG_PORT, FRONT_TRIG_PIN, HIGH);
 8000696:	2201      	movs	r2, #1
 8000698:	210b      	movs	r1, #11
 800069a:	481f      	ldr	r0, [pc, #124]	; (8000718 <Get_Distance_Front+0x88>)
 800069c:	f000 faa0 	bl	8000be0 <pinwrite>
	    delay(10, U_us, ULTRASONIC_CLK);  // 10µs trigger pulse
 80006a0:	4a1e      	ldr	r2, [pc, #120]	; (800071c <Get_Distance_Front+0x8c>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	200a      	movs	r0, #10
 80006a6:	f001 fc69 	bl	8001f7c <delay>
	    pinwrite(FRONT_TRIG_PORT, FRONT_TRIG_PIN,LOW);
 80006aa:	2200      	movs	r2, #0
 80006ac:	210b      	movs	r1, #11
 80006ae:	481a      	ldr	r0, [pc, #104]	; (8000718 <Get_Distance_Front+0x88>)
 80006b0:	f000 fa96 	bl	8000be0 <pinwrite>

	    // Wait for echo with timeout
	    uint32_t timeout = 30000;  // 30ms timeout
 80006b4:	f247 5330 	movw	r3, #30000	; 0x7530
 80006b8:	60fb      	str	r3, [r7, #12]
	    uint32_t start_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_START);
 80006ba:	2101      	movs	r1, #1
 80006bc:	4817      	ldr	r0, [pc, #92]	; (800071c <Get_Distance_Front+0x8c>)
 80006be:	f001 fd0f 	bl	80020e0 <TIME_CALCULATION>
 80006c2:	60b8      	str	r0, [r7, #8]

	    while (!Front_echo_received) {
 80006c4:	e00c      	b.n	80006e0 <Get_Distance_Front+0x50>
	        if ((TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP) - start_time) > timeout) {
 80006c6:	2100      	movs	r1, #0
 80006c8:	4814      	ldr	r0, [pc, #80]	; (800071c <Get_Distance_Front+0x8c>)
 80006ca:	f001 fd09 	bl	80020e0 <TIME_CALCULATION>
 80006ce:	4602      	mov	r2, r0
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	1ad3      	subs	r3, r2, r3
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d202      	bcs.n	80006e0 <Get_Distance_Front+0x50>
	            return -1;  // Error value
 80006da:	f04f 33ff 	mov.w	r3, #4294967295
 80006de:	e017      	b.n	8000710 <Get_Distance_Front+0x80>
	    while (!Front_echo_received) {
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <Get_Distance_Front+0x90>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0ed      	beq.n	80006c6 <Get_Distance_Front+0x36>
	        }
	    }

	    // Calculate distance
	    uint32_t pulse_duration = Front_echo_end_time - Front_echo_start_time;
 80006ea:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <Get_Distance_Front+0x94>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <Get_Distance_Front+0x98>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	607b      	str	r3, [r7, #4]
	    uint32_t distance = (pulse_duration * 170) / 10000;  // cm
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	22aa      	movs	r2, #170	; 0xaa
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4a0b      	ldr	r2, [pc, #44]	; (800072c <Get_Distance_Front+0x9c>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	0b5b      	lsrs	r3, r3, #13
 8000706:	603b      	str	r3, [r7, #0]

	    Front_echo_received = 0;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <Get_Distance_Front+0x90>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
	    return distance;
 800070e:	683b      	ldr	r3, [r7, #0]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010c00 	.word	0x40010c00
 800071c:	007a1200 	.word	0x007a1200
 8000720:	2000004c 	.word	0x2000004c
 8000724:	20000048 	.word	0x20000048
 8000728:	20000044 	.word	0x20000044
 800072c:	d1b71759 	.word	0xd1b71759

08000730 <Get_Distance_Left>:

// Get distance from left sensor
uint32_t Get_Distance_Left(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
			// Send trigger pulse
			pinwrite(LEFT_TRIG_PORT, LEFT_TRIG_PIN, HIGH);
 8000736:	2201      	movs	r2, #1
 8000738:	210c      	movs	r1, #12
 800073a:	481f      	ldr	r0, [pc, #124]	; (80007b8 <Get_Distance_Left+0x88>)
 800073c:	f000 fa50 	bl	8000be0 <pinwrite>
		    delay(10, U_us, ULTRASONIC_CLK);  // 10µs trigger pulse
 8000740:	4a1e      	ldr	r2, [pc, #120]	; (80007bc <Get_Distance_Left+0x8c>)
 8000742:	2101      	movs	r1, #1
 8000744:	200a      	movs	r0, #10
 8000746:	f001 fc19 	bl	8001f7c <delay>
		    pinwrite(LEFT_TRIG_PORT, LEFT_TRIG_PIN ,LOW);
 800074a:	2200      	movs	r2, #0
 800074c:	210c      	movs	r1, #12
 800074e:	481a      	ldr	r0, [pc, #104]	; (80007b8 <Get_Distance_Left+0x88>)
 8000750:	f000 fa46 	bl	8000be0 <pinwrite>

		    // Wait for echo with timeout
		    uint32_t timeout = 30000;  // 30ms timeout
 8000754:	f247 5330 	movw	r3, #30000	; 0x7530
 8000758:	60fb      	str	r3, [r7, #12]
		    uint32_t start_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_START);
 800075a:	2101      	movs	r1, #1
 800075c:	4817      	ldr	r0, [pc, #92]	; (80007bc <Get_Distance_Left+0x8c>)
 800075e:	f001 fcbf 	bl	80020e0 <TIME_CALCULATION>
 8000762:	60b8      	str	r0, [r7, #8]

		    while (!Left_echo_received) {
 8000764:	e00c      	b.n	8000780 <Get_Distance_Left+0x50>
		        if ((TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP) - start_time) > timeout) {
 8000766:	2100      	movs	r1, #0
 8000768:	4814      	ldr	r0, [pc, #80]	; (80007bc <Get_Distance_Left+0x8c>)
 800076a:	f001 fcb9 	bl	80020e0 <TIME_CALCULATION>
 800076e:	4602      	mov	r2, r0
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	429a      	cmp	r2, r3
 8000778:	d202      	bcs.n	8000780 <Get_Distance_Left+0x50>
		            return -1;  // Error value
 800077a:	f04f 33ff 	mov.w	r3, #4294967295
 800077e:	e017      	b.n	80007b0 <Get_Distance_Left+0x80>
		    while (!Left_echo_received) {
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <Get_Distance_Left+0x90>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0ed      	beq.n	8000766 <Get_Distance_Left+0x36>
		        }
		    }

		    // Calculate distance
		    uint32_t pulse_duration = Left_echo_end_time - Left_echo_start_time;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <Get_Distance_Left+0x94>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <Get_Distance_Left+0x98>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	1ad3      	subs	r3, r2, r3
 8000794:	607b      	str	r3, [r7, #4]
		    uint32_t distance = (pulse_duration * 170) / 10000;  // cm
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	22aa      	movs	r2, #170	; 0xaa
 800079a:	fb02 f303 	mul.w	r3, r2, r3
 800079e:	4a0b      	ldr	r2, [pc, #44]	; (80007cc <Get_Distance_Left+0x9c>)
 80007a0:	fba2 2303 	umull	r2, r3, r2, r3
 80007a4:	0b5b      	lsrs	r3, r3, #13
 80007a6:	603b      	str	r3, [r7, #0]

		    Left_echo_received = 0;
 80007a8:	4b05      	ldr	r3, [pc, #20]	; (80007c0 <Get_Distance_Left+0x90>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]
		    return distance;
 80007ae:	683b      	ldr	r3, [r7, #0]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40010c00 	.word	0x40010c00
 80007bc:	007a1200 	.word	0x007a1200
 80007c0:	20000058 	.word	0x20000058
 80007c4:	20000054 	.word	0x20000054
 80007c8:	20000050 	.word	0x20000050
 80007cc:	d1b71759 	.word	0xd1b71759

080007d0 <Get_Distance_Right>:

// Get distance from right sensor
uint32_t Get_Distance_Right(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
	         // Send trigger pulse
			pinwrite(RIGHT_TRIG_PORT, RIGHT_TRIG_PIN, HIGH);
 80007d6:	2201      	movs	r2, #1
 80007d8:	210d      	movs	r1, #13
 80007da:	481f      	ldr	r0, [pc, #124]	; (8000858 <Get_Distance_Right+0x88>)
 80007dc:	f000 fa00 	bl	8000be0 <pinwrite>
		    delay(10, U_us, ULTRASONIC_CLK);  // 10µs trigger pulse
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <Get_Distance_Right+0x8c>)
 80007e2:	2101      	movs	r1, #1
 80007e4:	200a      	movs	r0, #10
 80007e6:	f001 fbc9 	bl	8001f7c <delay>
		    pinwrite(RIGHT_TRIG_PORT, RIGHT_TRIG_PIN,LOW);
 80007ea:	2200      	movs	r2, #0
 80007ec:	210d      	movs	r1, #13
 80007ee:	481a      	ldr	r0, [pc, #104]	; (8000858 <Get_Distance_Right+0x88>)
 80007f0:	f000 f9f6 	bl	8000be0 <pinwrite>

		    // Wait for echo with timeout
		    uint32_t timeout = 30000;  // 30ms timeout
 80007f4:	f247 5330 	movw	r3, #30000	; 0x7530
 80007f8:	60fb      	str	r3, [r7, #12]
		    uint32_t start_time = TIME_CALCULATION(ULTRASONIC_CLK, TIMER_START);
 80007fa:	2101      	movs	r1, #1
 80007fc:	4817      	ldr	r0, [pc, #92]	; (800085c <Get_Distance_Right+0x8c>)
 80007fe:	f001 fc6f 	bl	80020e0 <TIME_CALCULATION>
 8000802:	60b8      	str	r0, [r7, #8]

		    while (!Right_echo_received) {
 8000804:	e00c      	b.n	8000820 <Get_Distance_Right+0x50>
		        if ((TIME_CALCULATION(ULTRASONIC_CLK, TIMER_STOP) - start_time) > timeout) {
 8000806:	2100      	movs	r1, #0
 8000808:	4814      	ldr	r0, [pc, #80]	; (800085c <Get_Distance_Right+0x8c>)
 800080a:	f001 fc69 	bl	80020e0 <TIME_CALCULATION>
 800080e:	4602      	mov	r2, r0
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	429a      	cmp	r2, r3
 8000818:	d202      	bcs.n	8000820 <Get_Distance_Right+0x50>
		            return -1;  // Error value
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	e017      	b.n	8000850 <Get_Distance_Right+0x80>
		    while (!Right_echo_received) {
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <Get_Distance_Right+0x90>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0ed      	beq.n	8000806 <Get_Distance_Right+0x36>
		        }
		    }

		    // Calculate distance
		    uint32_t pulse_duration = Right_echo_end_time - Right_echo_start_time;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <Get_Distance_Right+0x94>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <Get_Distance_Right+0x98>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	607b      	str	r3, [r7, #4]
		    uint32_t distance = (pulse_duration * 170) / 10000;  // cm
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	22aa      	movs	r2, #170	; 0xaa
 800083a:	fb02 f303 	mul.w	r3, r2, r3
 800083e:	4a0b      	ldr	r2, [pc, #44]	; (800086c <Get_Distance_Right+0x9c>)
 8000840:	fba2 2303 	umull	r2, r3, r2, r3
 8000844:	0b5b      	lsrs	r3, r3, #13
 8000846:	603b      	str	r3, [r7, #0]

		    Right_echo_received = 0;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <Get_Distance_Right+0x90>)
 800084a:	2200      	movs	r2, #0
 800084c:	701a      	strb	r2, [r3, #0]
		    return distance;
 800084e:	683b      	ldr	r3, [r7, #0]
}
 8000850:	4618      	mov	r0, r3
 8000852:	3710      	adds	r7, #16
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010c00 	.word	0x40010c00
 800085c:	007a1200 	.word	0x007a1200
 8000860:	20000064 	.word	0x20000064
 8000864:	20000060 	.word	0x20000060
 8000868:	2000005c 	.word	0x2000005c
 800086c:	d1b71759 	.word	0xd1b71759

08000870 <main>:

uint32_t current_speed = 700;



int main() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
	Ultrasonic_Init();
 8000876:	f7ff fea9 	bl	80005cc <Ultrasonic_Init>
	Motors_Init();
 800087a:	f7ff fc79 	bl	8000170 <Motors_Init>
	Set_Speed(current_speed);
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <main+0x98>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fc9c 	bl	80001c0 <Set_Speed>

    while(1) {
        Move_Forward();
 8000888:	f7ff fcb8 	bl	80001fc <Move_Forward>
        uint32_t distance = Get_Distance_Front();
 800088c:	f7ff ff00 	bl	8000690 <Get_Distance_Front>
 8000890:	60f8      	str	r0, [r7, #12]
        speed_increment(&current_speed, V2_speed, distance);
 8000892:	4b1e      	ldr	r3, [pc, #120]	; (800090c <main+0x9c>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68fa      	ldr	r2, [r7, #12]
 8000898:	4619      	mov	r1, r3
 800089a:	481b      	ldr	r0, [pc, #108]	; (8000908 <main+0x98>)
 800089c:	f7ff fd16 	bl	80002cc <speed_increment>
        delay(3000, U_ms, clk);
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <main+0xa0>)
 80008a2:	2100      	movs	r1, #0
 80008a4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a8:	f001 fb68 	bl	8001f7c <delay>
        speed_decrement(&current_speed, V2_speed, distance);
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <main+0x9c>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4814      	ldr	r0, [pc, #80]	; (8000908 <main+0x98>)
 80008b6:	f7ff fd57 	bl	8000368 <speed_decrement>

        delay(3000, U_ms, clk);
 80008ba:	4a15      	ldr	r2, [pc, #84]	; (8000910 <main+0xa0>)
 80008bc:	2100      	movs	r1, #0
 80008be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008c2:	f001 fb5b 	bl	8001f7c <delay>

        uint32_t Left_distance = Get_Distance_Left();
 80008c6:	f7ff ff33 	bl	8000730 <Get_Distance_Left>
 80008ca:	60b8      	str	r0, [r7, #8]

        uint32_t Right_distance = Get_Distance_Right();
 80008cc:	f7ff ff80 	bl	80007d0 <Get_Distance_Right>
 80008d0:	6078      	str	r0, [r7, #4]

        Turn_left(current_speed , Left_distance , Right_distance);
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <main+0x98>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	68b9      	ldr	r1, [r7, #8]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fd5e 	bl	800039c <Turn_left>
        delay(3000, U_ms, clk);
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <main+0xa0>)
 80008e2:	2100      	movs	r1, #0
 80008e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008e8:	f001 fb48 	bl	8001f7c <delay>
        Turn_right(current_speed , Left_distance , Right_distance);
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <main+0x98>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fda1 	bl	800043c <Turn_right>
        delay(3000, U_ms, clk);
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <main+0xa0>)
 80008fc:	2100      	movs	r1, #0
 80008fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000902:	f001 fb3b 	bl	8001f7c <delay>
    while(1) {
 8000906:	e7bf      	b.n	8000888 <main+0x18>
 8000908:	20000004 	.word	0x20000004
 800090c:	20000000 	.word	0x20000000
 8000910:	02255100 	.word	0x02255100

08000914 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000916:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000918:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	; (8000950 <LoopForever+0x6>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	; (8000954 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	; (8000958 <LoopForever+0xe>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	; (8000960 <LoopForever+0x16>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000942:	f001 fe25 	bl	8002590 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000946:	f7ff ff93 	bl	8000870 <main>

0800094a <LoopForever>:

LoopForever:
    b LoopForever
 800094a:	e7fe      	b.n	800094a <LoopForever>
  ldr   r0, =_estack
 800094c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000958:	080025f8 	.word	0x080025f8
  ldr r2, =_sbss
 800095c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000960:	200000c4 	.word	0x200000c4

08000964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC1_2_IRQHandler>

08000966 <getposition>:
		else return (uint8_t)(GPIO_PIN_LOCK_FAILED);
	}
	else return (uint8_t)(GPIO_PIN_LOCK_FAILED);
}
//************************************************************************By bassamzain***********************************************//
uint8_t getposition(uint16_t pin_num){
 8000966:	b480      	push	{r7}
 8000968:	b085      	sub	sp, #20
 800096a:	af00      	add	r7, sp, #0
 800096c:	4603      	mov	r3, r0
 800096e:	80fb      	strh	r3, [r7, #6]
	uint8_t rval;
	if(pin_num == pin0){
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d101      	bne.n	800097a <getposition+0x14>
		rval =0;
 8000976:	2300      	movs	r3, #0
 8000978:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin1){
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d101      	bne.n	8000984 <getposition+0x1e>
		rval =4;
 8000980:	2304      	movs	r3, #4
 8000982:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin2){
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2b02      	cmp	r3, #2
 8000988:	d101      	bne.n	800098e <getposition+0x28>
		rval =8;
 800098a:	2308      	movs	r3, #8
 800098c:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin3){
 800098e:	88fb      	ldrh	r3, [r7, #6]
 8000990:	2b03      	cmp	r3, #3
 8000992:	d101      	bne.n	8000998 <getposition+0x32>
		rval =12;
 8000994:	230c      	movs	r3, #12
 8000996:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin4){
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	2b04      	cmp	r3, #4
 800099c:	d101      	bne.n	80009a2 <getposition+0x3c>
		rval =16;
 800099e:	2310      	movs	r3, #16
 80009a0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin5){
 80009a2:	88fb      	ldrh	r3, [r7, #6]
 80009a4:	2b05      	cmp	r3, #5
 80009a6:	d101      	bne.n	80009ac <getposition+0x46>
		rval =20;
 80009a8:	2314      	movs	r3, #20
 80009aa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin6){
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d101      	bne.n	80009b6 <getposition+0x50>
		rval =24;
 80009b2:	2318      	movs	r3, #24
 80009b4:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin7){
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	2b07      	cmp	r3, #7
 80009ba:	d101      	bne.n	80009c0 <getposition+0x5a>
		rval =28;
 80009bc:	231c      	movs	r3, #28
 80009be:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin8){
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d101      	bne.n	80009ca <getposition+0x64>
		rval =0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin9){
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	2b09      	cmp	r3, #9
 80009ce:	d101      	bne.n	80009d4 <getposition+0x6e>
		rval =4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin10){
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	2b0a      	cmp	r3, #10
 80009d8:	d101      	bne.n	80009de <getposition+0x78>
		rval =8;
 80009da:	2308      	movs	r3, #8
 80009dc:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin11){
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	2b0b      	cmp	r3, #11
 80009e2:	d101      	bne.n	80009e8 <getposition+0x82>
		rval =12;
 80009e4:	230c      	movs	r3, #12
 80009e6:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin12){
 80009e8:	88fb      	ldrh	r3, [r7, #6]
 80009ea:	2b0c      	cmp	r3, #12
 80009ec:	d101      	bne.n	80009f2 <getposition+0x8c>
		rval =16;
 80009ee:	2310      	movs	r3, #16
 80009f0:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin13){
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	2b0d      	cmp	r3, #13
 80009f6:	d101      	bne.n	80009fc <getposition+0x96>
		rval =20;
 80009f8:	2314      	movs	r3, #20
 80009fa:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin14){
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	2b0e      	cmp	r3, #14
 8000a00:	d101      	bne.n	8000a06 <getposition+0xa0>
		rval =24;
 8000a02:	2318      	movs	r3, #24
 8000a04:	73fb      	strb	r3, [r7, #15]
	}
	if(pin_num == pin15){
 8000a06:	88fb      	ldrh	r3, [r7, #6]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d101      	bne.n	8000a10 <getposition+0xaa>
		rval =28;
 8000a0c:	231c      	movs	r3, #28
 8000a0e:	73fb      	strb	r3, [r7, #15]
	}
	return rval;
 8000a10:	7bfb      	ldrb	r3, [r7, #15]


}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <pinmode>:
// * @param [in] - GPIOx: where x can be (A...E Depending on device used) to select the GPIO Peripheral
// * @param [in] - pin: pin name
// * @param [in] - pinmode:mode of the pin
// * @retval -none
// * Note-
void pinmode(GPIO_TypedDef* GPIOx,uint16_t pin,uint32_t pinmode){
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	460b      	mov	r3, r1
 8000a26:	607a      	str	r2, [r7, #4]
 8000a28:	817b      	strh	r3, [r7, #10]
	if(GPIOx==GPIOA){
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	4a69      	ldr	r2, [pc, #420]	; (8000bd4 <pinmode+0x1b8>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d106      	bne.n	8000a40 <pinmode+0x24>
		GPIOA_CLOCK_ENABLE;
 8000a32:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <pinmode+0x1bc>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a68      	ldr	r2, [pc, #416]	; (8000bd8 <pinmode+0x1bc>)
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	e010      	b.n	8000a62 <pinmode+0x46>

	}
	else if(GPIOx==GPIOB){
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4a66      	ldr	r2, [pc, #408]	; (8000bdc <pinmode+0x1c0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d106      	bne.n	8000a56 <pinmode+0x3a>
		GPIOB_CLOCK_ENABLE;
 8000a48:	4b63      	ldr	r3, [pc, #396]	; (8000bd8 <pinmode+0x1bc>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a62      	ldr	r2, [pc, #392]	; (8000bd8 <pinmode+0x1bc>)
 8000a4e:	f043 0308 	orr.w	r3, r3, #8
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	e005      	b.n	8000a62 <pinmode+0x46>

	}
	else{
		GPIOC_CLOCK_ENABLE;
 8000a56:	4b60      	ldr	r3, [pc, #384]	; (8000bd8 <pinmode+0x1bc>)
 8000a58:	699b      	ldr	r3, [r3, #24]
 8000a5a:	4a5f      	ldr	r2, [pc, #380]	; (8000bd8 <pinmode+0x1bc>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	6193      	str	r3, [r2, #24]
	}

	if(pin<8){
 8000a62:	897b      	ldrh	r3, [r7, #10]
 8000a64:	2b07      	cmp	r3, #7
 8000a66:	d856      	bhi.n	8000b16 <pinmode+0xfa>
		GPIOx->CRL &=~(0xf<<(getposition(pin)));
 8000a68:	897b      	ldrh	r3, [r7, #10]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff7b 	bl	8000966 <getposition>
 8000a70:	4603      	mov	r3, r0
 8000a72:	461a      	mov	r2, r3
 8000a74:	230f      	movs	r3, #15
 8000a76:	4093      	lsls	r3, r2
 8000a78:	43da      	mvns	r2, r3
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	601a      	str	r2, [r3, #0]

		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	d002      	beq.n	8000a90 <pinmode+0x74>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b18      	cmp	r3, #24
 8000a8e:	d133      	bne.n	8000af8 <pinmode+0xdc>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b18      	cmp	r3, #24
 8000a94:	d117      	bne.n	8000ac6 <pinmode+0xaa>
				GPIOx->CRL |=(0b1000<<(getposition(pin)));
 8000a96:	897b      	ldrh	r3, [r7, #10]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff64 	bl	8000966 <getposition>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	fa03 f202 	lsl.w	r2, r3, r2
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	431a      	orrs	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	601a      	str	r2, [r3, #0]
				GPIOx->ODR |= (1<<pin);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	897a      	ldrh	r2, [r7, #10]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000ac4:	e081      	b.n	8000bca <pinmode+0x1ae>
			}
			else{
				GPIOx->CRL |=(0b1000<<(getposition(pin)));
 8000ac6:	897b      	ldrh	r3, [r7, #10]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ff4c 	bl	8000966 <getposition>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	fa03 f202 	lsl.w	r2, r3, r2
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	601a      	str	r2, [r3, #0]
				GPIOx->ODR &=~(1<<pin);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	68db      	ldr	r3, [r3, #12]
 8000ae6:	897a      	ldrh	r2, [r7, #10]
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fa01 f202 	lsl.w	r2, r1, r2
 8000aee:	43d2      	mvns	r2, r2
 8000af0:	401a      	ands	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000af6:	e068      	b.n	8000bca <pinmode+0x1ae>
			}

		}
		else GPIOx->CRL |=(pinmode<<(getposition(pin)));
 8000af8:	897b      	ldrh	r3, [r7, #10]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff33 	bl	8000966 <getposition>
 8000b00:	4603      	mov	r3, r0
 8000b02:	461a      	mov	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	fa03 f202 	lsl.w	r2, r3, r2
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	431a      	orrs	r2, r3
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	601a      	str	r2, [r3, #0]

	}



}
 8000b14:	e059      	b.n	8000bca <pinmode+0x1ae>
	else if(pin>7){
 8000b16:	897b      	ldrh	r3, [r7, #10]
 8000b18:	2b07      	cmp	r3, #7
 8000b1a:	d956      	bls.n	8000bca <pinmode+0x1ae>
		GPIOx->CRH &=~(0xf<<(getposition(pin)));
 8000b1c:	897b      	ldrh	r3, [r7, #10]
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f7ff ff21 	bl	8000966 <getposition>
 8000b24:	4603      	mov	r3, r0
 8000b26:	461a      	mov	r2, r3
 8000b28:	230f      	movs	r3, #15
 8000b2a:	4093      	lsls	r3, r2
 8000b2c:	43da      	mvns	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	401a      	ands	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	605a      	str	r2, [r3, #4]
		if((pinmode==GPIO_MODE_INPUT_PD)||(pinmode==GPIO_MODE_INPUT_PU)){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b08      	cmp	r3, #8
 8000b3c:	d002      	beq.n	8000b44 <pinmode+0x128>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2b18      	cmp	r3, #24
 8000b42:	d133      	bne.n	8000bac <pinmode+0x190>
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b18      	cmp	r3, #24
 8000b48:	d117      	bne.n	8000b7a <pinmode+0x15e>
				GPIOx->CRH |=(0b1000<<(getposition(pin)));
 8000b4a:	897b      	ldrh	r3, [r7, #10]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff0a 	bl	8000966 <getposition>
 8000b52:	4603      	mov	r3, r0
 8000b54:	461a      	mov	r2, r3
 8000b56:	2308      	movs	r3, #8
 8000b58:	fa03 f202 	lsl.w	r2, r3, r2
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	431a      	orrs	r2, r3
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	605a      	str	r2, [r3, #4]
				GPIOx->ODR |= (1<<pin);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	68db      	ldr	r3, [r3, #12]
 8000b6a:	897a      	ldrh	r2, [r7, #10]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b72:	431a      	orrs	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000b78:	e027      	b.n	8000bca <pinmode+0x1ae>
				GPIOx->CRH |=(0b1000<<(getposition(pin)));
 8000b7a:	897b      	ldrh	r3, [r7, #10]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff fef2 	bl	8000966 <getposition>
 8000b82:	4603      	mov	r3, r0
 8000b84:	461a      	mov	r2, r3
 8000b86:	2308      	movs	r3, #8
 8000b88:	fa03 f202 	lsl.w	r2, r3, r2
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	431a      	orrs	r2, r3
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	605a      	str	r2, [r3, #4]
				GPIOx->ODR &=~(1<<pin);
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	68db      	ldr	r3, [r3, #12]
 8000b9a:	897a      	ldrh	r2, [r7, #10]
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	43d2      	mvns	r2, r2
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	60da      	str	r2, [r3, #12]
			if(pinmode == GPIO_MODE_INPUT_PU){
 8000baa:	e00e      	b.n	8000bca <pinmode+0x1ae>
		else GPIOx->CRH |=(pinmode<<(getposition(pin)));
 8000bac:	897b      	ldrh	r3, [r7, #10]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff fed9 	bl	8000966 <getposition>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	fa03 f202 	lsl.w	r2, r3, r2
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	431a      	orrs	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	605a      	str	r2, [r3, #4]
}
 8000bc8:	e7ff      	b.n	8000bca <pinmode+0x1ae>
 8000bca:	bf00      	nop
 8000bcc:	3710      	adds	r7, #16
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40010800 	.word	0x40010800
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010c00 	.word	0x40010c00

08000be0 <pinwrite>:
 * @param [in] - pin: GPIOx PIN Number
 * @param [in] - status: The desired value to write
 * @retval - None
 * Note-
 */
void pinwrite(GPIO_TypedDef* GPIOx,uint16_t pin,uint8_t status){
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	460b      	mov	r3, r1
 8000bea:	807b      	strh	r3, [r7, #2]
 8000bec:	4613      	mov	r3, r2
 8000bee:	707b      	strb	r3, [r7, #1]
	if(status!=0){
 8000bf0:	787b      	ldrb	r3, [r7, #1]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d009      	beq.n	8000c0a <pinwrite+0x2a>
		GPIOx->ODR |=(1<<pin);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	887a      	ldrh	r2, [r7, #2]
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000c02:	431a      	orrs	r2, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	60da      	str	r2, [r3, #12]
	}
	else GPIOx->ODR &=~(1<<pin);

}
 8000c08:	e009      	b.n	8000c1e <pinwrite+0x3e>
	else GPIOx->ODR &=~(1<<pin);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	68db      	ldr	r3, [r3, #12]
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	2101      	movs	r1, #1
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	43d2      	mvns	r2, r2
 8000c18:	401a      	ands	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	60da      	str	r2, [r3, #12]
}
 8000c1e:	bf00      	nop
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <READ_PIN>:
 * @param [in]      - Pin: GPIOx PIN Number
 * @retval          - uint8_t
 * Note             - none
 */

uint8_t READ_PIN(GPIO_TypedDef* GPIOx, uint16_t pin){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
	return (GPIOx->IDR>>pin)&1;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	887b      	ldrh	r3, [r7, #2]
 8000c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <Enable_NVIC>:
 * ------------------------------------------------
 * 				  Generic Functions
 *-------------------------------------------------
 */

void Enable_NVIC(uint16_t IRQ){
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	80fb      	strh	r3, [r7, #6]
	switch(IRQ){
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	2b0f      	cmp	r3, #15
 8000c5e:	d854      	bhi.n	8000d0a <Enable_NVIC+0xba>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <Enable_NVIC+0x18>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000ca9 	.word	0x08000ca9
 8000c6c:	08000cb7 	.word	0x08000cb7
 8000c70:	08000cc5 	.word	0x08000cc5
 8000c74:	08000cd3 	.word	0x08000cd3
 8000c78:	08000ce1 	.word	0x08000ce1
 8000c7c:	08000cef 	.word	0x08000cef
 8000c80:	08000cef 	.word	0x08000cef
 8000c84:	08000cef 	.word	0x08000cef
 8000c88:	08000cef 	.word	0x08000cef
 8000c8c:	08000cef 	.word	0x08000cef
 8000c90:	08000cfd 	.word	0x08000cfd
 8000c94:	08000cfd 	.word	0x08000cfd
 8000c98:	08000cfd 	.word	0x08000cfd
 8000c9c:	08000cfd 	.word	0x08000cfd
 8000ca0:	08000cfd 	.word	0x08000cfd
 8000ca4:	08000cfd 	.word	0x08000cfd
	case 0:
		NVIC_IRQ6_EXTI0_Enable;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <Enable_NVIC+0xc4>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb2:	6013      	str	r3, [r2, #0]
		break;
 8000cb4:	e029      	b.n	8000d0a <Enable_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_Enable;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a16      	ldr	r2, [pc, #88]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	6013      	str	r3, [r2, #0]
		break;
 8000cc2:	e022      	b.n	8000d0a <Enable_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_Enable;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cce:	6013      	str	r3, [r2, #0]
		break;
 8000cd0:	e01b      	b.n	8000d0a <Enable_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_Enable;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cdc:	6013      	str	r3, [r2, #0]
		break;
 8000cde:	e014      	b.n	8000d0a <Enable_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_Enable;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <Enable_NVIC+0xc4>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0b      	ldr	r2, [pc, #44]	; (8000d14 <Enable_NVIC+0xc4>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	6013      	str	r3, [r2, #0]
		break;
 8000cec:	e00d      	b.n	8000d0a <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <Enable_NVIC+0xc4>)
 8000cf4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cf8:	6013      	str	r3, [r2, #0]
		break;
 8000cfa:	e006      	b.n	8000d0a <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <Enable_NVIC+0xc8>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <Enable_NVIC+0xc8>)
 8000d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d06:	6013      	str	r3, [r2, #0]
		break;
 8000d08:	bf00      	nop
	}


}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bc80      	pop	{r7}
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000e104 	.word	0xe000e104

08000d1c <EXIT>:
 * @param [in]      -function_addres : app ISR function
 * @retval          - none
 * Note             -
 *================================================================ */

void EXIT(GPIO_TypedDef* PORTx ,uint16_t pin,uint16_t triggercase,void (*function_addres) (void)){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	817b      	strh	r3, [r7, #10]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	813b      	strh	r3, [r7, #8]

	pinmode(PORTx,pin,GPIO_MODE_INTPUT_AF);//set pin to _INTPUT_AF
 8000d2e:	897b      	ldrh	r3, [r7, #10]
 8000d30:	2204      	movs	r2, #4
 8000d32:	4619      	mov	r1, r3
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	f7ff fe71 	bl	8000a1c <pinmode>
		//	0000: PA[x] pin
		//	0001: PB[x] pin
		//	0010: PC[x] pin
		//	0011: PD[x] pin

		switch(pin){
 8000d3a:	897b      	ldrh	r3, [r7, #10]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	f200 8385 	bhi.w	800144c <EXIT+0x730>
 8000d42:	a201      	add	r2, pc, #4	; (adr r2, 8000d48 <EXIT+0x2c>)
 8000d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d48:	08000d89 	.word	0x08000d89
 8000d4c:	08000def 	.word	0x08000def
 8000d50:	08000e55 	.word	0x08000e55
 8000d54:	08000ebb 	.word	0x08000ebb
 8000d58:	08000f21 	.word	0x08000f21
 8000d5c:	08000f87 	.word	0x08000f87
 8000d60:	08001001 	.word	0x08001001
 8000d64:	08001067 	.word	0x08001067
 8000d68:	080010cd 	.word	0x080010cd
 8000d6c:	08001133 	.word	0x08001133
 8000d70:	08001199 	.word	0x08001199
 8000d74:	080011ff 	.word	0x080011ff
 8000d78:	0800127b 	.word	0x0800127b
 8000d7c:	080012e1 	.word	0x080012e1
 8000d80:	08001347 	.word	0x08001347
 8000d84:	080013ab 	.word	0x080013ab
		case pin0:
			AFIO->EXTICR[0] &=~(0b1111<<0);
 8000d88:	4b92      	ldr	r3, [pc, #584]	; (8000fd4 <EXIT+0x2b8>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4a91      	ldr	r2, [pc, #580]	; (8000fd4 <EXIT+0x2b8>)
 8000d8e:	f023 030f 	bic.w	r3, r3, #15
 8000d92:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR[0] &=~(0b1111<<0);}
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	4a90      	ldr	r2, [pc, #576]	; (8000fd8 <EXIT+0x2bc>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d106      	bne.n	8000daa <EXIT+0x8e>
 8000d9c:	4b8d      	ldr	r3, [pc, #564]	; (8000fd4 <EXIT+0x2b8>)
 8000d9e:	689b      	ldr	r3, [r3, #8]
 8000da0:	4a8c      	ldr	r2, [pc, #560]	; (8000fd4 <EXIT+0x2b8>)
 8000da2:	f023 030f 	bic.w	r3, r3, #15
 8000da6:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<0);}

			break;
 8000da8:	e331      	b.n	800140e <EXIT+0x6f2>
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<0);}
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4a8b      	ldr	r2, [pc, #556]	; (8000fdc <EXIT+0x2c0>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d106      	bne.n	8000dc0 <EXIT+0xa4>
 8000db2:	4b88      	ldr	r3, [pc, #544]	; (8000fd4 <EXIT+0x2b8>)
 8000db4:	689b      	ldr	r3, [r3, #8]
 8000db6:	4a87      	ldr	r2, [pc, #540]	; (8000fd4 <EXIT+0x2b8>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6093      	str	r3, [r2, #8]
			break;
 8000dbe:	e326      	b.n	800140e <EXIT+0x6f2>
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<0);}
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4a87      	ldr	r2, [pc, #540]	; (8000fe0 <EXIT+0x2c4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d106      	bne.n	8000dd6 <EXIT+0xba>
 8000dc8:	4b82      	ldr	r3, [pc, #520]	; (8000fd4 <EXIT+0x2b8>)
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	4a81      	ldr	r2, [pc, #516]	; (8000fd4 <EXIT+0x2b8>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	6093      	str	r3, [r2, #8]
			break;
 8000dd4:	e31b      	b.n	800140e <EXIT+0x6f2>
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<0);}
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	4a82      	ldr	r2, [pc, #520]	; (8000fe4 <EXIT+0x2c8>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	f040 8317 	bne.w	800140e <EXIT+0x6f2>
 8000de0:	4b7c      	ldr	r3, [pc, #496]	; (8000fd4 <EXIT+0x2b8>)
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	4a7b      	ldr	r2, [pc, #492]	; (8000fd4 <EXIT+0x2b8>)
 8000de6:	f043 0303 	orr.w	r3, r3, #3
 8000dea:	6093      	str	r3, [r2, #8]
			break;
 8000dec:	e30f      	b.n	800140e <EXIT+0x6f2>
		case pin1:
			AFIO->EXTICR[0] &=~(0b1111<<4);
 8000dee:	4b79      	ldr	r3, [pc, #484]	; (8000fd4 <EXIT+0x2b8>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	4a78      	ldr	r2, [pc, #480]	; (8000fd4 <EXIT+0x2b8>)
 8000df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000df8:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR[0] &=~(0b1111<<4);}
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	4a76      	ldr	r2, [pc, #472]	; (8000fd8 <EXIT+0x2bc>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d106      	bne.n	8000e10 <EXIT+0xf4>
 8000e02:	4b74      	ldr	r3, [pc, #464]	; (8000fd4 <EXIT+0x2b8>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	4a73      	ldr	r2, [pc, #460]	; (8000fd4 <EXIT+0x2b8>)
 8000e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000e0c:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<4);}

			break;
 8000e0e:	e300      	b.n	8001412 <EXIT+0x6f6>
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<4);}
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	4a72      	ldr	r2, [pc, #456]	; (8000fdc <EXIT+0x2c0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d106      	bne.n	8000e26 <EXIT+0x10a>
 8000e18:	4b6e      	ldr	r3, [pc, #440]	; (8000fd4 <EXIT+0x2b8>)
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	4a6d      	ldr	r2, [pc, #436]	; (8000fd4 <EXIT+0x2b8>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6093      	str	r3, [r2, #8]
			break;
 8000e24:	e2f5      	b.n	8001412 <EXIT+0x6f6>
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<4);}
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4a6d      	ldr	r2, [pc, #436]	; (8000fe0 <EXIT+0x2c4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d106      	bne.n	8000e3c <EXIT+0x120>
 8000e2e:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <EXIT+0x2b8>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	4a68      	ldr	r2, [pc, #416]	; (8000fd4 <EXIT+0x2b8>)
 8000e34:	f043 0320 	orr.w	r3, r3, #32
 8000e38:	6093      	str	r3, [r2, #8]
			break;
 8000e3a:	e2ea      	b.n	8001412 <EXIT+0x6f6>
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<4);}
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4a69      	ldr	r2, [pc, #420]	; (8000fe4 <EXIT+0x2c8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	f040 82e6 	bne.w	8001412 <EXIT+0x6f6>
 8000e46:	4b63      	ldr	r3, [pc, #396]	; (8000fd4 <EXIT+0x2b8>)
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	4a62      	ldr	r2, [pc, #392]	; (8000fd4 <EXIT+0x2b8>)
 8000e4c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000e50:	6093      	str	r3, [r2, #8]
			break;
 8000e52:	e2de      	b.n	8001412 <EXIT+0x6f6>
		case pin2:
			AFIO->EXTICR[0] &=~(0b1111<<8);
 8000e54:	4b5f      	ldr	r3, [pc, #380]	; (8000fd4 <EXIT+0x2b8>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a5e      	ldr	r2, [pc, #376]	; (8000fd4 <EXIT+0x2b8>)
 8000e5a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e5e:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR[0] &=~(0b1111<<8);}
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4a5d      	ldr	r2, [pc, #372]	; (8000fd8 <EXIT+0x2bc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d106      	bne.n	8000e76 <EXIT+0x15a>
 8000e68:	4b5a      	ldr	r3, [pc, #360]	; (8000fd4 <EXIT+0x2b8>)
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	4a59      	ldr	r2, [pc, #356]	; (8000fd4 <EXIT+0x2b8>)
 8000e6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e72:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<8);}

			break;
 8000e74:	e2cf      	b.n	8001416 <EXIT+0x6fa>
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<8);}
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	4a58      	ldr	r2, [pc, #352]	; (8000fdc <EXIT+0x2c0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d106      	bne.n	8000e8c <EXIT+0x170>
 8000e7e:	4b55      	ldr	r3, [pc, #340]	; (8000fd4 <EXIT+0x2b8>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	4a54      	ldr	r2, [pc, #336]	; (8000fd4 <EXIT+0x2b8>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6093      	str	r3, [r2, #8]
			break;
 8000e8a:	e2c4      	b.n	8001416 <EXIT+0x6fa>
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<8);}
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4a54      	ldr	r2, [pc, #336]	; (8000fe0 <EXIT+0x2c4>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d106      	bne.n	8000ea2 <EXIT+0x186>
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <EXIT+0x2b8>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <EXIT+0x2b8>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e9e:	6093      	str	r3, [r2, #8]
			break;
 8000ea0:	e2b9      	b.n	8001416 <EXIT+0x6fa>
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<8);}
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <EXIT+0x2c8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	f040 82b5 	bne.w	8001416 <EXIT+0x6fa>
 8000eac:	4b49      	ldr	r3, [pc, #292]	; (8000fd4 <EXIT+0x2b8>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	4a48      	ldr	r2, [pc, #288]	; (8000fd4 <EXIT+0x2b8>)
 8000eb2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000eb6:	6093      	str	r3, [r2, #8]
			break;
 8000eb8:	e2ad      	b.n	8001416 <EXIT+0x6fa>
		case pin3:
			AFIO->EXTICR[0] &=~(0b1111<<12);
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <EXIT+0x2b8>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	4a45      	ldr	r2, [pc, #276]	; (8000fd4 <EXIT+0x2b8>)
 8000ec0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000ec4:	6093      	str	r3, [r2, #8]
			if(PORTx==GPIOA)     {AFIO->EXTICR[0] &=~(0b1111<<12);}
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	4a43      	ldr	r2, [pc, #268]	; (8000fd8 <EXIT+0x2bc>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d106      	bne.n	8000edc <EXIT+0x1c0>
 8000ece:	4b41      	ldr	r3, [pc, #260]	; (8000fd4 <EXIT+0x2b8>)
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	4a40      	ldr	r2, [pc, #256]	; (8000fd4 <EXIT+0x2b8>)
 8000ed4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000ed8:	6093      	str	r3, [r2, #8]
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<12);}

			break;
 8000eda:	e29e      	b.n	800141a <EXIT+0x6fe>
			else if(PORTx==GPIOB){AFIO->EXTICR[0] |= (0b0001<<12);}
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4a3f      	ldr	r2, [pc, #252]	; (8000fdc <EXIT+0x2c0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d106      	bne.n	8000ef2 <EXIT+0x1d6>
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <EXIT+0x2b8>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	4a3a      	ldr	r2, [pc, #232]	; (8000fd4 <EXIT+0x2b8>)
 8000eea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eee:	6093      	str	r3, [r2, #8]
			break;
 8000ef0:	e293      	b.n	800141a <EXIT+0x6fe>
			else if(PORTx==GPIOC){AFIO->EXTICR[0] |= (0b0010<<12);}
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4a3a      	ldr	r2, [pc, #232]	; (8000fe0 <EXIT+0x2c4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d106      	bne.n	8000f08 <EXIT+0x1ec>
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <EXIT+0x2b8>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	4a35      	ldr	r2, [pc, #212]	; (8000fd4 <EXIT+0x2b8>)
 8000f00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f04:	6093      	str	r3, [r2, #8]
			break;
 8000f06:	e288      	b.n	800141a <EXIT+0x6fe>
			else if(PORTx==GPIOD){AFIO->EXTICR[0] |= (0b0011<<12);}
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4a36      	ldr	r2, [pc, #216]	; (8000fe4 <EXIT+0x2c8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	f040 8284 	bne.w	800141a <EXIT+0x6fe>
 8000f12:	4b30      	ldr	r3, [pc, #192]	; (8000fd4 <EXIT+0x2b8>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	4a2f      	ldr	r2, [pc, #188]	; (8000fd4 <EXIT+0x2b8>)
 8000f18:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f1c:	6093      	str	r3, [r2, #8]
			break;
 8000f1e:	e27c      	b.n	800141a <EXIT+0x6fe>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin4:
			AFIO->EXTICR[1] &=~(0b1111<<0);
 8000f20:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <EXIT+0x2b8>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	4a2b      	ldr	r2, [pc, #172]	; (8000fd4 <EXIT+0x2b8>)
 8000f26:	f023 030f 	bic.w	r3, r3, #15
 8000f2a:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR[1] &=~(0b1111<<0);}
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4a2a      	ldr	r2, [pc, #168]	; (8000fd8 <EXIT+0x2bc>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d106      	bne.n	8000f42 <EXIT+0x226>
 8000f34:	4b27      	ldr	r3, [pc, #156]	; (8000fd4 <EXIT+0x2b8>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a26      	ldr	r2, [pc, #152]	; (8000fd4 <EXIT+0x2b8>)
 8000f3a:	f023 030f 	bic.w	r3, r3, #15
 8000f3e:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<0);}

			break;
 8000f40:	e26d      	b.n	800141e <EXIT+0x702>
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<0);}
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4a25      	ldr	r2, [pc, #148]	; (8000fdc <EXIT+0x2c0>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d106      	bne.n	8000f58 <EXIT+0x23c>
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <EXIT+0x2b8>)
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	4a21      	ldr	r2, [pc, #132]	; (8000fd4 <EXIT+0x2b8>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	60d3      	str	r3, [r2, #12]
			break;
 8000f56:	e262      	b.n	800141e <EXIT+0x702>
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<0);}
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4a21      	ldr	r2, [pc, #132]	; (8000fe0 <EXIT+0x2c4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d106      	bne.n	8000f6e <EXIT+0x252>
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <EXIT+0x2b8>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <EXIT+0x2b8>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	60d3      	str	r3, [r2, #12]
			break;
 8000f6c:	e257      	b.n	800141e <EXIT+0x702>
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<0);}
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <EXIT+0x2c8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	f040 8253 	bne.w	800141e <EXIT+0x702>
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <EXIT+0x2b8>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	4a15      	ldr	r2, [pc, #84]	; (8000fd4 <EXIT+0x2b8>)
 8000f7e:	f043 0303 	orr.w	r3, r3, #3
 8000f82:	60d3      	str	r3, [r2, #12]
			break;
 8000f84:	e24b      	b.n	800141e <EXIT+0x702>
		case pin5:
			AFIO->EXTICR[1] &=~(0b1111<<4);
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <EXIT+0x2b8>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <EXIT+0x2b8>)
 8000f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000f90:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR[1] &=~(0b1111<<4);}
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <EXIT+0x2bc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d106      	bne.n	8000fa8 <EXIT+0x28c>
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <EXIT+0x2b8>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <EXIT+0x2b8>)
 8000fa0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa4:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<4);}

			break;
 8000fa6:	e23c      	b.n	8001422 <EXIT+0x706>
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<4);}
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	4a0c      	ldr	r2, [pc, #48]	; (8000fdc <EXIT+0x2c0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d106      	bne.n	8000fbe <EXIT+0x2a2>
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <EXIT+0x2b8>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <EXIT+0x2b8>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	60d3      	str	r3, [r2, #12]
			break;
 8000fbc:	e231      	b.n	8001422 <EXIT+0x706>
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<4);}
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	; (8000fe0 <EXIT+0x2c4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d110      	bne.n	8000fe8 <EXIT+0x2cc>
 8000fc6:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <EXIT+0x2b8>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	4a02      	ldr	r2, [pc, #8]	; (8000fd4 <EXIT+0x2b8>)
 8000fcc:	f043 0320 	orr.w	r3, r3, #32
 8000fd0:	60d3      	str	r3, [r2, #12]
			break;
 8000fd2:	e226      	b.n	8001422 <EXIT+0x706>
 8000fd4:	40010000 	.word	0x40010000
 8000fd8:	40010800 	.word	0x40010800
 8000fdc:	40010c00 	.word	0x40010c00
 8000fe0:	40011000 	.word	0x40011000
 8000fe4:	40011400 	.word	0x40011400
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<4);}
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	4a93      	ldr	r2, [pc, #588]	; (8001238 <EXIT+0x51c>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	f040 8218 	bne.w	8001422 <EXIT+0x706>
 8000ff2:	4b92      	ldr	r3, [pc, #584]	; (800123c <EXIT+0x520>)
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	4a91      	ldr	r2, [pc, #580]	; (800123c <EXIT+0x520>)
 8000ff8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000ffc:	60d3      	str	r3, [r2, #12]
			break;
 8000ffe:	e210      	b.n	8001422 <EXIT+0x706>
		case pin6:
			AFIO->EXTICR[1] &=~(0b1111<<8);
 8001000:	4b8e      	ldr	r3, [pc, #568]	; (800123c <EXIT+0x520>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	4a8d      	ldr	r2, [pc, #564]	; (800123c <EXIT+0x520>)
 8001006:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800100a:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR[1] &=~(0b1111<<8);}
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4a8c      	ldr	r2, [pc, #560]	; (8001240 <EXIT+0x524>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d106      	bne.n	8001022 <EXIT+0x306>
 8001014:	4b89      	ldr	r3, [pc, #548]	; (800123c <EXIT+0x520>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	4a88      	ldr	r2, [pc, #544]	; (800123c <EXIT+0x520>)
 800101a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800101e:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<8);}

			break;
 8001020:	e201      	b.n	8001426 <EXIT+0x70a>
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<8);}
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	4a87      	ldr	r2, [pc, #540]	; (8001244 <EXIT+0x528>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d106      	bne.n	8001038 <EXIT+0x31c>
 800102a:	4b84      	ldr	r3, [pc, #528]	; (800123c <EXIT+0x520>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	4a83      	ldr	r2, [pc, #524]	; (800123c <EXIT+0x520>)
 8001030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001034:	60d3      	str	r3, [r2, #12]
			break;
 8001036:	e1f6      	b.n	8001426 <EXIT+0x70a>
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<8);}
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4a83      	ldr	r2, [pc, #524]	; (8001248 <EXIT+0x52c>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d106      	bne.n	800104e <EXIT+0x332>
 8001040:	4b7e      	ldr	r3, [pc, #504]	; (800123c <EXIT+0x520>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4a7d      	ldr	r2, [pc, #500]	; (800123c <EXIT+0x520>)
 8001046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800104a:	60d3      	str	r3, [r2, #12]
			break;
 800104c:	e1eb      	b.n	8001426 <EXIT+0x70a>
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<8);}
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	4a79      	ldr	r2, [pc, #484]	; (8001238 <EXIT+0x51c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	f040 81e7 	bne.w	8001426 <EXIT+0x70a>
 8001058:	4b78      	ldr	r3, [pc, #480]	; (800123c <EXIT+0x520>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4a77      	ldr	r2, [pc, #476]	; (800123c <EXIT+0x520>)
 800105e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001062:	60d3      	str	r3, [r2, #12]
			break;
 8001064:	e1df      	b.n	8001426 <EXIT+0x70a>
		case pin7:
			AFIO->EXTICR[1] &=~(0b1111<<12);
 8001066:	4b75      	ldr	r3, [pc, #468]	; (800123c <EXIT+0x520>)
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	4a74      	ldr	r2, [pc, #464]	; (800123c <EXIT+0x520>)
 800106c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001070:	60d3      	str	r3, [r2, #12]
			if(PORTx==GPIOA)     {AFIO->EXTICR[1] &=~(0b1111<<12);}
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a72      	ldr	r2, [pc, #456]	; (8001240 <EXIT+0x524>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d106      	bne.n	8001088 <EXIT+0x36c>
 800107a:	4b70      	ldr	r3, [pc, #448]	; (800123c <EXIT+0x520>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	4a6f      	ldr	r2, [pc, #444]	; (800123c <EXIT+0x520>)
 8001080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001084:	60d3      	str	r3, [r2, #12]
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<12);}

			break;
 8001086:	e1d0      	b.n	800142a <EXIT+0x70e>
			else if(PORTx==GPIOB){AFIO->EXTICR[1] |= (0b0001<<12);}
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4a6e      	ldr	r2, [pc, #440]	; (8001244 <EXIT+0x528>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d106      	bne.n	800109e <EXIT+0x382>
 8001090:	4b6a      	ldr	r3, [pc, #424]	; (800123c <EXIT+0x520>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a69      	ldr	r2, [pc, #420]	; (800123c <EXIT+0x520>)
 8001096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800109a:	60d3      	str	r3, [r2, #12]
			break;
 800109c:	e1c5      	b.n	800142a <EXIT+0x70e>
			else if(PORTx==GPIOC){AFIO->EXTICR[1] |= (0b0010<<12);}
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4a69      	ldr	r2, [pc, #420]	; (8001248 <EXIT+0x52c>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d106      	bne.n	80010b4 <EXIT+0x398>
 80010a6:	4b65      	ldr	r3, [pc, #404]	; (800123c <EXIT+0x520>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	4a64      	ldr	r2, [pc, #400]	; (800123c <EXIT+0x520>)
 80010ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b0:	60d3      	str	r3, [r2, #12]
			break;
 80010b2:	e1ba      	b.n	800142a <EXIT+0x70e>
			else if(PORTx==GPIOD){AFIO->EXTICR[1] |= (0b0011<<12);}
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4a60      	ldr	r2, [pc, #384]	; (8001238 <EXIT+0x51c>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	f040 81b6 	bne.w	800142a <EXIT+0x70e>
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <EXIT+0x520>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4a5e      	ldr	r2, [pc, #376]	; (800123c <EXIT+0x520>)
 80010c4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80010c8:	60d3      	str	r3, [r2, #12]
			break;
 80010ca:	e1ae      	b.n	800142a <EXIT+0x70e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin8:
			AFIO->EXTICR[2] &=~(0b1111<<0);
 80010cc:	4b5b      	ldr	r3, [pc, #364]	; (800123c <EXIT+0x520>)
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	4a5a      	ldr	r2, [pc, #360]	; (800123c <EXIT+0x520>)
 80010d2:	f023 030f 	bic.w	r3, r3, #15
 80010d6:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR[2] &=~(0b1111<<0);}
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4a59      	ldr	r2, [pc, #356]	; (8001240 <EXIT+0x524>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d106      	bne.n	80010ee <EXIT+0x3d2>
 80010e0:	4b56      	ldr	r3, [pc, #344]	; (800123c <EXIT+0x520>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	4a55      	ldr	r2, [pc, #340]	; (800123c <EXIT+0x520>)
 80010e6:	f023 030f 	bic.w	r3, r3, #15
 80010ea:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<0);}

			break;
 80010ec:	e19f      	b.n	800142e <EXIT+0x712>
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<0);}
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4a54      	ldr	r2, [pc, #336]	; (8001244 <EXIT+0x528>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d106      	bne.n	8001104 <EXIT+0x3e8>
 80010f6:	4b51      	ldr	r3, [pc, #324]	; (800123c <EXIT+0x520>)
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	4a50      	ldr	r2, [pc, #320]	; (800123c <EXIT+0x520>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6113      	str	r3, [r2, #16]
			break;
 8001102:	e194      	b.n	800142e <EXIT+0x712>
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<0);}
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	4a50      	ldr	r2, [pc, #320]	; (8001248 <EXIT+0x52c>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d106      	bne.n	800111a <EXIT+0x3fe>
 800110c:	4b4b      	ldr	r3, [pc, #300]	; (800123c <EXIT+0x520>)
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	4a4a      	ldr	r2, [pc, #296]	; (800123c <EXIT+0x520>)
 8001112:	f043 0302 	orr.w	r3, r3, #2
 8001116:	6113      	str	r3, [r2, #16]
			break;
 8001118:	e189      	b.n	800142e <EXIT+0x712>
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<0);}
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a46      	ldr	r2, [pc, #280]	; (8001238 <EXIT+0x51c>)
 800111e:	4293      	cmp	r3, r2
 8001120:	f040 8185 	bne.w	800142e <EXIT+0x712>
 8001124:	4b45      	ldr	r3, [pc, #276]	; (800123c <EXIT+0x520>)
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	4a44      	ldr	r2, [pc, #272]	; (800123c <EXIT+0x520>)
 800112a:	f043 0303 	orr.w	r3, r3, #3
 800112e:	6113      	str	r3, [r2, #16]
			break;
 8001130:	e17d      	b.n	800142e <EXIT+0x712>
		case pin9:
			AFIO->EXTICR[2] &=~(0b1111<<4);
 8001132:	4b42      	ldr	r3, [pc, #264]	; (800123c <EXIT+0x520>)
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	4a41      	ldr	r2, [pc, #260]	; (800123c <EXIT+0x520>)
 8001138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800113c:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR[2] &=~(0b1111<<4);}
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <EXIT+0x524>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d106      	bne.n	8001154 <EXIT+0x438>
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <EXIT+0x520>)
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	4a3c      	ldr	r2, [pc, #240]	; (800123c <EXIT+0x520>)
 800114c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001150:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<4);}

			break;
 8001152:	e16e      	b.n	8001432 <EXIT+0x716>
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<4);}
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4a3b      	ldr	r2, [pc, #236]	; (8001244 <EXIT+0x528>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d106      	bne.n	800116a <EXIT+0x44e>
 800115c:	4b37      	ldr	r3, [pc, #220]	; (800123c <EXIT+0x520>)
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	4a36      	ldr	r2, [pc, #216]	; (800123c <EXIT+0x520>)
 8001162:	f043 0310 	orr.w	r3, r3, #16
 8001166:	6113      	str	r3, [r2, #16]
			break;
 8001168:	e163      	b.n	8001432 <EXIT+0x716>
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<4);}
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4a36      	ldr	r2, [pc, #216]	; (8001248 <EXIT+0x52c>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d106      	bne.n	8001180 <EXIT+0x464>
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <EXIT+0x520>)
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	4a31      	ldr	r2, [pc, #196]	; (800123c <EXIT+0x520>)
 8001178:	f043 0320 	orr.w	r3, r3, #32
 800117c:	6113      	str	r3, [r2, #16]
			break;
 800117e:	e158      	b.n	8001432 <EXIT+0x716>
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<4);}
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4a2d      	ldr	r2, [pc, #180]	; (8001238 <EXIT+0x51c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	f040 8154 	bne.w	8001432 <EXIT+0x716>
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <EXIT+0x520>)
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	4a2b      	ldr	r2, [pc, #172]	; (800123c <EXIT+0x520>)
 8001190:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001194:	6113      	str	r3, [r2, #16]
			break;
 8001196:	e14c      	b.n	8001432 <EXIT+0x716>
		case pin10:
			AFIO->EXTICR[2] &=~(0b1111<<8);
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <EXIT+0x520>)
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	4a27      	ldr	r2, [pc, #156]	; (800123c <EXIT+0x520>)
 800119e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011a2:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR[2] &=~(0b1111<<8);}
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <EXIT+0x524>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d106      	bne.n	80011ba <EXIT+0x49e>
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <EXIT+0x520>)
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <EXIT+0x520>)
 80011b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80011b6:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<8);}

			break;
 80011b8:	e13d      	b.n	8001436 <EXIT+0x71a>
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<8);}
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4a21      	ldr	r2, [pc, #132]	; (8001244 <EXIT+0x528>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d106      	bne.n	80011d0 <EXIT+0x4b4>
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <EXIT+0x520>)
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	4a1d      	ldr	r2, [pc, #116]	; (800123c <EXIT+0x520>)
 80011c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011cc:	6113      	str	r3, [r2, #16]
			break;
 80011ce:	e132      	b.n	8001436 <EXIT+0x71a>
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<8);}
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4a1d      	ldr	r2, [pc, #116]	; (8001248 <EXIT+0x52c>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d106      	bne.n	80011e6 <EXIT+0x4ca>
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <EXIT+0x520>)
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <EXIT+0x520>)
 80011de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e2:	6113      	str	r3, [r2, #16]
			break;
 80011e4:	e127      	b.n	8001436 <EXIT+0x71a>
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<8);}
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <EXIT+0x51c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	f040 8123 	bne.w	8001436 <EXIT+0x71a>
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <EXIT+0x520>)
 80011f2:	691b      	ldr	r3, [r3, #16]
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <EXIT+0x520>)
 80011f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80011fa:	6113      	str	r3, [r2, #16]
			break;
 80011fc:	e11b      	b.n	8001436 <EXIT+0x71a>
		case pin11:
			AFIO->EXTICR[2] &=~(0b1111<<12);
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <EXIT+0x520>)
 8001200:	691b      	ldr	r3, [r3, #16]
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <EXIT+0x520>)
 8001204:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001208:	6113      	str	r3, [r2, #16]
			if(PORTx==GPIOA)     {AFIO->EXTICR[2] &=~(0b1111<<12);}
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <EXIT+0x524>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d106      	bne.n	8001220 <EXIT+0x504>
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <EXIT+0x520>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <EXIT+0x520>)
 8001218:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800121c:	6113      	str	r3, [r2, #16]
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<12);}

			break;
 800121e:	e10c      	b.n	800143a <EXIT+0x71e>
			else if(PORTx==GPIOB){AFIO->EXTICR[2] |= (0b0001<<12);}
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <EXIT+0x528>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d111      	bne.n	800124c <EXIT+0x530>
 8001228:	4b04      	ldr	r3, [pc, #16]	; (800123c <EXIT+0x520>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a03      	ldr	r2, [pc, #12]	; (800123c <EXIT+0x520>)
 800122e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001232:	6113      	str	r3, [r2, #16]
			break;
 8001234:	e101      	b.n	800143a <EXIT+0x71e>
 8001236:	bf00      	nop
 8001238:	40011400 	.word	0x40011400
 800123c:	40010000 	.word	0x40010000
 8001240:	40010800 	.word	0x40010800
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011000 	.word	0x40011000
			else if(PORTx==GPIOC){AFIO->EXTICR[2] |= (0b0010<<12);}
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4a98      	ldr	r2, [pc, #608]	; (80014b0 <EXIT+0x794>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d106      	bne.n	8001262 <EXIT+0x546>
 8001254:	4b97      	ldr	r3, [pc, #604]	; (80014b4 <EXIT+0x798>)
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	4a96      	ldr	r2, [pc, #600]	; (80014b4 <EXIT+0x798>)
 800125a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800125e:	6113      	str	r3, [r2, #16]
			break;
 8001260:	e0eb      	b.n	800143a <EXIT+0x71e>
			else if(PORTx==GPIOD){AFIO->EXTICR[2] |= (0b0011<<12);}
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4a94      	ldr	r2, [pc, #592]	; (80014b8 <EXIT+0x79c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	f040 80e7 	bne.w	800143a <EXIT+0x71e>
 800126c:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <EXIT+0x798>)
 800126e:	691b      	ldr	r3, [r3, #16]
 8001270:	4a90      	ldr	r2, [pc, #576]	; (80014b4 <EXIT+0x798>)
 8001272:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001276:	6113      	str	r3, [r2, #16]
			break;
 8001278:	e0df      	b.n	800143a <EXIT+0x71e>
			//			0000: PA[x] pin
			//			0001: PB[x] pin
			//			0010: PC[x] pin
			//			0011: PD[x] pin
		case pin12:
			AFIO->EXTICR[3] &=~(0b1111<<0);
 800127a:	4b8e      	ldr	r3, [pc, #568]	; (80014b4 <EXIT+0x798>)
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	4a8d      	ldr	r2, [pc, #564]	; (80014b4 <EXIT+0x798>)
 8001280:	f023 030f 	bic.w	r3, r3, #15
 8001284:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR[3] &=~(0b1111<<0);}
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4a8c      	ldr	r2, [pc, #560]	; (80014bc <EXIT+0x7a0>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d106      	bne.n	800129c <EXIT+0x580>
 800128e:	4b89      	ldr	r3, [pc, #548]	; (80014b4 <EXIT+0x798>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	4a88      	ldr	r2, [pc, #544]	; (80014b4 <EXIT+0x798>)
 8001294:	f023 030f 	bic.w	r3, r3, #15
 8001298:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<0);}
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<0);}
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<0);}

			break;
 800129a:	e0d0      	b.n	800143e <EXIT+0x722>
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<0);}
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4a88      	ldr	r2, [pc, #544]	; (80014c0 <EXIT+0x7a4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d106      	bne.n	80012b2 <EXIT+0x596>
 80012a4:	4b83      	ldr	r3, [pc, #524]	; (80014b4 <EXIT+0x798>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	4a82      	ldr	r2, [pc, #520]	; (80014b4 <EXIT+0x798>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6153      	str	r3, [r2, #20]
			break;
 80012b0:	e0c5      	b.n	800143e <EXIT+0x722>
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<0);}
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4a7e      	ldr	r2, [pc, #504]	; (80014b0 <EXIT+0x794>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d106      	bne.n	80012c8 <EXIT+0x5ac>
 80012ba:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <EXIT+0x798>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	4a7d      	ldr	r2, [pc, #500]	; (80014b4 <EXIT+0x798>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6153      	str	r3, [r2, #20]
			break;
 80012c6:	e0ba      	b.n	800143e <EXIT+0x722>
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<0);}
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4a7b      	ldr	r2, [pc, #492]	; (80014b8 <EXIT+0x79c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	f040 80b6 	bne.w	800143e <EXIT+0x722>
 80012d2:	4b78      	ldr	r3, [pc, #480]	; (80014b4 <EXIT+0x798>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4a77      	ldr	r2, [pc, #476]	; (80014b4 <EXIT+0x798>)
 80012d8:	f043 0303 	orr.w	r3, r3, #3
 80012dc:	6153      	str	r3, [r2, #20]
			break;
 80012de:	e0ae      	b.n	800143e <EXIT+0x722>
		case pin13:
			AFIO->EXTICR[3] &=~(0b1111<<4);
 80012e0:	4b74      	ldr	r3, [pc, #464]	; (80014b4 <EXIT+0x798>)
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	4a73      	ldr	r2, [pc, #460]	; (80014b4 <EXIT+0x798>)
 80012e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012ea:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR[3] &=~(0b1111<<4);}
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4a73      	ldr	r2, [pc, #460]	; (80014bc <EXIT+0x7a0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d106      	bne.n	8001302 <EXIT+0x5e6>
 80012f4:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <EXIT+0x798>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	4a6e      	ldr	r2, [pc, #440]	; (80014b4 <EXIT+0x798>)
 80012fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80012fe:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<4);}
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<4);}
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<4);}

			break;
 8001300:	e09f      	b.n	8001442 <EXIT+0x726>
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<4);}
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4a6e      	ldr	r2, [pc, #440]	; (80014c0 <EXIT+0x7a4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d106      	bne.n	8001318 <EXIT+0x5fc>
 800130a:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <EXIT+0x798>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	4a69      	ldr	r2, [pc, #420]	; (80014b4 <EXIT+0x798>)
 8001310:	f043 0310 	orr.w	r3, r3, #16
 8001314:	6153      	str	r3, [r2, #20]
			break;
 8001316:	e094      	b.n	8001442 <EXIT+0x726>
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<4);}
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4a65      	ldr	r2, [pc, #404]	; (80014b0 <EXIT+0x794>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d106      	bne.n	800132e <EXIT+0x612>
 8001320:	4b64      	ldr	r3, [pc, #400]	; (80014b4 <EXIT+0x798>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4a63      	ldr	r2, [pc, #396]	; (80014b4 <EXIT+0x798>)
 8001326:	f043 0320 	orr.w	r3, r3, #32
 800132a:	6153      	str	r3, [r2, #20]
			break;
 800132c:	e089      	b.n	8001442 <EXIT+0x726>
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<4);}
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <EXIT+0x79c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	f040 8085 	bne.w	8001442 <EXIT+0x726>
 8001338:	4b5e      	ldr	r3, [pc, #376]	; (80014b4 <EXIT+0x798>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	4a5d      	ldr	r2, [pc, #372]	; (80014b4 <EXIT+0x798>)
 800133e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001342:	6153      	str	r3, [r2, #20]
			break;
 8001344:	e07d      	b.n	8001442 <EXIT+0x726>
		case pin14:
			AFIO->EXTICR[3] &=~(0b1111<<8);
 8001346:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <EXIT+0x798>)
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	4a5a      	ldr	r2, [pc, #360]	; (80014b4 <EXIT+0x798>)
 800134c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001350:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR[3] &=~(0b1111<<8);}
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	4a59      	ldr	r2, [pc, #356]	; (80014bc <EXIT+0x7a0>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d106      	bne.n	8001368 <EXIT+0x64c>
 800135a:	4b56      	ldr	r3, [pc, #344]	; (80014b4 <EXIT+0x798>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a55      	ldr	r2, [pc, #340]	; (80014b4 <EXIT+0x798>)
 8001360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001364:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<8);}
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<8);}
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<8);}

			break;
 8001366:	e06e      	b.n	8001446 <EXIT+0x72a>
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<8);}
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4a55      	ldr	r2, [pc, #340]	; (80014c0 <EXIT+0x7a4>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d106      	bne.n	800137e <EXIT+0x662>
 8001370:	4b50      	ldr	r3, [pc, #320]	; (80014b4 <EXIT+0x798>)
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	4a4f      	ldr	r2, [pc, #316]	; (80014b4 <EXIT+0x798>)
 8001376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800137a:	6153      	str	r3, [r2, #20]
			break;
 800137c:	e063      	b.n	8001446 <EXIT+0x72a>
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<8);}
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	4a4b      	ldr	r2, [pc, #300]	; (80014b0 <EXIT+0x794>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d106      	bne.n	8001394 <EXIT+0x678>
 8001386:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <EXIT+0x798>)
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	4a4a      	ldr	r2, [pc, #296]	; (80014b4 <EXIT+0x798>)
 800138c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001390:	6153      	str	r3, [r2, #20]
			break;
 8001392:	e058      	b.n	8001446 <EXIT+0x72a>
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<8);}
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4a48      	ldr	r2, [pc, #288]	; (80014b8 <EXIT+0x79c>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d154      	bne.n	8001446 <EXIT+0x72a>
 800139c:	4b45      	ldr	r3, [pc, #276]	; (80014b4 <EXIT+0x798>)
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	4a44      	ldr	r2, [pc, #272]	; (80014b4 <EXIT+0x798>)
 80013a2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80013a6:	6153      	str	r3, [r2, #20]
			break;
 80013a8:	e04d      	b.n	8001446 <EXIT+0x72a>
		case pin15:
			AFIO->EXTICR[3] &=~(0b1111<<12);
 80013aa:	4b42      	ldr	r3, [pc, #264]	; (80014b4 <EXIT+0x798>)
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	4a41      	ldr	r2, [pc, #260]	; (80014b4 <EXIT+0x798>)
 80013b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80013b4:	6153      	str	r3, [r2, #20]
			if(PORTx==GPIOA)     {AFIO->EXTICR[3] &=~(0b1111<<12);}
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4a40      	ldr	r2, [pc, #256]	; (80014bc <EXIT+0x7a0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d106      	bne.n	80013cc <EXIT+0x6b0>
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <EXIT+0x798>)
 80013c0:	695b      	ldr	r3, [r3, #20]
 80013c2:	4a3c      	ldr	r2, [pc, #240]	; (80014b4 <EXIT+0x798>)
 80013c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80013c8:	6153      	str	r3, [r2, #20]
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<12);}
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<12);}
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<12);}

			break;
 80013ca:	e03e      	b.n	800144a <EXIT+0x72e>
			else if(PORTx==GPIOB){AFIO->EXTICR[3] |= (0b0001<<12);}
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4a3c      	ldr	r2, [pc, #240]	; (80014c0 <EXIT+0x7a4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d106      	bne.n	80013e2 <EXIT+0x6c6>
 80013d4:	4b37      	ldr	r3, [pc, #220]	; (80014b4 <EXIT+0x798>)
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	4a36      	ldr	r2, [pc, #216]	; (80014b4 <EXIT+0x798>)
 80013da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013de:	6153      	str	r3, [r2, #20]
			break;
 80013e0:	e033      	b.n	800144a <EXIT+0x72e>
			else if(PORTx==GPIOC){AFIO->EXTICR[3] |= (0b0010<<12);}
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	4a32      	ldr	r2, [pc, #200]	; (80014b0 <EXIT+0x794>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d106      	bne.n	80013f8 <EXIT+0x6dc>
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <EXIT+0x798>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4a31      	ldr	r2, [pc, #196]	; (80014b4 <EXIT+0x798>)
 80013f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013f4:	6153      	str	r3, [r2, #20]
			break;
 80013f6:	e028      	b.n	800144a <EXIT+0x72e>
			else if(PORTx==GPIOD){AFIO->EXTICR[3] |= (0b0011<<12);}
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4a2f      	ldr	r2, [pc, #188]	; (80014b8 <EXIT+0x79c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d124      	bne.n	800144a <EXIT+0x72e>
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <EXIT+0x798>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	4a2b      	ldr	r2, [pc, #172]	; (80014b4 <EXIT+0x798>)
 8001406:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800140a:	6153      	str	r3, [r2, #20]
			break;
 800140c:	e01d      	b.n	800144a <EXIT+0x72e>
			break;
 800140e:	bf00      	nop
 8001410:	e01c      	b.n	800144c <EXIT+0x730>
			break;
 8001412:	bf00      	nop
 8001414:	e01a      	b.n	800144c <EXIT+0x730>
			break;
 8001416:	bf00      	nop
 8001418:	e018      	b.n	800144c <EXIT+0x730>
			break;
 800141a:	bf00      	nop
 800141c:	e016      	b.n	800144c <EXIT+0x730>
			break;
 800141e:	bf00      	nop
 8001420:	e014      	b.n	800144c <EXIT+0x730>
			break;
 8001422:	bf00      	nop
 8001424:	e012      	b.n	800144c <EXIT+0x730>
			break;
 8001426:	bf00      	nop
 8001428:	e010      	b.n	800144c <EXIT+0x730>
			break;
 800142a:	bf00      	nop
 800142c:	e00e      	b.n	800144c <EXIT+0x730>
			break;
 800142e:	bf00      	nop
 8001430:	e00c      	b.n	800144c <EXIT+0x730>
			break;
 8001432:	bf00      	nop
 8001434:	e00a      	b.n	800144c <EXIT+0x730>
			break;
 8001436:	bf00      	nop
 8001438:	e008      	b.n	800144c <EXIT+0x730>
			break;
 800143a:	bf00      	nop
 800143c:	e006      	b.n	800144c <EXIT+0x730>
			break;
 800143e:	bf00      	nop
 8001440:	e004      	b.n	800144c <EXIT+0x730>
			break;
 8001442:	bf00      	nop
 8001444:	e002      	b.n	800144c <EXIT+0x730>
			break;
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <EXIT+0x730>
			break;
 800144a:	bf00      	nop
		}
	//================================================
	//3- Update Rising or Falling Register
	EXTI->RTSR &=~(1<<pin);
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <EXIT+0x7a8>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	897a      	ldrh	r2, [r7, #10]
 8001452:	2101      	movs	r1, #1
 8001454:	fa01 f202 	lsl.w	r2, r1, r2
 8001458:	43d2      	mvns	r2, r2
 800145a:	4611      	mov	r1, r2
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <EXIT+0x7a8>)
 800145e:	400b      	ands	r3, r1
 8001460:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<<pin);
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <EXIT+0x7a8>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	897a      	ldrh	r2, [r7, #10]
 8001468:	2101      	movs	r1, #1
 800146a:	fa01 f202 	lsl.w	r2, r1, r2
 800146e:	43d2      	mvns	r2, r2
 8001470:	4611      	mov	r1, r2
 8001472:	4a14      	ldr	r2, [pc, #80]	; (80014c4 <EXIT+0x7a8>)
 8001474:	400b      	ands	r3, r1
 8001476:	60d3      	str	r3, [r2, #12]
	if(triggercase == EXTI_Trigger_Rising){
 8001478:	893b      	ldrh	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10a      	bne.n	8001494 <EXIT+0x778>
		EXTI->RTSR |= (1<<pin);
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <EXIT+0x7a8>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	897a      	ldrh	r2, [r7, #10]
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	4611      	mov	r1, r2
 800148c:	4a0d      	ldr	r2, [pc, #52]	; (80014c4 <EXIT+0x7a8>)
 800148e:	430b      	orrs	r3, r1
 8001490:	6093      	str	r3, [r2, #8]
 8001492:	e02d      	b.n	80014f0 <EXIT+0x7d4>
	}
	else if(triggercase == EXTI_Trigger_Falling){
 8001494:	893b      	ldrh	r3, [r7, #8]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d116      	bne.n	80014c8 <EXIT+0x7ac>
		EXTI->FTSR |= (1<<pin);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <EXIT+0x7a8>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	897a      	ldrh	r2, [r7, #10]
 80014a0:	2101      	movs	r1, #1
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	4611      	mov	r1, r2
 80014a8:	4a06      	ldr	r2, [pc, #24]	; (80014c4 <EXIT+0x7a8>)
 80014aa:	430b      	orrs	r3, r1
 80014ac:	60d3      	str	r3, [r2, #12]
 80014ae:	e01f      	b.n	80014f0 <EXIT+0x7d4>
 80014b0:	40011000 	.word	0x40011000
 80014b4:	40010000 	.word	0x40010000
 80014b8:	40011400 	.word	0x40011400
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40010400 	.word	0x40010400
	}
	else{
		EXTI->RTSR |= (1<<pin);
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <EXIT+0x804>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	897a      	ldrh	r2, [r7, #10]
 80014ce:	2101      	movs	r1, #1
 80014d0:	fa01 f202 	lsl.w	r2, r1, r2
 80014d4:	4611      	mov	r1, r2
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <EXIT+0x804>)
 80014d8:	430b      	orrs	r3, r1
 80014da:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1<<pin);
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <EXIT+0x804>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	897a      	ldrh	r2, [r7, #10]
 80014e2:	2101      	movs	r1, #1
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	4611      	mov	r1, r2
 80014ea:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <EXIT+0x804>)
 80014ec:	430b      	orrs	r3, r1
 80014ee:	60d3      	str	r3, [r2, #12]
	}
	//4- Update IRQ Handling callback
	GP_IRQ_Callback[pin] =function_addres;
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	490c      	ldr	r1, [pc, #48]	; (8001524 <EXIT+0x808>)
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


	EXTI->IMR |=(1<<pin);
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <EXIT+0x804>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	897a      	ldrh	r2, [r7, #10]
 8001500:	2101      	movs	r1, #1
 8001502:	fa01 f202 	lsl.w	r2, r1, r2
 8001506:	4611      	mov	r1, r2
 8001508:	4a05      	ldr	r2, [pc, #20]	; (8001520 <EXIT+0x804>)
 800150a:	430b      	orrs	r3, r1
 800150c:	6013      	str	r3, [r2, #0]

	Enable_NVIC(pin);
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fb9d 	bl	8000c50 <Enable_NVIC>
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40010400 	.word	0x40010400
 8001524:	20000078 	.word	0x20000078

08001528 <EXTI0_IRQHandler>:



void EXTI0_IRQHandler(void){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	// clear bit in pending register (EXTI_PR)
	EXTI->PR |= (1<<0);
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <EXTI0_IRQHandler+0x1c>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <EXTI0_IRQHandler+0x1c>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[0]();
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <EXTI0_IRQHandler+0x20>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4798      	blx	r3
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40010400 	.word	0x40010400
 8001548:	20000078 	.word	0x20000078

0800154c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void){
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<1);
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <EXTI1_IRQHandler+0x1c>)
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	4a04      	ldr	r2, [pc, #16]	; (8001568 <EXTI1_IRQHandler+0x1c>)
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[1]();
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <EXTI1_IRQHandler+0x20>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4798      	blx	r3

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40010400 	.word	0x40010400
 800156c:	20000078 	.word	0x20000078

08001570 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void){
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<2);
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <EXTI2_IRQHandler+0x1c>)
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <EXTI2_IRQHandler+0x1c>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[2]();
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <EXTI2_IRQHandler+0x20>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	4798      	blx	r3
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40010400 	.word	0x40010400
 8001590:	20000078 	.word	0x20000078

08001594 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void){
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<3);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <EXTI3_IRQHandler+0x1c>)
 800159a:	695b      	ldr	r3, [r3, #20]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <EXTI3_IRQHandler+0x1c>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[3]();
 80015a4:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <EXTI3_IRQHandler+0x20>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4798      	blx	r3
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40010400 	.word	0x40010400
 80015b4:	20000078 	.word	0x20000078

080015b8 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	EXTI->PR |= (1<<4);
 80015bc:	4b05      	ldr	r3, [pc, #20]	; (80015d4 <EXTI4_IRQHandler+0x1c>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <EXTI4_IRQHandler+0x1c>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6153      	str	r3, [r2, #20]
	GP_IRQ_Callback[4]();
 80015c8:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <EXTI4_IRQHandler+0x20>)
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	4798      	blx	r3
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010400 	.word	0x40010400
 80015d8:	20000078 	.word	0x20000078

080015dc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); GP_IRQ_Callback[5]();  }
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f003 0320 	and.w	r3, r3, #32
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d008      	beq.n	80015fe <EXTI9_5_IRQHandler+0x22>
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 80015f2:	f043 0320 	orr.w	r3, r3, #32
 80015f6:	6153      	str	r3, [r2, #20]
 80015f8:	4b21      	ldr	r3, [pc, #132]	; (8001680 <EXTI9_5_IRQHandler+0xa4>)
 80015fa:	695b      	ldr	r3, [r3, #20]
 80015fc:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); GP_IRQ_Callback[6]();  }
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001606:	2b00      	cmp	r3, #0
 8001608:	d008      	beq.n	800161c <EXTI9_5_IRQHandler+0x40>
 800160a:	4b1c      	ldr	r3, [pc, #112]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4a1b      	ldr	r2, [pc, #108]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	6153      	str	r3, [r2, #20]
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <EXTI9_5_IRQHandler+0xa4>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); GP_IRQ_Callback[7]();  }
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <EXTI9_5_IRQHandler+0x5e>
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	4a13      	ldr	r2, [pc, #76]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800162e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001632:	6153      	str	r3, [r2, #20]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <EXTI9_5_IRQHandler+0xa4>)
 8001636:	69db      	ldr	r3, [r3, #28]
 8001638:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); GP_IRQ_Callback[8]();  }
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <EXTI9_5_IRQHandler+0x7c>
 8001646:	4b0d      	ldr	r3, [pc, #52]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	4a0c      	ldr	r2, [pc, #48]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800164c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001650:	6153      	str	r3, [r2, #20]
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <EXTI9_5_IRQHandler+0xa4>)
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); GP_IRQ_Callback[9]();  }
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001660:	2b00      	cmp	r3, #0
 8001662:	d008      	beq.n	8001676 <EXTI9_5_IRQHandler+0x9a>
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <EXTI9_5_IRQHandler+0xa0>)
 800166a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166e:	6153      	str	r3, [r2, #20]
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <EXTI9_5_IRQHandler+0xa4>)
 8001672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001674:	4798      	blx	r3
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40010400 	.word	0x40010400
 8001680:	20000078 	.word	0x20000078

08001684 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void){
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); GP_IRQ_Callback[10]();  }
 8001688:	4b2d      	ldr	r3, [pc, #180]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001690:	2b00      	cmp	r3, #0
 8001692:	d008      	beq.n	80016a6 <EXTI15_10_IRQHandler+0x22>
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 8001696:	695b      	ldr	r3, [r3, #20]
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 800169a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800169e:	6153      	str	r3, [r2, #20]
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <EXTI15_10_IRQHandler+0xc0>)
 80016a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a4:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); GP_IRQ_Callback[11]();  }
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <EXTI15_10_IRQHandler+0x40>
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <EXTI15_10_IRQHandler+0xc0>)
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); GP_IRQ_Callback[12]();  }
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <EXTI15_10_IRQHandler+0x5e>
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016da:	6153      	str	r3, [r2, #20]
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <EXTI15_10_IRQHandler+0xc0>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); GP_IRQ_Callback[13]();  }
 80016e2:	4b17      	ldr	r3, [pc, #92]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d008      	beq.n	8001700 <EXTI15_10_IRQHandler+0x7c>
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 80016f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016f8:	6153      	str	r3, [r2, #20]
 80016fa:	4b12      	ldr	r3, [pc, #72]	; (8001744 <EXTI15_10_IRQHandler+0xc0>)
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); GP_IRQ_Callback[14]();  }
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 8001702:	695b      	ldr	r3, [r3, #20]
 8001704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <EXTI15_10_IRQHandler+0x9a>
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 8001712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001716:	6153      	str	r3, [r2, #20]
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <EXTI15_10_IRQHandler+0xc0>)
 800171a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800171c:	4798      	blx	r3
	if(EXTI->PR & (1<<15)) {EXTI->PR |= (1<<15); GP_IRQ_Callback[15]();  }
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <EXTI15_10_IRQHandler+0xb8>
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <EXTI15_10_IRQHandler+0xbc>)
 8001730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001734:	6153      	str	r3, [r2, #20]
 8001736:	4b03      	ldr	r3, [pc, #12]	; (8001744 <EXTI15_10_IRQHandler+0xc0>)
 8001738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173a:	4798      	blx	r3

}
 800173c:	bf00      	nop
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40010400 	.word	0x40010400
 8001744:	20000078 	.word	0x20000078

08001748 <MCAL_speed_init>:
 *      Author: mo
 */

#include "stm32_speed_DRIVER.h"

void MCAL_speed_init(uint8_t CLK_SORC,uint8_t mood){
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	460a      	mov	r2, r1
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
	if(CLK_SORC==CLK_SORC_IN_CLK8MHz){
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d139      	bne.n	80017d2 <MCAL_speed_init+0x8a>
		if(mood==mood_FAST_MOOD_36MHzCORE){
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d175      	bne.n	8001850 <MCAL_speed_init+0x108>
			//			0: HSI oscillator clock / 2 selected as PLL input clock
			//			1: Clock from PREDIV1 selected as PLL input clock
			//			Note: When changing the main PLL’s entry clock source, the original clock source must be switched
			//			off only after the selection of the new clock source.

			RCC->CFGR &=~(1<<16);//0: HSI oscillator clock / 2 selected as PLL input clock
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <MCAL_speed_init+0x114>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a3c      	ldr	r2, [pc, #240]	; (800185c <MCAL_speed_init+0x114>)
 800176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800176e:	6053      	str	r3, [r2, #4]
			//			10xx: Reserved
			//			1100: Reserved
			//			1101: PLL input clock x 6.5
			//			111x: Reserved

			RCC->CFGR &=~(0b1111<<18);
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <MCAL_speed_init+0x114>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a39      	ldr	r2, [pc, #228]	; (800185c <MCAL_speed_init+0x114>)
 8001776:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 800177a:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b0111<<18);//0111: PLL input clock x 9
 800177c:	4b37      	ldr	r3, [pc, #220]	; (800185c <MCAL_speed_init+0x114>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	4a36      	ldr	r2, [pc, #216]	; (800185c <MCAL_speed_init+0x114>)
 8001782:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001786:	6053      	str	r3, [r2, #4]
			RCC->CR |=(1<<24);//pll on
 8001788:	4b34      	ldr	r3, [pc, #208]	; (800185c <MCAL_speed_init+0x114>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a33      	ldr	r2, [pc, #204]	; (800185c <MCAL_speed_init+0x114>)
 800178e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001792:	6013      	str	r3, [r2, #0]
			//00: HSI selected as system clock
			//01: HSE selected as system clock
			//10: PLL selected as system clock
			//11: Not allowed

			RCC->CFGR &=~(0b11<<0);
 8001794:	4b31      	ldr	r3, [pc, #196]	; (800185c <MCAL_speed_init+0x114>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a30      	ldr	r2, [pc, #192]	; (800185c <MCAL_speed_init+0x114>)
 800179a:	f023 0303 	bic.w	r3, r3, #3
 800179e:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b10<<0);//10: PLL selected as system clock
 80017a0:	4b2e      	ldr	r3, [pc, #184]	; (800185c <MCAL_speed_init+0x114>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4a2d      	ldr	r2, [pc, #180]	; (800185c <MCAL_speed_init+0x114>)
 80017a6:	f043 0302 	orr.w	r3, r3, #2
 80017aa:	6053      	str	r3, [r2, #4]
			//			1011: SYSCLK divided by 16
			//			1100: SYSCLK divided by 64
			//			1101: SYSCLK divided by 128
			//			1110: SYSCLK divided by 256
			//			1111: SYSCLK divided by 512
			RCC->CFGR &=~(0b1111<<4);//0xxx: SYSCLK not divided
 80017ac:	4b2b      	ldr	r3, [pc, #172]	; (800185c <MCAL_speed_init+0x114>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4a2a      	ldr	r2, [pc, #168]	; (800185c <MCAL_speed_init+0x114>)
 80017b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017b6:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->CFGR &=~(0b111<<11);//0xx: HCLK not divided
 80017b8:	4b28      	ldr	r3, [pc, #160]	; (800185c <MCAL_speed_init+0x114>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a27      	ldr	r2, [pc, #156]	; (800185c <MCAL_speed_init+0x114>)
 80017be:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80017c2:	6053      	str	r3, [r2, #4]
			//			0xx: HCLK not divided
			//			100: HCLK divided by 2
			//			101: HCLK divided by 4
			//			110: HCLK divided by 8
			//			111: HCLK divided by 16
			RCC->CFGR &=~(0b111<<8);//0xx: HCLK not divided
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <MCAL_speed_init+0x114>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <MCAL_speed_init+0x114>)
 80017ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017ce:	6053      	str	r3, [r2, #4]

		}
	}


}
 80017d0:	e03e      	b.n	8001850 <MCAL_speed_init+0x108>
		if(mood==mood_FAST_MOOD_72MHzCORE36MHzpref){
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d13b      	bne.n	8001850 <MCAL_speed_init+0x108>
			RCC->CR &=~(1<<18);
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <MCAL_speed_init+0x114>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1f      	ldr	r2, [pc, #124]	; (800185c <MCAL_speed_init+0x114>)
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]
			RCC->CR|=(1<<16);
 80017e4:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MCAL_speed_init+0x114>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1c      	ldr	r2, [pc, #112]	; (800185c <MCAL_speed_init+0x114>)
 80017ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ee:	6013      	str	r3, [r2, #0]
			RCC->CFGR|=(1<<16);
 80017f0:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MCAL_speed_init+0x114>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <MCAL_speed_init+0x114>)
 80017f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fa:	6053      	str	r3, [r2, #4]
			RCC->CFGR|=(0b0111<<18);//0111: PLL input clock x 9
 80017fc:	4b17      	ldr	r3, [pc, #92]	; (800185c <MCAL_speed_init+0x114>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	4a16      	ldr	r2, [pc, #88]	; (800185c <MCAL_speed_init+0x114>)
 8001802:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 8001806:	6053      	str	r3, [r2, #4]
			RCC->CR |=(1<<24);//pll on
 8001808:	4b14      	ldr	r3, [pc, #80]	; (800185c <MCAL_speed_init+0x114>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a13      	ldr	r2, [pc, #76]	; (800185c <MCAL_speed_init+0x114>)
 800180e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001812:	6013      	str	r3, [r2, #0]
			RCC->CFGR &=~(0b11<<0);
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <MCAL_speed_init+0x114>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	4a10      	ldr	r2, [pc, #64]	; (800185c <MCAL_speed_init+0x114>)
 800181a:	f023 0303 	bic.w	r3, r3, #3
 800181e:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b10<<0);//10: PLL selected as system clock
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MCAL_speed_init+0x114>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	4a0d      	ldr	r2, [pc, #52]	; (800185c <MCAL_speed_init+0x114>)
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	6053      	str	r3, [r2, #4]
			RCC->CFGR |=(0b1000<<4);//1000: SYSCLK divided by 2
 800182c:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MCAL_speed_init+0x114>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <MCAL_speed_init+0x114>)
 8001832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001836:	6053      	str	r3, [r2, #4]
			RCC->CFGR &=~(0b111<<11);//100: HCLK divided by 2
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <MCAL_speed_init+0x114>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <MCAL_speed_init+0x114>)
 800183e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001842:	6053      	str	r3, [r2, #4]
			RCC->CFGR &=~(0b111<<8);//100: HCLK divided by 2
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <MCAL_speed_init+0x114>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a04      	ldr	r2, [pc, #16]	; (800185c <MCAL_speed_init+0x114>)
 800184a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800184e:	6053      	str	r3, [r2, #4]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bc80      	pop	{r7}
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	40021000 	.word	0x40021000

08001860 <PWM>:
//==================================== stepper motor
static uint32_t stepper_steps=0;
static uint8_t stepper_flage=0;
//===============================================================================================

void PWM(TIMERS_typeDef* TIMERx,uint32_t CH,uint32_t duty_cycle,uint32_t freq,uint32_t clk){
 8001860:	b580      	push	{r7, lr}
 8001862:	b088      	sub	sp, #32
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]

	TIMERx->TIMx_CR1 &=~(1<<0);//Counter disabled
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 0201 	bic.w	r2, r3, #1
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	601a      	str	r2, [r3, #0]


	char user_flage=1;
 800187a:	2301      	movs	r3, #1
 800187c:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 800187e:	2300      	movs	r3, #0
 8001880:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8001882:	2301      	movs	r3, #1
 8001884:	617b      	str	r3, [r7, #20]

	while(user_flage==1){
 8001886:	e011      	b.n	80018ac <PWM+0x4c>
		user_top = (clk)/(freq * user_pre );
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	fb02 f303 	mul.w	r3, r2, r3
 8001890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800189e:	d303      	bcc.n	80018a8 <PWM+0x48>
			user_pre+=2;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	3302      	adds	r3, #2
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e001      	b.n	80018ac <PWM+0x4c>
		}
		else{
			user_flage=0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 80018ac:	7ffb      	ldrb	r3, [r7, #31]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d0ea      	beq.n	8001888 <PWM+0x28>
	}

	//====================TIM1===================


	if(TIMERx==TIM1){
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4a8e      	ldr	r2, [pc, #568]	; (8001af0 <PWM+0x290>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	f040 80d7 	bne.w	8001a6a <PWM+0x20a>
		TIMER1_CLOCK_Enable();//enable timer1 clock
 80018bc:	4b8d      	ldr	r3, [pc, #564]	; (8001af4 <PWM+0x294>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a8c      	ldr	r2, [pc, #560]	; (8001af4 <PWM+0x294>)
 80018c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018c6:	6193      	str	r3, [r2, #24]
		GPIOA_CLOCK_ENABLE;//enable porta clock
 80018c8:	4b8a      	ldr	r3, [pc, #552]	; (8001af4 <PWM+0x294>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a89      	ldr	r2, [pc, #548]	; (8001af4 <PWM+0x294>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 80018d4:	4b87      	ldr	r3, [pc, #540]	; (8001af4 <PWM+0x294>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a86      	ldr	r2, [pc, #536]	; (8001af4 <PWM+0x294>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6193      	str	r3, [r2, #24]
		if(CH==CH_1){
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d12d      	bne.n	8001942 <PWM+0xe2>
			pinmode(GPIOA, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80018e6:	220b      	movs	r2, #11
 80018e8:	2108      	movs	r1, #8
 80018ea:	4883      	ldr	r0, [pc, #524]	; (8001af8 <PWM+0x298>)
 80018ec:	f7ff f896 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3); //Output compare 1 preload enable
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f043 0208 	orr.w	r2, r3, #8
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0); // Capture/Compare 1 output enable
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f043 0201 	orr.w	r2, r3, #1
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);//110: PWM mode 1 - In upcounting, channel 1 is active
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fb02 f303 	mul.w	r3, r2, r3
 800191c:	4a77      	ldr	r2, [pc, #476]	; (8001afc <PWM+0x29c>)
 800191e:	fba2 2303 	umull	r2, r3, r2, r3
 8001922:	099a      	lsrs	r2, r3, #6
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_BDTR |=(1<<15); // Main output enable
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b11<<0);//Update interrupt enable Capture/Compare 1 interrupt enable
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	f043 0203 	orr.w	r2, r3, #3
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	e2f6      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d12d      	bne.n	80019a4 <PWM+0x144>
			pinmode(GPIOA, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001948:	220b      	movs	r2, #11
 800194a:	2109      	movs	r1, #9
 800194c:	486a      	ldr	r0, [pc, #424]	; (8001af8 <PWM+0x298>)
 800194e:	f7ff f865 	bl	8000a1c <pinmode>
			//pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	4a5f      	ldr	r2, [pc, #380]	; (8001afc <PWM+0x29c>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099a      	lsrs	r2, r3, #6
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_BDTR |=(1<<15);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	f043 0205 	orr.w	r2, r3, #5
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	e2c5      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d12d      	bne.n	8001a06 <PWM+0x1a6>
			pinmode(GPIOA, pin10, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 80019aa:	220b      	movs	r2, #11
 80019ac:	210a      	movs	r1, #10
 80019ae:	4852      	ldr	r0, [pc, #328]	; (8001af8 <PWM+0x298>)
 80019b0:	f7ff f834 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	f043 0208 	orr.w	r2, r3, #8
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	4a46      	ldr	r2, [pc, #280]	; (8001afc <PWM+0x29c>)
 80019e2:	fba2 2303 	umull	r2, r3, r2, r3
 80019e6:	099a      	lsrs	r2, r3, #6
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_BDTR |=(1<<15);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b1001<<0);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f043 0209 	orr.w	r2, r3, #9
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	60da      	str	r2, [r3, #12]
 8001a04:	e294      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	f040 8291 	bne.w	8001f30 <PWM+0x6d0>
			pinmode(GPIOA, pin11, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001a0e:	220b      	movs	r2, #11
 8001a10:	210b      	movs	r1, #11
 8001a12:	4839      	ldr	r0, [pc, #228]	; (8001af8 <PWM+0x298>)
 8001a14:	f7ff f802 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	69db      	ldr	r3, [r3, #28]
 8001a34:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	4a2d      	ldr	r2, [pc, #180]	; (8001afc <PWM+0x29c>)
 8001a46:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4a:	099a      	lsrs	r2, r3, #6
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_BDTR |=(1<<15);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	645a      	str	r2, [r3, #68]	; 0x44
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f043 0211 	orr.w	r2, r3, #17
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	e262      	b.n	8001f30 <PWM+0x6d0>
		}
	}

	//====================TIM2===================

	else if (TIMERx==TIM2){
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	f040 80c8 	bne.w	8001c04 <PWM+0x3a4>
		TIMER2_CLOCK_Enable();//enable timer2 clock
 8001a74:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <PWM+0x294>)
 8001a76:	69db      	ldr	r3, [r3, #28]
 8001a78:	4a1e      	ldr	r2, [pc, #120]	; (8001af4 <PWM+0x294>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	61d3      	str	r3, [r2, #28]
		GPIOA_CLOCK_ENABLE;//enable porta clock
 8001a80:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <PWM+0x294>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a1b      	ldr	r2, [pc, #108]	; (8001af4 <PWM+0x294>)
 8001a86:	f043 0304 	orr.w	r3, r3, #4
 8001a8a:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8001a8c:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <PWM+0x294>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a18      	ldr	r2, [pc, #96]	; (8001af4 <PWM+0x294>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d130      	bne.n	8001b00 <PWM+0x2a0>
			pinmode(GPIOA, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001a9e:	220b      	movs	r2, #11
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	4815      	ldr	r0, [pc, #84]	; (8001af8 <PWM+0x298>)
 8001aa4:	f7fe ffba 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f043 0208 	orr.w	r2, r3, #8
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	f043 0201 	orr.w	r2, r3, #1
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	4a09      	ldr	r2, [pc, #36]	; (8001afc <PWM+0x29c>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	099a      	lsrs	r2, r3, #6
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f043 0203 	orr.w	r2, r3, #3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	e220      	b.n	8001f30 <PWM+0x6d0>
 8001aee:	bf00      	nop
 8001af0:	40012c00 	.word	0x40012c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40010800 	.word	0x40010800
 8001afc:	10624dd3 	.word	0x10624dd3
		}
		else if(CH==CH_2){
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d127      	bne.n	8001b56 <PWM+0x2f6>
			pinmode(GPIOA, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001b06:	220b      	movs	r2, #11
 8001b08:	2101      	movs	r1, #1
 8001b0a:	488d      	ldr	r0, [pc, #564]	; (8001d40 <PWM+0x4e0>)
 8001b0c:	f7fe ff86 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f043 0210 	orr.w	r2, r3, #16
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	4a81      	ldr	r2, [pc, #516]	; (8001d44 <PWM+0x4e4>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	099a      	lsrs	r2, r3, #6
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	f043 0205 	orr.w	r2, r3, #5
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	60da      	str	r2, [r3, #12]
 8001b54:	e1ec      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	2b03      	cmp	r3, #3
 8001b5a:	d127      	bne.n	8001bac <PWM+0x34c>
			pinmode(GPIOA, pin2, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001b5c:	220b      	movs	r2, #11
 8001b5e:	2102      	movs	r1, #2
 8001b60:	4877      	ldr	r0, [pc, #476]	; (8001d40 <PWM+0x4e0>)
 8001b62:	f7fe ff5b 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f043 0208 	orr.w	r2, r3, #8
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	fb02 f303 	mul.w	r3, r2, r3
 8001b92:	4a6c      	ldr	r2, [pc, #432]	; (8001d44 <PWM+0x4e4>)
 8001b94:	fba2 2303 	umull	r2, r3, r2, r3
 8001b98:	099a      	lsrs	r2, r3, #6
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f043 0209 	orr.w	r2, r3, #9
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e1c1      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	f040 81be 	bne.w	8001f30 <PWM+0x6d0>
			pinmode(GPIOA, pin3, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001bb4:	220b      	movs	r2, #11
 8001bb6:	2103      	movs	r1, #3
 8001bb8:	4861      	ldr	r0, [pc, #388]	; (8001d40 <PWM+0x4e0>)
 8001bba:	f7fe ff2f 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	fb02 f303 	mul.w	r3, r2, r3
 8001bea:	4a56      	ldr	r2, [pc, #344]	; (8001d44 <PWM+0x4e4>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	099a      	lsrs	r2, r3, #6
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f043 0211 	orr.w	r2, r3, #17
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	e195      	b.n	8001f30 <PWM+0x6d0>
		}
	}
	//====================TIM3===================

	else if (TIMERx==TIM3){
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <PWM+0x4e8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	f040 80cf 	bne.w	8001dac <PWM+0x54c>
		TIMER3_CLOCK_Enable();//enable timer3 clock
 8001c0e:	4b4f      	ldr	r3, [pc, #316]	; (8001d4c <PWM+0x4ec>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	4a4e      	ldr	r2, [pc, #312]	; (8001d4c <PWM+0x4ec>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	61d3      	str	r3, [r2, #28]
		GPIOA_CLOCK_ENABLE;//enable porta clock
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <PWM+0x4ec>)
 8001c1c:	699b      	ldr	r3, [r3, #24]
 8001c1e:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <PWM+0x4ec>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6193      	str	r3, [r2, #24]
		GPIOB_CLOCK_ENABLE;//enable porta clock
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <PWM+0x4ec>)
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <PWM+0x4ec>)
 8001c2c:	f043 0308 	orr.w	r3, r3, #8
 8001c30:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <PWM+0x4ec>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4a45      	ldr	r2, [pc, #276]	; (8001d4c <PWM+0x4ec>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d127      	bne.n	8001c94 <PWM+0x434>
			pinmode(GPIOA, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001c44:	220b      	movs	r2, #11
 8001c46:	2106      	movs	r1, #6
 8001c48:	483d      	ldr	r0, [pc, #244]	; (8001d40 <PWM+0x4e0>)
 8001c4a:	f7fe fee7 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f043 0208 	orr.w	r2, r3, #8
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <PWM+0x4e4>)
 8001c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c80:	099a      	lsrs	r2, r3, #6
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	f043 0203 	orr.w	r2, r3, #3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	e14d      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d127      	bne.n	8001cea <PWM+0x48a>
			pinmode(GPIOA, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001c9a:	220b      	movs	r2, #11
 8001c9c:	2107      	movs	r1, #7
 8001c9e:	4828      	ldr	r0, [pc, #160]	; (8001d40 <PWM+0x4e0>)
 8001ca0:	f7fe febc 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f043 0210 	orr.w	r2, r3, #16
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	fb02 f303 	mul.w	r3, r2, r3
 8001cd0:	4a1c      	ldr	r2, [pc, #112]	; (8001d44 <PWM+0x4e4>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	099a      	lsrs	r2, r3, #6
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f043 0205 	orr.w	r2, r3, #5
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	e122      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d131      	bne.n	8001d54 <PWM+0x4f4>
			pinmode(GPIOB, pin0, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001cf0:	220b      	movs	r2, #11
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4816      	ldr	r0, [pc, #88]	; (8001d50 <PWM+0x4f0>)
 8001cf6:	f7fe fe91 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f043 0208 	orr.w	r2, r3, #8
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <PWM+0x4e4>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099a      	lsrs	r2, r3, #6
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f043 0209 	orr.w	r2, r3, #9
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	e0f7      	b.n	8001f30 <PWM+0x6d0>
 8001d40:	40010800 	.word	0x40010800
 8001d44:	10624dd3 	.word	0x10624dd3
 8001d48:	40000400 	.word	0x40000400
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40010c00 	.word	0x40010c00
		}
		else if(CH==CH_4){
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	f040 80ea 	bne.w	8001f30 <PWM+0x6d0>
			pinmode(GPIOB, pin1, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001d5c:	220b      	movs	r2, #11
 8001d5e:	2101      	movs	r1, #1
 8001d60:	4882      	ldr	r0, [pc, #520]	; (8001f6c <PWM+0x70c>)
 8001d62:	f7fe fe5b 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
 8001d76:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	fb02 f303 	mul.w	r3, r2, r3
 8001d92:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <PWM+0x710>)
 8001d94:	fba2 2303 	umull	r2, r3, r2, r3
 8001d98:	099a      	lsrs	r2, r3, #6
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	f043 0211 	orr.w	r2, r3, #17
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	e0c1      	b.n	8001f30 <PWM+0x6d0>
	}


	//====================TIM4===================

	else if (TIMERx==TIM4){
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4a71      	ldr	r2, [pc, #452]	; (8001f74 <PWM+0x714>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f040 80bd 	bne.w	8001f30 <PWM+0x6d0>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 8001db6:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <PWM+0x718>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a6f      	ldr	r2, [pc, #444]	; (8001f78 <PWM+0x718>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	61d3      	str	r3, [r2, #28]
		GPIOB_CLOCK_ENABLE;//enable porta clock
 8001dc2:	4b6d      	ldr	r3, [pc, #436]	; (8001f78 <PWM+0x718>)
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	4a6c      	ldr	r2, [pc, #432]	; (8001f78 <PWM+0x718>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6193      	str	r3, [r2, #24]
		AFIO_CLOCK_ENABLE;//enable AF io clock
 8001dce:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <PWM+0x718>)
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4a69      	ldr	r2, [pc, #420]	; (8001f78 <PWM+0x718>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6193      	str	r3, [r2, #24]

		if(CH==CH_1){
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d127      	bne.n	8001e30 <PWM+0x5d0>
			pinmode(GPIOB, pin6, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001de0:	220b      	movs	r2, #11
 8001de2:	2106      	movs	r1, #6
 8001de4:	4861      	ldr	r0, [pc, #388]	; (8001f6c <PWM+0x70c>)
 8001de6:	f7fe fe19 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<3);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	f043 0208 	orr.w	r2, r3, #8
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<0);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	f043 0201 	orr.w	r2, r3, #1
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<4);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR1=(user_top*duty_cycle/1000);//duty cycle
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	4a56      	ldr	r2, [pc, #344]	; (8001f70 <PWM+0x710>)
 8001e18:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1c:	099a      	lsrs	r2, r3, #6
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	635a      	str	r2, [r3, #52]	; 0x34
			TIMERx->TIMx_DIER |=(0b11<<0);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	f043 0203 	orr.w	r2, r3, #3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	e07f      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_2){
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d127      	bne.n	8001e86 <PWM+0x626>
			pinmode(GPIOB, pin7, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001e36:	220b      	movs	r2, #11
 8001e38:	2107      	movs	r1, #7
 8001e3a:	484c      	ldr	r0, [pc, #304]	; (8001f6c <PWM+0x70c>)
 8001e3c:	f7fe fdee 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR1 |=(1<<11);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCER |=(1<<4);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a1b      	ldr	r3, [r3, #32]
 8001e50:	f043 0210 	orr.w	r2, r3, #16
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR1 |=(0b110<<12);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	619a      	str	r2, [r3, #24]
			TIMERx->TIMx_CCR2=(user_top*duty_cycle/1000);//duty cycle
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	fb02 f303 	mul.w	r3, r2, r3
 8001e6c:	4a40      	ldr	r2, [pc, #256]	; (8001f70 <PWM+0x710>)
 8001e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e72:	099a      	lsrs	r2, r3, #6
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	639a      	str	r2, [r3, #56]	; 0x38
			TIMERx->TIMx_DIER |=(0b101<<0);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f043 0205 	orr.w	r2, r3, #5
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	e054      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_3){
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d127      	bne.n	8001edc <PWM+0x67c>
			pinmode(GPIOB, pin8, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001e8c:	220b      	movs	r2, #11
 8001e8e:	2108      	movs	r1, #8
 8001e90:	4836      	ldr	r0, [pc, #216]	; (8001f6c <PWM+0x70c>)
 8001e92:	f7fe fdc3 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<3);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f043 0208 	orr.w	r2, r3, #8
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<8);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<4);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f043 0260 	orr.w	r2, r3, #96	; 0x60
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR3=(user_top*duty_cycle/1000);//duty cycle
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	fb02 f303 	mul.w	r3, r2, r3
 8001ec2:	4a2b      	ldr	r2, [pc, #172]	; (8001f70 <PWM+0x710>)
 8001ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec8:	099a      	lsrs	r2, r3, #6
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	63da      	str	r2, [r3, #60]	; 0x3c
			TIMERx->TIMx_DIER |=(0b1001<<0);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	f043 0209 	orr.w	r2, r3, #9
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	60da      	str	r2, [r3, #12]
 8001eda:	e029      	b.n	8001f30 <PWM+0x6d0>
		}
		else if(CH==CH_4){
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d126      	bne.n	8001f30 <PWM+0x6d0>
			pinmode(GPIOB, pin9, GPIO_MODE_OUTPUT_AF_push_pull_Speed50);
 8001ee2:	220b      	movs	r2, #11
 8001ee4:	2109      	movs	r1, #9
 8001ee6:	4821      	ldr	r0, [pc, #132]	; (8001f6c <PWM+0x70c>)
 8001ee8:	f7fe fd98 	bl	8000a1c <pinmode>
			TIMERx->TIMx_CCMR2 |=(1<<11);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCER |=(1<<12);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	621a      	str	r2, [r3, #32]
			TIMERx->TIMx_CCMR2 |=(0b110<<12);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	f443 42c0 	orr.w	r2, r3, #24576	; 0x6000
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	61da      	str	r2, [r3, #28]
			TIMERx->TIMx_CCR4=(user_top*duty_cycle/1000);//duty cycle
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	4a15      	ldr	r2, [pc, #84]	; (8001f70 <PWM+0x710>)
 8001f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f1e:	099a      	lsrs	r2, r3, #6
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
			TIMERx->TIMx_DIER |=(0b10001<<0);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f043 0211 	orr.w	r2, r3, #17
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	60da      	str	r2, [r3, #12]


	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	TIMERx->TIMx_CR1 |=(1<<7);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	601a      	str	r2, [r3, #0]


	//	110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1


	TIMERx->TIMx_ARR=user_top;//frec peak value
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	62da      	str	r2, [r3, #44]	; 0x2c

	TIMERx->TIMx_PSC=(user_pre-1);//prescaller
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	1e5a      	subs	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	629a      	str	r2, [r3, #40]	; 0x28
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	TIMERx->TIMx_EGR |=(1<<0);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	f043 0201 	orr.w	r2, r3, #1
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	615a      	str	r2, [r3, #20]

	TIMERx->TIMx_CR1 |=(1<<0);//enable the timer
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	601a      	str	r2, [r3, #0]

}
 8001f62:	bf00      	nop
 8001f64:	3720      	adds	r7, #32
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40010c00 	.word	0x40010c00
 8001f70:	10624dd3 	.word	0x10624dd3
 8001f74:	40000800 	.word	0x40000800
 8001f78:	40021000 	.word	0x40021000

08001f7c <delay>:

	TIM3->TIMx_CR1 |=(1<<0);//enable the timer

}
//=======================================================================================
void delay(uint16_t time,uint8_t U,uint32_t clk){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	603a      	str	r2, [r7, #0]
 8001f86:	80fb      	strh	r3, [r7, #6]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	717b      	strb	r3, [r7, #5]

	TIMER2_CLOCK_Enable();//enable timer2 clock
 8001f8c:	4b4f      	ldr	r3, [pc, #316]	; (80020cc <delay+0x150>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	4a4e      	ldr	r2, [pc, #312]	; (80020cc <delay+0x150>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	61d3      	str	r3, [r2, #28]

	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8001f98:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <delay+0x154>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4b4c      	ldr	r3, [pc, #304]	; (80020d0 <delay+0x154>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
	///TIMERS_typeDef* TIMERx=TIM2;
	char user_flage=1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	77fb      	strb	r3, [r7, #31]
	uint32_t user_top=0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
	uint32_t user_pre=1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
	uint32_t unit =1000;
 8001fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb8:	613b      	str	r3, [r7, #16]
	uint8_t  increase=2;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	73fb      	strb	r3, [r7, #15]

	if (U == 0){
 8001fbe:	797b      	ldrb	r3, [r7, #5]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <delay+0x64>
		unit = 1000;
 8001fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fc8:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 100;
 8001fca:	88fb      	ldrh	r3, [r7, #6]
 8001fcc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d902      	bls.n	8001fda <delay+0x5e>
 8001fd4:	2364      	movs	r3, #100	; 0x64
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e030      	b.n	800203c <delay+0xc0>
		else increase = 10;
 8001fda:	230a      	movs	r3, #10
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e02d      	b.n	800203c <delay+0xc0>
	}
	else {
		unit = 1000000;
 8001fe0:	4b3c      	ldr	r3, [pc, #240]	; (80020d4 <delay+0x158>)
 8001fe2:	613b      	str	r3, [r7, #16]
		if (time > 3000)increase = 10;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d902      	bls.n	8001ff4 <delay+0x78>
 8001fee:	230a      	movs	r3, #10
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	e023      	b.n	800203c <delay+0xc0>
		else increase = 5;
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	73fb      	strb	r3, [r7, #15]
	}

	while(user_flage==1){
 8001ff8:	e020      	b.n	800203c <delay+0xc0>
		user_top = (clk/unit*time)/( user_pre );
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	88fa      	ldrh	r2, [r7, #6]
 8002004:	fb02 f203 	mul.w	r2, r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fbb2 f3f3 	udiv	r3, r2, r3
 800200e:	61bb      	str	r3, [r7, #24]
		if(user_top>=32000){
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8002016:	d30f      	bcc.n	8002038 <delay+0xbc>

			if(user_pre>65530){
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 800201e:	4293      	cmp	r3, r2
 8002020:	d905      	bls.n	800202e <delay+0xb2>
				user_pre=65530;
 8002022:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 8002026:	617b      	str	r3, [r7, #20]
				user_flage=0;
 8002028:	2300      	movs	r3, #0
 800202a:	77fb      	strb	r3, [r7, #31]
 800202c:	e006      	b.n	800203c <delay+0xc0>
			}
			else user_pre+=increase;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4413      	add	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
 8002036:	e001      	b.n	800203c <delay+0xc0>

		}
		else{
			user_flage=0;
 8002038:	2300      	movs	r3, #0
 800203a:	77fb      	strb	r3, [r7, #31]
	while(user_flage==1){
 800203c:	7ffb      	ldrb	r3, [r7, #31]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d0db      	beq.n	8001ffa <delay+0x7e>
		}
	}


	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <delay+0x154>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <delay+0x154>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_CR1  |=(1<<2);//Only counter overflow/underflow generates an update
 8002052:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <delay+0x154>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <delay+0x154>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f042 0204 	orr.w	r2, r2, #4
 8002060:	601a      	str	r2, [r3, #0]

	delay_TIMER->TIMx_DIER |=(1<<0);//Update interrupt enabled
 8002062:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <delay+0x154>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <delay+0x154>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	60da      	str	r2, [r3, #12]



	delay_TIMER->TIMx_ARR=user_top;//frec peak value
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <delay+0x154>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	62da      	str	r2, [r3, #44]	; 0x2c

	delay_TIMER->TIMx_PSC=(user_pre-1);//prescaller
 800207a:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <delay+0x154>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	3a01      	subs	r2, #1
 8002082:	629a      	str	r2, [r3, #40]	; 0x28

	delay_TIMER->TIMx_EGR |=(1<<0);//1: Re-initialize the counter and generates an update of the registers. Note that the prescaler
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <delay+0x154>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	4b11      	ldr	r3, [pc, #68]	; (80020d0 <delay+0x154>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	615a      	str	r2, [r3, #20]

	delay_TIMER->TIMx_CR1 |=(1<<0);//enable the timer
 8002094:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <delay+0x154>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <delay+0x154>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0201 	orr.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]



	delay_flag=1;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <delay+0x15c>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
	NVIC_TIM2_global_interrupt_Enable;
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <delay+0x160>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <delay+0x160>)
 80020b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6013      	str	r3, [r2, #0]
	while(delay_flag){
 80020b6:	bf00      	nop
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <delay+0x15c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1fb      	bne.n	80020b8 <delay+0x13c>

	}
}
 80020c0:	bf00      	nop
 80020c2:	3724      	adds	r7, #36	; 0x24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	20000024 	.word	0x20000024
 80020d4:	000f4240 	.word	0x000f4240
 80020d8:	20000020 	.word	0x20000020
 80020dc:	e000e100 	.word	0xe000e100

080020e0 <TIME_CALCULATION>:
	NVIC_TIM3_global_interrupt_Enable;

}
//======================================================================================================

uint32_t TIME_CALCULATION(uint32_t clk,uint8_t TIMER_ST){
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	70fb      	strb	r3, [r7, #3]
	if(TIMER_ST==TIMER_START){
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d132      	bne.n	8002158 <TIME_CALCULATION+0x78>
		TIMER4_CLOCK_Enable();//enable timer3 clock
 80020f2:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <TIME_CALCULATION+0xd0>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a2e      	ldr	r2, [pc, #184]	; (80021b0 <TIME_CALCULATION+0xd0>)
 80020f8:	f043 0304 	orr.w	r3, r3, #4
 80020fc:	61d3      	str	r3, [r2, #28]
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a2c      	ldr	r2, [pc, #176]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002104:	f023 0301 	bic.w	r3, r3, #1
 8002108:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_CR1  |=(1<<2);
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <TIME_CALCULATION+0xd4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a29      	ldr	r2, [pc, #164]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6013      	str	r3, [r2, #0]

		TIM4->TIMx_DIER |=(1<<0);//Update interrupt enable
 8002116:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	4a26      	ldr	r2, [pc, #152]	; (80021b4 <TIME_CALCULATION+0xd4>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	60d3      	str	r3, [r2, #12]

		TIM4->TIMx_ARR=64000;//peak value 8ms of freq=8000000hz
 8002122:	4b24      	ldr	r3, [pc, #144]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002124:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c

		TIM4->TIMx_PSC=0;//prescaller
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <TIME_CALCULATION+0xd4>)
 800212c:	2200      	movs	r2, #0
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

		TIM4->TIMx_EGR |=(1<<0);//Bit 0 UG: Update generation
 8002130:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4a1f      	ldr	r2, [pc, #124]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6153      	str	r3, [r2, #20]

		TIM4->TIMx_CR1 |=(1<<0);//enable the timer
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <TIME_CALCULATION+0xd4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6013      	str	r3, [r2, #0]
		NVIC_TIM4_global_interrupt_Enable;
 8002148:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <TIME_CALCULATION+0xd8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a1a      	ldr	r2, [pc, #104]	; (80021b8 <TIME_CALCULATION+0xd8>)
 800214e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002152:	6013      	str	r3, [r2, #0]
		return 1;
 8002154:	2301      	movs	r3, #1
 8002156:	e025      	b.n	80021a4 <TIME_CALCULATION+0xc4>
	}
	else {
		TIM4->TIMx_CR1 &=~(1<<0);//stop
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <TIME_CALCULATION+0xd4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <TIME_CALCULATION+0xd4>)
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	6013      	str	r3, [r2, #0]
		timer_ticks=TIM4->TIMx_CNT;
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <TIME_CALCULATION+0xd4>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	b29a      	uxth	r2, r3
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <TIME_CALCULATION+0xdc>)
 800216c:	801a      	strh	r2, [r3, #0]
		uint32_t X=((timer_ticks+(overflowtims*64000))/(clk/1000000));
 800216e:	4b13      	ldr	r3, [pc, #76]	; (80021bc <TIME_CALCULATION+0xdc>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <TIME_CALCULATION+0xe0>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800217e:	fb03 f301 	mul.w	r3, r3, r1
 8002182:	4413      	add	r3, r2
 8002184:	4619      	mov	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <TIME_CALCULATION+0xe4>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	fbb1 f3f3 	udiv	r3, r1, r3
 8002194:	60fb      	str	r3, [r7, #12]
		overflowtims=0;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <TIME_CALCULATION+0xe0>)
 8002198:	2200      	movs	r2, #0
 800219a:	801a      	strh	r2, [r3, #0]
		timer_ticks=0;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <TIME_CALCULATION+0xdc>)
 800219e:	2200      	movs	r2, #0
 80021a0:	801a      	strh	r2, [r3, #0]
		return X;
 80021a2:	68fb      	ldr	r3, [r7, #12]
	}
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40000800 	.word	0x40000800
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	20000068 	.word	0x20000068
 80021c0:	20000066 	.word	0x20000066
 80021c4:	431bde83 	.word	0x431bde83

080021c8 <SPWM_timer_INIT>:
	c=top=user_top;
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);

}
void SPWM_timer_INIT(uint32_t pre ,uint32_t duty_cycle,uint32_t peak ,uint8_t SPWM_MOOD_){
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	70fb      	strb	r3, [r7, #3]

	pwm->TIMx_CR1 &=~(1<<0);
 80021d6:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0201 	bic.w	r2, r2, #1
 80021e4:	601a      	str	r2, [r3, #0]

	if(SPWM_MOOD_==SPWM_MOOD_INIT){
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d12f      	bne.n	800224c <SPWM_timer_INIT+0x84>
		//CH 2
		pwm->TIMx_CCMR1 |=(1<<11); //Bit 11 OC2PE: Output Compare 2 preload enable
 80021ec:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021fa:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<12);//110: PWM mode 1 - In upcounting, channel 1 is active as long as TIMx_CNT<TIMx_CCR1
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 800220a:	619a      	str	r2, [r3, #24]
		//else inactive. In downcounting, channel 1 is inactive (OC1REF=‘0’) as long as
		//TIMx_CNT>TIMx_CCR1 else active (OC1REF=’1’).
		//CH 1
		pwm->TIMx_CCMR1 |=(1<<3);//Bit 3 OC1PE: Output Compare 1 preload enable
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	699a      	ldr	r2, [r3, #24]
 8002212:	4b2d      	ldr	r3, [pc, #180]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0208 	orr.w	r2, r2, #8
 800221a:	619a      	str	r2, [r3, #24]
		pwm->TIMx_CCMR1 |=(0b110<<4);//Bits 6:4 OC1M: Output Compare 1 mode
 800221c:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800222a:	619a      	str	r2, [r3, #24]


		//	1: On - OC1 signal is output on the corresponding output pin depending on MOE, OSSI,
		//	OSSR, OIS1, OIS1N and CC1NE bits.
		pwm->TIMx_CCER |=(1<<4);//Bit 4 CC2E: Capture/Compare 2 output enable
 800222c:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0210 	orr.w	r2, r2, #16
 800223a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//Bit 0 CC2E: Capture/Compare 1 output enable
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a1a      	ldr	r2, [r3, #32]
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	621a      	str	r2, [r3, #32]
	}

	//	ARPE: Auto-reload preload enable
	//	0: TIMx_ARR register is not buffered
	//	1: TIMx_ARR register is buffered
	pwm->TIMx_CR1 |=(1<<7);
 800224c:	4b1e      	ldr	r3, [pc, #120]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800225a:	601a      	str	r2, [r3, #0]



	pwm->TIMx_ARR=peak;//frec peak value
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	62da      	str	r2, [r3, #44]	; 0x2c
	pwm->TIMx_CCR2=(duty_cycle);//duty cycle
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	639a      	str	r2, [r3, #56]	; 0x38
	pwm->TIMx_CCR1=(duty_cycle);//duty cycle
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	635a      	str	r2, [r3, #52]	; 0x34
	pwm->TIMx_PSC=pre;//prescaller
 8002274:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	629a      	str	r2, [r3, #40]	; 0x28
	//	which are configured in output.
	//	0: OC and OCN outputs are disabled or forced to idle state.
	//	1: OC and OCN outputs are enabled if their respective enable bits are set (CCxE, CCxNE in
	//	TIMx_CCER register).
	//	See OC/OCN enable description for more details
	pwm->TIMx_BDTR |=(1<<15);//	Bit 15 MOE: Main output enable
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800228a:	645a      	str	r2, [r3, #68]	; 0x44


	//	Bit 0 UIE: Update interrupt enable
	//	0: Update interrupt disabled
	//	1: Update interrupt enabled
	pwm->TIMx_DIER |=(0b1<<0);
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <SPWM_timer_INIT+0x100>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	60da      	str	r2, [r3, #12]
	//	0: No action
	//	1: Reinitialize the counter and generates an update of the registers. Note that the prescaler
	//	counter is cleared too (anyway the prescaler ratio is not affected). The counter is cleared if
	//	the center-aligned mode is selected or if DIR=0 (upcounting), else it takes the auto-reload
	//	value (TIMx_ARR) if DIR=1 (downcounting).
	pwm->TIMx_EGR |=(1<<0);
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <SPWM_timer_INIT+0x100>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695a      	ldr	r2, [r3, #20]
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	615a      	str	r2, [r3, #20]

	pwm->TIMx_CR1 |=(1<<0);//enable the timer
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SPWM_timer_INIT+0x100>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000008 	.word	0x20000008

080022cc <TIM2_IRQHandler>:
	x=(top/numper_waves);
	SPWM_timer_INIT(presc,x,top,SPWM_MOOD_INIT);
}
//========<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<  ISR  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

void TIM2_IRQHandler(){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	delay_TIMER->TIMx_SR &=~(1<<0);//Bit 0 UIF: Update interrupt flag
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <TIM2_IRQHandler+0x34>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	691a      	ldr	r2, [r3, #16]
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <TIM2_IRQHandler+0x34>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	611a      	str	r2, [r3, #16]
	delay_flag=0;
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <TIM2_IRQHandler+0x38>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
	//NVIC_TIM2_global_interrupt_Disable;
	delay_TIMER->TIMx_CR1 &=~(1<<0);//timer off
 80022e6:	4b06      	ldr	r3, [pc, #24]	; (8002300 <TIM2_IRQHandler+0x34>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <TIM2_IRQHandler+0x34>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000024 	.word	0x20000024
 8002304:	20000020 	.word	0x20000020

08002308 <TIM3_IRQHandler>:
void TIM3_IRQHandler(){
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	if(stepper_flage==1){
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <TIM3_IRQHandler+0x6c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d119      	bne.n	8002348 <TIM3_IRQHandler+0x40>
		TIM3->TIMx_SR &=~(1<<0);
 8002314:	4b18      	ldr	r3, [pc, #96]	; (8002378 <TIM3_IRQHandler+0x70>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	4a17      	ldr	r2, [pc, #92]	; (8002378 <TIM3_IRQHandler+0x70>)
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	6113      	str	r3, [r2, #16]

		if(stepper_steps !=0){
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <TIM3_IRQHandler+0x74>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d005      	beq.n	8002334 <TIM3_IRQHandler+0x2c>
			stepper_steps--;
 8002328:	4b14      	ldr	r3, [pc, #80]	; (800237c <TIM3_IRQHandler+0x74>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3b01      	subs	r3, #1
 800232e:	4a13      	ldr	r2, [pc, #76]	; (800237c <TIM3_IRQHandler+0x74>)
 8002330:	6013      	str	r3, [r2, #0]
		ISRcalback[0]();
		//NVIC_TIM3_global_interrupt_Disable;
		//pinwrite(GPIOB, pin10,HIGH);
	}

}
 8002332:	e01c      	b.n	800236e <TIM3_IRQHandler+0x66>
			stepper_flage=0;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <TIM3_IRQHandler+0x6c>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
			TIM3->TIMx_CR1 &=~(1<<0);//Counter disabled
 800233a:	4b0f      	ldr	r3, [pc, #60]	; (8002378 <TIM3_IRQHandler+0x70>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <TIM3_IRQHandler+0x70>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6013      	str	r3, [r2, #0]
}
 8002346:	e012      	b.n	800236e <TIM3_IRQHandler+0x66>
		ISR_TIMER_COPY->TIMx_CR1 &=~(1<<0);
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <TIM3_IRQHandler+0x78>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <TIM3_IRQHandler+0x78>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
		ISR_TIMER_COPY->TIMx_SR &=~(1<<0);
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <TIM3_IRQHandler+0x78>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	4b08      	ldr	r3, [pc, #32]	; (8002380 <TIM3_IRQHandler+0x78>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	611a      	str	r2, [r3, #16]
		ISRcalback[0]();
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <TIM3_IRQHandler+0x7c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4798      	blx	r3
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	20000070 	.word	0x20000070
 8002378:	40000400 	.word	0x40000400
 800237c:	2000006c 	.word	0x2000006c
 8002380:	200000c0 	.word	0x200000c0
 8002384:	200000b4 	.word	0x200000b4

08002388 <TIM4_IRQHandler>:

void TIM4_IRQHandler(){
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
	TIM4->TIMx_SR &=~(1<<0);
 800238c:	4b07      	ldr	r3, [pc, #28]	; (80023ac <TIM4_IRQHandler+0x24>)
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	4a06      	ldr	r2, [pc, #24]	; (80023ac <TIM4_IRQHandler+0x24>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6113      	str	r3, [r2, #16]
	overflowtims++;
 8002398:	4b05      	ldr	r3, [pc, #20]	; (80023b0 <TIM4_IRQHandler+0x28>)
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <TIM4_IRQHandler+0x28>)
 80023a2:	801a      	strh	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40000800 	.word	0x40000800
 80023b0:	20000066 	.word	0x20000066

080023b4 <TIM1_UP_IRQHandler>:



void TIM1_UP_IRQHandler(){
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0

	//algorithm who select the action
	if(x>top){
 80023b8:	4b5d      	ldr	r3, [pc, #372]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d911      	bls.n	80023e8 <TIM1_UP_IRQHandler+0x34>
		flage2=1;
 80023c4:	4b5c      	ldr	r3, [pc, #368]	; (8002538 <TIM1_UP_IRQHandler+0x184>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	701a      	strb	r2, [r3, #0]
		flage1=0;
 80023ca:	4b5c      	ldr	r3, [pc, #368]	; (800253c <TIM1_UP_IRQHandler+0x188>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
		x=top+(top/numper_waves);
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <TIM1_UP_IRQHandler+0x18c>)
 80023d6:	7812      	ldrb	r2, [r2, #0]
 80023d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80023dc:	4b55      	ldr	r3, [pc, #340]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4413      	add	r3, r2
 80023e2:	4a53      	ldr	r2, [pc, #332]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e018      	b.n	800241a <TIM1_UP_IRQHandler+0x66>
	}
	else if(x<100)
 80023e8:	4b51      	ldr	r3, [pc, #324]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b63      	cmp	r3, #99	; 0x63
 80023ee:	d814      	bhi.n	800241a <TIM1_UP_IRQHandler+0x66>
	{
		flage2=0;
 80023f0:	4b51      	ldr	r3, [pc, #324]	; (8002538 <TIM1_UP_IRQHandler+0x184>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	701a      	strb	r2, [r3, #0]
		flage1=1;
 80023f6:	4b51      	ldr	r3, [pc, #324]	; (800253c <TIM1_UP_IRQHandler+0x188>)
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
		flage3 ^=(1<<0);
 80023fc:	4b51      	ldr	r3, [pc, #324]	; (8002544 <TIM1_UP_IRQHandler+0x190>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2da      	uxtb	r2, r3
 8002406:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <TIM1_UP_IRQHandler+0x190>)
 8002408:	701a      	strb	r2, [r3, #0]
		x=(top/numper_waves);//reset incremental variable
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <TIM1_UP_IRQHandler+0x18c>)
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	fbb3 f3f2 	udiv	r3, r3, r2
 8002416:	4a46      	ldr	r2, [pc, #280]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 8002418:	6013      	str	r3, [r2, #0]
		//for(volatile int s=0;s<300;s++);//delay between the two half waves

	}

	//select first or second half wave
	if(flage3==1){
 800241a:	4b4a      	ldr	r3, [pc, #296]	; (8002544 <TIM1_UP_IRQHandler+0x190>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d110      	bne.n	8002444 <TIM1_UP_IRQHandler+0x90>
		pwm->TIMx_CCER &=~(1<<0);//ch1_off
 8002422:	4b49      	ldr	r3, [pc, #292]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1a      	ldr	r2, [r3, #32]
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<4);//ch2_on
 8002432:	4b45      	ldr	r3, [pc, #276]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6a1a      	ldr	r2, [r3, #32]
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0210 	orr.w	r2, r2, #16
 8002440:	621a      	str	r2, [r3, #32]
 8002442:	e013      	b.n	800246c <TIM1_UP_IRQHandler+0xb8>
	}
	else if(flage3==0){
 8002444:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <TIM1_UP_IRQHandler+0x190>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10f      	bne.n	800246c <TIM1_UP_IRQHandler+0xb8>
		pwm->TIMx_CCER &=~(1<<4);//ch2_off
 800244c:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a1a      	ldr	r2, [r3, #32]
 8002452:	4b3d      	ldr	r3, [pc, #244]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0210 	bic.w	r2, r2, #16
 800245a:	621a      	str	r2, [r3, #32]
		pwm->TIMx_CCER |=(1<<0);//ch1_on
 800245c:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6a1a      	ldr	r2, [r3, #32]
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	621a      	str	r2, [r3, #32]
	}

	//make this wave and increment/decrement the next value of next wave
	if((flage1==1)&&(flage2==0)){
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <TIM1_UP_IRQHandler+0x188>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d11c      	bne.n	80024ae <TIM1_UP_IRQHandler+0xfa>
 8002474:	4b30      	ldr	r3, [pc, #192]	; (8002538 <TIM1_UP_IRQHandler+0x184>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d118      	bne.n	80024ae <TIM1_UP_IRQHandler+0xfa>
		top=c;
 800247c:	4b33      	ldr	r3, [pc, #204]	; (800254c <TIM1_UP_IRQHandler+0x198>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 8002482:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 8002484:	4b32      	ldr	r3, [pc, #200]	; (8002550 <TIM1_UP_IRQHandler+0x19c>)
 8002486:	6818      	ldr	r0, [r3, #0]
 8002488:	4b29      	ldr	r3, [pc, #164]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 800248a:	6819      	ldr	r1, [r3, #0]
 800248c:	4b29      	ldr	r3, [pc, #164]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	2301      	movs	r3, #1
 8002492:	f7ff fe99 	bl	80021c8 <SPWM_timer_INIT>
		x+=(top/numper_waves);
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a29      	ldr	r2, [pc, #164]	; (8002540 <TIM1_UP_IRQHandler+0x18c>)
 800249c:	7812      	ldrb	r2, [r2, #0]
 800249e:	fbb3 f2f2 	udiv	r2, r3, r2
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a21      	ldr	r2, [pc, #132]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	e035      	b.n	800251a <TIM1_UP_IRQHandler+0x166>
	}
	else if ((flage2==1)&&(flage1==0)){
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <TIM1_UP_IRQHandler+0x184>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d129      	bne.n	800250a <TIM1_UP_IRQHandler+0x156>
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <TIM1_UP_IRQHandler+0x188>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d125      	bne.n	800250a <TIM1_UP_IRQHandler+0x156>
		top=c;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <TIM1_UP_IRQHandler+0x198>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80024c4:	6013      	str	r3, [r2, #0]
		x=x-(top/numper_waves);
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	491c      	ldr	r1, [pc, #112]	; (8002540 <TIM1_UP_IRQHandler+0x18c>)
 80024d0:	7809      	ldrb	r1, [r1, #0]
 80024d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80024da:	6013      	str	r3, [r2, #0]
		SPWM_timer_INIT(presc,x,top,SPWM_MOOD_START);
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <TIM1_UP_IRQHandler+0x19c>)
 80024de:	6818      	ldr	r0, [r3, #0]
 80024e0:	4b13      	ldr	r3, [pc, #76]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2301      	movs	r3, #1
 80024ea:	f7ff fe6d 	bl	80021c8 <SPWM_timer_INIT>
		if(x==(top/numper_waves))x=0;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <TIM1_UP_IRQHandler+0x180>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <TIM1_UP_IRQHandler+0x18c>)
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80024fa:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10b      	bne.n	800251a <TIM1_UP_IRQHandler+0x166>
 8002502:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <TIM1_UP_IRQHandler+0x17c>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	e007      	b.n	800251a <TIM1_UP_IRQHandler+0x166>
	}
	else pwm->TIMx_CR1 &=~(1<<0);//disable counter
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]

	pwm->TIMx_SR &=~(1<<0);//flag off
 800251a:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <TIM1_UP_IRQHandler+0x194>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0201 	bic.w	r2, r2, #1
 8002528:	611a      	str	r2, [r3, #16]
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	2000001c 	.word	0x2000001c
 8002534:	20000010 	.word	0x20000010
 8002538:	20000065 	.word	0x20000065
 800253c:	2000000c 	.word	0x2000000c
 8002540:	200000bc 	.word	0x200000bc
 8002544:	2000000d 	.word	0x2000000d
 8002548:	20000008 	.word	0x20000008
 800254c:	20000018 	.word	0x20000018
 8002550:	20000014 	.word	0x20000014

08002554 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0

	Global_config->P_IRQ_Callback () ;
 8002558:	4b02      	ldr	r3, [pc, #8]	; (8002564 <USART1_IRQHandler+0x10>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	4798      	blx	r3

}
 8002560:	bf00      	nop
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000074 	.word	0x20000074

08002568 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <USART2_IRQHandler+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	4798      	blx	r3

}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000074 	.word	0x20000074

0800257c <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
	Global_config->P_IRQ_Callback () ;
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <USART3_IRQHandler+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4798      	blx	r3


}
 8002588:	bf00      	nop
 800258a:	bd80      	pop	{r7, pc}
 800258c:	20000074 	.word	0x20000074

08002590 <__libc_init_array>:
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	2500      	movs	r5, #0
 8002594:	4e0c      	ldr	r6, [pc, #48]	; (80025c8 <__libc_init_array+0x38>)
 8002596:	4c0d      	ldr	r4, [pc, #52]	; (80025cc <__libc_init_array+0x3c>)
 8002598:	1ba4      	subs	r4, r4, r6
 800259a:	10a4      	asrs	r4, r4, #2
 800259c:	42a5      	cmp	r5, r4
 800259e:	d109      	bne.n	80025b4 <__libc_init_array+0x24>
 80025a0:	f000 f81a 	bl	80025d8 <_init>
 80025a4:	2500      	movs	r5, #0
 80025a6:	4e0a      	ldr	r6, [pc, #40]	; (80025d0 <__libc_init_array+0x40>)
 80025a8:	4c0a      	ldr	r4, [pc, #40]	; (80025d4 <__libc_init_array+0x44>)
 80025aa:	1ba4      	subs	r4, r4, r6
 80025ac:	10a4      	asrs	r4, r4, #2
 80025ae:	42a5      	cmp	r5, r4
 80025b0:	d105      	bne.n	80025be <__libc_init_array+0x2e>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b8:	4798      	blx	r3
 80025ba:	3501      	adds	r5, #1
 80025bc:	e7ee      	b.n	800259c <__libc_init_array+0xc>
 80025be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c2:	4798      	blx	r3
 80025c4:	3501      	adds	r5, #1
 80025c6:	e7f2      	b.n	80025ae <__libc_init_array+0x1e>
 80025c8:	080025f0 	.word	0x080025f0
 80025cc:	080025f0 	.word	0x080025f0
 80025d0:	080025f0 	.word	0x080025f0
 80025d4:	080025f4 	.word	0x080025f4

080025d8 <_init>:
 80025d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025da:	bf00      	nop
 80025dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025de:	bc08      	pop	{r3}
 80025e0:	469e      	mov	lr, r3
 80025e2:	4770      	bx	lr

080025e4 <_fini>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr
