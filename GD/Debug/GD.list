
GD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1d4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800b2e8  0800b2e8  0000c2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b758  0800b758  0000d218  2**0
                  CONTENTS
  4 .ARM          00000008  0800b758  0800b758  0000c758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b760  0800b760  0000d218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b760  0800b760  0000c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b764  0800b764  0000c764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800b768  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000218  0800b980  0000d218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0800b980  0000da38  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a36  00000000  00000000  0000d241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030a8  00000000  00000000  00020c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00023d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3d  00000000  00000000  00024f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011259  00000000  00000000  00025d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00004e4f  00000000  00000000  00036fde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0003be2d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00006120  00000000  00000000  0003be70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000034  00000000  00000000  00041f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000218 	.word	0x20000218
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b2cc 	.word	0x0800b2cc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000021c 	.word	0x2000021c
 800014c:	0800b2cc 	.word	0x0800b2cc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_f2uiz>:
 8001024:	0042      	lsls	r2, r0, #1
 8001026:	d20e      	bcs.n	8001046 <__aeabi_f2uiz+0x22>
 8001028:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800102c:	d30b      	bcc.n	8001046 <__aeabi_f2uiz+0x22>
 800102e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001032:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001036:	d409      	bmi.n	800104c <__aeabi_f2uiz+0x28>
 8001038:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800103c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001040:	fa23 f002 	lsr.w	r0, r3, r2
 8001044:	4770      	bx	lr
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4770      	bx	lr
 800104c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001050:	d101      	bne.n	8001056 <__aeabi_f2uiz+0x32>
 8001052:	0242      	lsls	r2, r0, #9
 8001054:	d102      	bne.n	800105c <__aeabi_f2uiz+0x38>
 8001056:	f04f 30ff 	mov.w	r0, #4294967295
 800105a:	4770      	bx	lr
 800105c:	f04f 0000 	mov.w	r0, #0
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <__aeabi_d2lz>:
 8001064:	b538      	push	{r3, r4, r5, lr}
 8001066:	2200      	movs	r2, #0
 8001068:	2300      	movs	r3, #0
 800106a:	4604      	mov	r4, r0
 800106c:	460d      	mov	r5, r1
 800106e:	f7ff fca5 	bl	80009bc <__aeabi_dcmplt>
 8001072:	b928      	cbnz	r0, 8001080 <__aeabi_d2lz+0x1c>
 8001074:	4620      	mov	r0, r4
 8001076:	4629      	mov	r1, r5
 8001078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800107c:	f000 b80a 	b.w	8001094 <__aeabi_d2ulz>
 8001080:	4620      	mov	r0, r4
 8001082:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001086:	f000 f805 	bl	8001094 <__aeabi_d2ulz>
 800108a:	4240      	negs	r0, r0
 800108c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001090:	bd38      	pop	{r3, r4, r5, pc}
 8001092:	bf00      	nop

08001094 <__aeabi_d2ulz>:
 8001094:	b5d0      	push	{r4, r6, r7, lr}
 8001096:	2200      	movs	r2, #0
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <__aeabi_d2ulz+0x34>)
 800109a:	4606      	mov	r6, r0
 800109c:	460f      	mov	r7, r1
 800109e:	f7ff fa1b 	bl	80004d8 <__aeabi_dmul>
 80010a2:	f7ff fcf1 	bl	8000a88 <__aeabi_d2uiz>
 80010a6:	4604      	mov	r4, r0
 80010a8:	f7ff f99c 	bl	80003e4 <__aeabi_ui2d>
 80010ac:	2200      	movs	r2, #0
 80010ae:	4b07      	ldr	r3, [pc, #28]	@ (80010cc <__aeabi_d2ulz+0x38>)
 80010b0:	f7ff fa12 	bl	80004d8 <__aeabi_dmul>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4630      	mov	r0, r6
 80010ba:	4639      	mov	r1, r7
 80010bc:	f7ff f854 	bl	8000168 <__aeabi_dsub>
 80010c0:	f7ff fce2 	bl	8000a88 <__aeabi_d2uiz>
 80010c4:	4621      	mov	r1, r4
 80010c6:	bdd0      	pop	{r4, r6, r7, pc}
 80010c8:	3df00000 	.word	0x3df00000
 80010cc:	41f00000 	.word	0x41f00000

080010d0 <ACC_Init>:
static ACC_Control_t acc_control;

/**
 * @brief Initialize the Adaptive Cruise Control system
 */
void ACC_Init(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    // Initialize control structure
    acc_control.state = ACC_DISABLED;
 80010d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001110 <ACC_Init+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
    acc_control.target_speed = ACC_DEFAULT_SPEED;
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <ACC_Init+0x40>)
 80010dc:	223c      	movs	r2, #60	@ 0x3c
 80010de:	605a      	str	r2, [r3, #4]
    acc_control.current_speed = 0;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <ACC_Init+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
    acc_control.following_distance = ACC_SAFE_DISTANCE;
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <ACC_Init+0x40>)
 80010e8:	2232      	movs	r2, #50	@ 0x32
 80010ea:	60da      	str	r2, [r3, #12]
    acc_control.front_distance = 500;  // Initialize with large distance
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <ACC_Init+0x40>)
 80010ee:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010f2:	611a      	str	r2, [r3, #16]
    acc_control.last_update_time = HAL_GetTick();
 80010f4:	f001 fc00 	bl	80028f8 <HAL_GetTick>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <ACC_Init+0x40>)
 80010fc:	6153      	str	r3, [r2, #20]
    acc_control.emergency_brake_flag = 0;
 80010fe:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <ACC_Init+0x40>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]

    // Initialize motor system
    Motors_Init();
 8001104:	f000 f94c 	bl	80013a0 <Motors_Init>

    // Stop motors initially
    Stop_Motors();
 8001108:	f000 fa21 	bl	800154e <Stop_Motors>
}
 800110c:	bf00      	nop
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000234 	.word	0x20000234

08001114 <ACC_Enable>:

/**
 * @brief Enable ACC with specified target speed
 * @param target_speed: Desired cruise speed (20-90%)
 */
void ACC_Enable(uint32_t target_speed) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    if (target_speed < ACC_MIN_SPEED) target_speed = ACC_MIN_SPEED;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b13      	cmp	r3, #19
 8001120:	d801      	bhi.n	8001126 <ACC_Enable+0x12>
 8001122:	2314      	movs	r3, #20
 8001124:	607b      	str	r3, [r7, #4]
    if (target_speed > ACC_MAX_SPEED) target_speed = ACC_MAX_SPEED;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b5a      	cmp	r3, #90	@ 0x5a
 800112a:	d901      	bls.n	8001130 <ACC_Enable+0x1c>
 800112c:	235a      	movs	r3, #90	@ 0x5a
 800112e:	607b      	str	r3, [r7, #4]

    acc_control.target_speed = target_speed;
 8001130:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <ACC_Enable+0x4c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6053      	str	r3, [r2, #4]
    acc_control.current_speed = ACC_MIN_SPEED;  // Start with minimum speed
 8001136:	4b0a      	ldr	r3, [pc, #40]	@ (8001160 <ACC_Enable+0x4c>)
 8001138:	2214      	movs	r2, #20
 800113a:	609a      	str	r2, [r3, #8]
    acc_control.state = ACC_ENABLED;
 800113c:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <ACC_Enable+0x4c>)
 800113e:	2201      	movs	r2, #1
 8001140:	701a      	strb	r2, [r3, #0]
    acc_control.emergency_brake_flag = 0;
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <ACC_Enable+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	761a      	strb	r2, [r3, #24]

    // Start moving forward
    Move_Forward();
 8001148:	f000 f964 	bl	8001414 <Move_Forward>
    Set_Speed(acc_control.current_speed);
 800114c:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <ACC_Enable+0x4c>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f934 	bl	80013c0 <Set_Speed>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000234 	.word	0x20000234

08001164 <ACC_SetFollowingDistance>:

/**
 * @brief Set following distance
 * @param distance: Desired following distance in cm
 */
void ACC_SetFollowingDistance(uint32_t distance) {
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
    if (distance < ACC_MIN_DISTANCE) distance = ACC_MIN_DISTANCE;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b0e      	cmp	r3, #14
 8001170:	d801      	bhi.n	8001176 <ACC_SetFollowingDistance+0x12>
 8001172:	230f      	movs	r3, #15
 8001174:	607b      	str	r3, [r7, #4]
    acc_control.following_distance = distance;
 8001176:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <ACC_SetFollowingDistance+0x24>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000234 	.word	0x20000234

0800118c <ACC_Update>:

/**
 * @brief Main ACC update function - call this regularly
 * @param front_distance: Current front distance measurement in cm
 */
void ACC_Update(uint32_t front_distance) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
    uint32_t current_time = HAL_GetTick();
 8001194:	f001 fbb0 	bl	80028f8 <HAL_GetTick>
 8001198:	60f8      	str	r0, [r7, #12]
    acc_control.front_distance = front_distance;
 800119a:	4a11      	ldr	r2, [pc, #68]	@ (80011e0 <ACC_Update+0x54>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6113      	str	r3, [r2, #16]

    // Check if it's time to update
    if (current_time - acc_control.last_update_time >= ACC_UPDATE_INTERVAL) {
 80011a0:	4b0f      	ldr	r3, [pc, #60]	@ (80011e0 <ACC_Update+0x54>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d016      	beq.n	80011d8 <ACC_Update+0x4c>
        acc_control.last_update_time = current_time;
 80011aa:	4a0d      	ldr	r2, [pc, #52]	@ (80011e0 <ACC_Update+0x54>)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6153      	str	r3, [r2, #20]

        // Handle different ACC states
        switch (acc_control.state) {
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <ACC_Update+0x54>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b03      	cmp	r3, #3
 80011b6:	d00b      	beq.n	80011d0 <ACC_Update+0x44>
 80011b8:	2b03      	cmp	r3, #3
 80011ba:	dc0d      	bgt.n	80011d8 <ACC_Update+0x4c>
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00a      	beq.n	80011d6 <ACC_Update+0x4a>
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db09      	blt.n	80011d8 <ACC_Update+0x4c>
 80011c4:	3b01      	subs	r3, #1
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d806      	bhi.n	80011d8 <ACC_Update+0x4c>
                // Do nothing
                break;

            case ACC_ENABLED:
            case ACC_FOLLOWING:
                ACC_SpeedControl();
 80011ca:	f000 f80b 	bl	80011e4 <ACC_SpeedControl>
                break;
 80011ce:	e003      	b.n	80011d8 <ACC_Update+0x4c>

            case ACC_EMERGENCY_BRAKE:
                ACC_EmergencyBrake();
 80011d0:	f000 f86a 	bl	80012a8 <ACC_EmergencyBrake>
                break;
 80011d4:	e000      	b.n	80011d8 <ACC_Update+0x4c>
                break;
 80011d6:	bf00      	nop
        }
    }
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000234 	.word	0x20000234

080011e4 <ACC_SpeedControl>:

/**
 * @brief Main speed control logic
 */
void ACC_SpeedControl(void) {
 80011e4:	b590      	push	{r4, r7, lr}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
    // Emergency braking check
    if (acc_control.front_distance <= ACC_EMERGENCY_DISTANCE) {
 80011ea:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d803      	bhi.n	80011fa <ACC_SpeedControl+0x16>
        acc_control.state = ACC_EMERGENCY_BRAKE;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 80011f4:	2203      	movs	r2, #3
 80011f6:	701a      	strb	r2, [r3, #0]
        return;
 80011f8:	e050      	b.n	800129c <ACC_SpeedControl+0xb8>
    }

    // Determine target speed based on front distance
    uint32_t adaptive_speed = acc_control.target_speed;
 80011fa:	4b2a      	ldr	r3, [pc, #168]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	607b      	str	r3, [r7, #4]

    if (acc_control.front_distance < acc_control.following_distance) {
 8001200:	4b28      	ldr	r3, [pc, #160]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	4b27      	ldr	r3, [pc, #156]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	429a      	cmp	r2, r3
 800120a:	d230      	bcs.n	800126e <ACC_SpeedControl+0x8a>
        // Vehicle ahead detected - enter following mode
        acc_control.state = ACC_FOLLOWING;
 800120c:	4b25      	ldr	r3, [pc, #148]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 800120e:	2202      	movs	r2, #2
 8001210:	701a      	strb	r2, [r3, #0]

        // Calculate adaptive speed based on distance
        if (acc_control.front_distance < ACC_MIN_DISTANCE) {
 8001212:	4b24      	ldr	r3, [pc, #144]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001214:	691b      	ldr	r3, [r3, #16]
 8001216:	2b0e      	cmp	r3, #14
 8001218:	d802      	bhi.n	8001220 <ACC_SpeedControl+0x3c>
            adaptive_speed = ACC_MIN_SPEED;
 800121a:	2314      	movs	r3, #20
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	e02c      	b.n	800127a <ACC_SpeedControl+0x96>
        } else {
            // Proportional speed reduction
            float speed_ratio = (float)(acc_control.front_distance - ACC_MIN_DISTANCE) /
 8001220:	4b20      	ldr	r3, [pc, #128]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	3b0f      	subs	r3, #15
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fd54 	bl	8000cd4 <__aeabi_ui2f>
 800122c:	4604      	mov	r4, r0
                               (float)(acc_control.following_distance - ACC_MIN_DISTANCE);
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3b0f      	subs	r3, #15
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd4d 	bl	8000cd4 <__aeabi_ui2f>
 800123a:	4603      	mov	r3, r0
            float speed_ratio = (float)(acc_control.front_distance - ACC_MIN_DISTANCE) /
 800123c:	4619      	mov	r1, r3
 800123e:	4620      	mov	r0, r4
 8001240:	f7ff fe54 	bl	8000eec <__aeabi_fdiv>
 8001244:	4603      	mov	r3, r0
 8001246:	603b      	str	r3, [r7, #0]
            adaptive_speed = ACC_MIN_SPEED + (uint32_t)(speed_ratio * (acc_control.target_speed - ACC_MIN_SPEED));
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	3b14      	subs	r3, #20
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fd40 	bl	8000cd4 <__aeabi_ui2f>
 8001254:	4603      	mov	r3, r0
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fd93 	bl	8000d84 <__aeabi_fmul>
 800125e:	4603      	mov	r3, r0
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fedf 	bl	8001024 <__aeabi_f2uiz>
 8001266:	4603      	mov	r3, r0
 8001268:	3314      	adds	r3, #20
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	e005      	b.n	800127a <ACC_SpeedControl+0x96>
        }
    } else {
        // Clear path - resume target speed
        acc_control.state = ACC_ENABLED;
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001270:	2201      	movs	r2, #1
 8001272:	701a      	strb	r2, [r3, #0]
        adaptive_speed = acc_control.target_speed;
 8001274:	4b0b      	ldr	r3, [pc, #44]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	607b      	str	r3, [r7, #4]
    }

    // Smooth speed adjustment
    if (adaptive_speed > acc_control.current_speed) {
 800127a:	4b0a      	ldr	r3, [pc, #40]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	d903      	bls.n	800128c <ACC_SpeedControl+0xa8>
        ACC_SmoothAcceleration(adaptive_speed);
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f83f 	bl	8001308 <ACC_SmoothAcceleration>
 800128a:	e007      	b.n	800129c <ACC_SpeedControl+0xb8>
    } else if (adaptive_speed < acc_control.current_speed) {
 800128c:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <ACC_SpeedControl+0xc0>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	d202      	bcs.n	800129c <ACC_SpeedControl+0xb8>
        ACC_SmoothDeceleration(adaptive_speed);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f85c 	bl	8001354 <ACC_SmoothDeceleration>
    }
}
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000234 	.word	0x20000234

080012a8 <ACC_EmergencyBrake>:

/**
 * @brief Emergency braking function
 */
void ACC_EmergencyBrake(void) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
    // Rapid deceleration
    if (acc_control.current_speed > 0) {
 80012ac:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d016      	beq.n	80012e2 <ACC_EmergencyBrake+0x3a>
        if (acc_control.current_speed >= ACC_EMERGENCY_DECEL) {
 80012b4:	4b13      	ldr	r3, [pc, #76]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b0e      	cmp	r3, #14
 80012ba:	d905      	bls.n	80012c8 <ACC_EmergencyBrake+0x20>
            acc_control.current_speed -= ACC_EMERGENCY_DECEL;
 80012bc:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	3b0f      	subs	r3, #15
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012c4:	6093      	str	r3, [r2, #8]
 80012c6:	e002      	b.n	80012ce <ACC_EmergencyBrake+0x26>
        } else {
            acc_control.current_speed = 0;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
        }

        Set_Speed(acc_control.current_speed);
 80012ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	f000 f873 	bl	80013c0 <Set_Speed>
        acc_control.emergency_brake_flag = 1;
 80012da:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012dc:	2201      	movs	r2, #1
 80012de:	761a      	strb	r2, [r3, #24]
 80012e0:	e001      	b.n	80012e6 <ACC_EmergencyBrake+0x3e>
    } else {
        // Complete stop
        Stop_Motors();
 80012e2:	f000 f934 	bl	800154e <Stop_Motors>
    }

    // Check if we can resume
    if (acc_control.front_distance > ACC_SAFE_DISTANCE) {
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	2b32      	cmp	r3, #50	@ 0x32
 80012ec:	d907      	bls.n	80012fe <ACC_EmergencyBrake+0x56>
        acc_control.state = ACC_ENABLED;
 80012ee:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
        acc_control.emergency_brake_flag = 0;
 80012f4:	4b03      	ldr	r3, [pc, #12]	@ (8001304 <ACC_EmergencyBrake+0x5c>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	761a      	strb	r2, [r3, #24]
        Move_Forward();
 80012fa:	f000 f88b 	bl	8001414 <Move_Forward>
    }


}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	20000234 	.word	0x20000234

08001308 <ACC_SmoothAcceleration>:

/**
 * @brief Smooth acceleration to target speed
 * @param target_speed: Target speed to reach
 */
void ACC_SmoothAcceleration(uint32_t target_speed) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
    if (acc_control.current_speed < target_speed) {
 8001310:	4b0f      	ldr	r3, [pc, #60]	@ (8001350 <ACC_SmoothAcceleration+0x48>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	429a      	cmp	r2, r3
 8001318:	d915      	bls.n	8001346 <ACC_SmoothAcceleration+0x3e>
        uint32_t speed_diff = target_speed - acc_control.current_speed;
 800131a:	4b0d      	ldr	r3, [pc, #52]	@ (8001350 <ACC_SmoothAcceleration+0x48>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	60fb      	str	r3, [r7, #12]
        uint32_t increment = (speed_diff > ACC_SPEED_INCREMENT) ? ACC_SPEED_INCREMENT : speed_diff;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	2b0a      	cmp	r3, #10
 8001328:	bf28      	it	cs
 800132a:	230a      	movcs	r3, #10
 800132c:	60bb      	str	r3, [r7, #8]

        acc_control.current_speed += increment;
 800132e:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <ACC_SmoothAcceleration+0x48>)
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	4413      	add	r3, r2
 8001336:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <ACC_SmoothAcceleration+0x48>)
 8001338:	6093      	str	r3, [r2, #8]
        Set_Speed(acc_control.current_speed);
 800133a:	4b05      	ldr	r3, [pc, #20]	@ (8001350 <ACC_SmoothAcceleration+0x48>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f83d 	bl	80013c0 <Set_Speed>
    }
}
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000234 	.word	0x20000234

08001354 <ACC_SmoothDeceleration>:

/**
 * @brief Smooth deceleration to target speed
 * @param target_speed: Target speed to reach
 */
void ACC_SmoothDeceleration(uint32_t target_speed) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
    if (acc_control.current_speed > target_speed) {
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <ACC_SmoothDeceleration+0x48>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	d215      	bcs.n	8001392 <ACC_SmoothDeceleration+0x3e>
        uint32_t speed_diff = acc_control.current_speed - target_speed;
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <ACC_SmoothDeceleration+0x48>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	60fb      	str	r3, [r7, #12]
        uint32_t decrement = (speed_diff > ACC_SPEED_DECREMENT) ? ACC_SPEED_DECREMENT : speed_diff;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b0a      	cmp	r3, #10
 8001374:	bf28      	it	cs
 8001376:	230a      	movcs	r3, #10
 8001378:	60bb      	str	r3, [r7, #8]

        acc_control.current_speed -= decrement;
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <ACC_SmoothDeceleration+0x48>)
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	4a06      	ldr	r2, [pc, #24]	@ (800139c <ACC_SmoothDeceleration+0x48>)
 8001384:	6093      	str	r3, [r2, #8]
        Set_Speed(acc_control.current_speed);
 8001386:	4b05      	ldr	r3, [pc, #20]	@ (800139c <ACC_SmoothDeceleration+0x48>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f817 	bl	80013c0 <Set_Speed>
    }
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000234 	.word	0x20000234

080013a0 <Motors_Init>:
#define WHEEL_CIRCUMFERENCE_HALF 4 // 4cm (half of wheel circumference)
#define OBSTACLE_NEAR_THRESHOLD 30 // cm
#define OBSTACLE_FAR_THRESHOLD 45  // cm
#define BASE_TURN_DURATION_MS 300  // Time needed to turn 4cm at 100% speed
// Initialize motor control pins and PWM
void Motors_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	// GPIO pins are initialized by CubeMX

	// Start PWM signals
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013a4:	2100      	movs	r1, #0
 80013a6:	4805      	ldr	r0, [pc, #20]	@ (80013bc <Motors_Init+0x1c>)
 80013a8:	f003 fe16 	bl	8004fd8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80013ac:	210c      	movs	r1, #12
 80013ae:	4803      	ldr	r0, [pc, #12]	@ (80013bc <Motors_Init+0x1c>)
 80013b0:	f003 fe12 	bl	8004fd8 <HAL_TIM_PWM_Start>

	// Initially stop motors
	Stop_Motors();
 80013b4:	f000 f8cb 	bl	800154e <Stop_Motors>
}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000035c 	.word	0x2000035c

080013c0 <Set_Speed>:

// Set speed for all motors (duty cycle 0-100)
void Set_Speed(uint8_t duty_cycle) {
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	// Ensure duty cycle is within bounds
	if (duty_cycle > 100) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b64      	cmp	r3, #100	@ 0x64
 80013ce:	d901      	bls.n	80013d4 <Set_Speed+0x14>
		duty_cycle = 100;
 80013d0:	2364      	movs	r3, #100	@ 0x64
 80013d2:	71fb      	strb	r3, [r7, #7]
	}

	// Calculate compare value based on timer period
	uint16_t timer_period = htim1.Instance->ARR;
 80013d4:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <Set_Speed+0x4c>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013da:	81fb      	strh	r3, [r7, #14]
	uint16_t pulse = (timer_period * duty_cycle) / 100;
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	79fa      	ldrb	r2, [r7, #7]
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
 80013e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <Set_Speed+0x50>)
 80013e6:	fb82 1203 	smull	r1, r2, r2, r3
 80013ea:	1152      	asrs	r2, r2, #5
 80013ec:	17db      	asrs	r3, r3, #31
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	81bb      	strh	r3, [r7, #12]

	// Set PWM duty cycle for both channels
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <Set_Speed+0x4c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	89ba      	ldrh	r2, [r7, #12]
 80013f8:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse);
 80013fa:	4b04      	ldr	r3, [pc, #16]	@ (800140c <Set_Speed+0x4c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	89ba      	ldrh	r2, [r7, #12]
 8001400:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	2000035c 	.word	0x2000035c
 8001410:	51eb851f 	.word	0x51eb851f

08001414 <Move_Forward>:

// Move all motors forward
void Move_Forward(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	2108      	movs	r1, #8
 800141c:	480a      	ldr	r0, [pc, #40]	@ (8001448 <Move_Forward+0x34>)
 800141e:	f001 fea4 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2110      	movs	r1, #16
 8001426:	4808      	ldr	r0, [pc, #32]	@ (8001448 <Move_Forward+0x34>)
 8001428:	f001 fe9f 	bl	800316a <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2120      	movs	r1, #32
 8001430:	4805      	ldr	r0, [pc, #20]	@ (8001448 <Move_Forward+0x34>)
 8001432:	f001 fe9a 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8001436:	2200      	movs	r2, #0
 8001438:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <Move_Forward+0x34>)
 800143e:	f001 fe94 	bl	800316a <HAL_GPIO_WritePin>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010c00 	.word	0x40010c00

0800144c <Move_Right>:
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
}

// Move Right
void Move_Right(void){
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	2108      	movs	r1, #8
 8001454:	480a      	ldr	r0, [pc, #40]	@ (8001480 <Move_Right+0x34>)
 8001456:	f001 fe88 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	2110      	movs	r1, #16
 800145e:	4808      	ldr	r0, [pc, #32]	@ (8001480 <Move_Right+0x34>)
 8001460:	f001 fe83 	bl	800316a <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2120      	movs	r1, #32
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <Move_Right+0x34>)
 800146a:	f001 fe7e 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001474:	4802      	ldr	r0, [pc, #8]	@ (8001480 <Move_Right+0x34>)
 8001476:	f001 fe78 	bl	800316a <HAL_GPIO_WritePin>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40010c00 	.word	0x40010c00

08001484 <Move_Left>:
// Move Left
void Move_Left(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0

	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2108      	movs	r1, #8
 800148c:	480a      	ldr	r0, [pc, #40]	@ (80014b8 <Move_Left+0x34>)
 800148e:	f001 fe6c 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2110      	movs	r1, #16
 8001496:	4808      	ldr	r0, [pc, #32]	@ (80014b8 <Move_Left+0x34>)
 8001498:	f001 fe67 	bl	800316a <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 800149c:	2201      	movs	r2, #1
 800149e:	2120      	movs	r1, #32
 80014a0:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <Move_Left+0x34>)
 80014a2:	f001 fe62 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <Move_Left+0x34>)
 80014ae:	f001 fe5c 	bl	800316a <HAL_GPIO_WritePin>

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40010c00 	.word	0x40010c00

080014bc <Turn_Right>:
// Turn Right function
// Turn Right function
void Turn_Right(uint32_t Right_distance, uint32_t Left_distance, uint32_t current_speed) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
	// Check if obstacle is near on left and path is clear on right
	if (Left_distance <= OBSTACLE_NEAR_THRESHOLD && Right_distance >= OBSTACLE_FAR_THRESHOLD) {
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b1e      	cmp	r3, #30
 80014cc:	d819      	bhi.n	8001502 <Turn_Right+0x46>
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	2b2c      	cmp	r3, #44	@ 0x2c
 80014d2:	d916      	bls.n	8001502 <Turn_Right+0x46>
		// Calculate turn duration inversely proportional to speed (with minimum speed check)
		uint32_t effective_speed = (current_speed < 10) ? 10 : current_speed; // Prevent division by zero
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b0a      	cmp	r3, #10
 80014d8:	bf38      	it	cc
 80014da:	230a      	movcc	r3, #10
 80014dc:	617b      	str	r3, [r7, #20]
		uint32_t turn_duration = (BASE_TURN_DURATION_MS * 100) / effective_speed;
 80014de:	f247 5230 	movw	r2, #30000	@ 0x7530
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e8:	613b      	str	r3, [r7, #16]

		// Execute turn left (to go right around obstacle)
		Move_Right();
 80014ea:	f7ff ffaf 	bl	800144c <Move_Right>
		HAL_Delay(turn_duration);
 80014ee:	6938      	ldr	r0, [r7, #16]
 80014f0:	f001 fa0c 	bl	800290c <HAL_Delay>

		// Stop motors briefly
		Stop_Motors();
 80014f4:	f000 f82b 	bl	800154e <Stop_Motors>
		HAL_Delay(100);
 80014f8:	2064      	movs	r0, #100	@ 0x64
 80014fa:	f001 fa07 	bl	800290c <HAL_Delay>

		// Continue forward
		Move_Forward();
 80014fe:	f7ff ff89 	bl	8001414 <Move_Forward>

	}
}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <Turn_Left>:

// Turn Left function
void Turn_Left(uint32_t Right_distance, uint32_t Left_distance, uint32_t current_speed) {
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
	// Check if obstacle is near on right and path is clear on left
	if (Right_distance <= OBSTACLE_NEAR_THRESHOLD && Left_distance >= OBSTACLE_FAR_THRESHOLD) {
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	2b1e      	cmp	r3, #30
 800151a:	d814      	bhi.n	8001546 <Turn_Left+0x3c>
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001520:	d911      	bls.n	8001546 <Turn_Left+0x3c>
		// Calculate turn duration inversely proportional to speed (with minimum speed check)
		uint32_t effective_speed = (current_speed < 10) ? 10 : current_speed; // Prevent division by zero
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0a      	cmp	r3, #10
 8001526:	bf38      	it	cc
 8001528:	230a      	movcc	r3, #10
 800152a:	617b      	str	r3, [r7, #20]
		uint32_t turn_duration = (BASE_TURN_DURATION_MS * 100) / effective_speed;
 800152c:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fbb2 f3f3 	udiv	r3, r2, r3
 8001536:	613b      	str	r3, [r7, #16]

		// Execute turn right (to go left around obstacle)
		Move_Left();
 8001538:	f7ff ffa4 	bl	8001484 <Move_Left>
		HAL_Delay(turn_duration);
 800153c:	6938      	ldr	r0, [r7, #16]
 800153e:	f001 f9e5 	bl	800290c <HAL_Delay>


		// Continue forward
		Move_Forward();
 8001542:	f7ff ff67 	bl	8001414 <Move_Forward>

	}
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <Stop_Motors>:
	else if (distance < min_distance){
		*current_speed = 0;
	}
}
// Stop all motors
void Stop_Motors(void) {
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
//
//	// Right motors stop (IN3 = LOW, IN4 = LOW)
//	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);

 Set_Speed(0);
 8001552:	2000      	movs	r0, #0
 8001554:	f7ff ff34 	bl	80013c0 <Set_Speed>
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}

0800155c <SysTickEnable>:
GPIO_TypeDef *echoPorts[3] = {Echo0_GPIO_Port, Echo1_GPIO_Port, Echo2_GPIO_Port};
uint16_t echoPins[3] = {Echo0_Pin, Echo1_Pin, Echo2_Pin};


void SysTickEnable()
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
	__disable_irq();
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <SysTickEnable+0x20>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	@ (800157c <SysTickEnable+0x20>)
 800156a:	f043 0305 	orr.w	r3, r3, #5
 800156e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001570:	b662      	cpsie	i
}
 8001572:	bf00      	nop
	__enable_irq();
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr
 800157c:	e000e010 	.word	0xe000e010

08001580 <SysTickDisable>:

void SysTickDisable()
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
	__disable_irq();
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTickDisable+0x20>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a04      	ldr	r2, [pc, #16]	@ (80015a0 <SysTickDisable+0x20>)
 800158e:	f023 0305 	bic.w	r3, r3, #5
 8001592:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001594:	b662      	cpsie	i
}
 8001596:	bf00      	nop
	__enable_irq();
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <measureDistance>:

uint16_t measureDistance(GPIO_TypeDef *triggerPort, uint16_t triggerPin, GPIO_TypeDef *echoPort, uint16_t echoPin)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	607a      	str	r2, [r7, #4]
 80015ae:	461a      	mov	r2, r3
 80015b0:	460b      	mov	r3, r1
 80015b2:	817b      	strh	r3, [r7, #10]
 80015b4:	4613      	mov	r3, r2
 80015b6:	813b      	strh	r3, [r7, #8]
	if(!HAL_GPIO_ReadPin(echoPort, echoPin))//skip sensor if ECHO pin is still busy
 80015b8:	893b      	ldrh	r3, [r7, #8]
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f001 fdbd 	bl	800313c <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d134      	bne.n	8001632 <measureDistance+0x8e>
	{
		SysTickDisable();
 80015c8:	f7ff ffda 	bl	8001580 <SysTickDisable>
		HAL_TIM_Base_Start_IT(&htim2);
 80015cc:	481e      	ldr	r0, [pc, #120]	@ (8001648 <measureDistance+0xa4>)
 80015ce:	f003 fc2b 	bl	8004e28 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_SET);
 80015d2:	897b      	ldrh	r3, [r7, #10]
 80015d4:	2201      	movs	r2, #1
 80015d6:	4619      	mov	r1, r3
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f001 fdc6 	bl	800316a <HAL_GPIO_WritePin>
		triggerTime = 0;//reset the variable
 80015de:	4b1b      	ldr	r3, [pc, #108]	@ (800164c <measureDistance+0xa8>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	801a      	strh	r2, [r3, #0]
		asm ("nop");//to avoid program freezing
 80015e4:	bf00      	nop
		while(triggerTime < TriggerDuration);
 80015e6:	bf00      	nop
 80015e8:	4b18      	ldr	r3, [pc, #96]	@ (800164c <measureDistance+0xa8>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d9fb      	bls.n	80015e8 <measureDistance+0x44>
		HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_RESET);
 80015f0:	897b      	ldrh	r3, [r7, #10]
 80015f2:	2200      	movs	r2, #0
 80015f4:	4619      	mov	r1, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f001 fdb7 	bl	800316a <HAL_GPIO_WritePin>
		while(!HAL_GPIO_ReadPin(echoPort, echoPin));
 80015fc:	bf00      	nop
 80015fe:	893b      	ldrh	r3, [r7, #8]
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f001 fd9a 	bl	800313c <HAL_GPIO_ReadPin>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f7      	beq.n	80015fe <measureDistance+0x5a>
		distance = 0;//reset the variable
 800160e:	4b10      	ldr	r3, [pc, #64]	@ (8001650 <measureDistance+0xac>)
 8001610:	2200      	movs	r2, #0
 8001612:	801a      	strh	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(echoPort, echoPin));
 8001614:	bf00      	nop
 8001616:	893b      	ldrh	r3, [r7, #8]
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f001 fd8e 	bl	800313c <HAL_GPIO_ReadPin>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f7      	bne.n	8001616 <measureDistance+0x72>
		HAL_TIM_Base_Stop_IT(&htim2);
 8001626:	4808      	ldr	r0, [pc, #32]	@ (8001648 <measureDistance+0xa4>)
 8001628:	f003 fc50 	bl	8004ecc <HAL_TIM_Base_Stop_IT>
		SysTickEnable();
 800162c:	f7ff ff96 	bl	800155c <SysTickEnable>
 8001630:	e003      	b.n	800163a <measureDistance+0x96>
	}else//give max distance if ECHO pin is still busy
	{
		distance = 500;
 8001632:	4b07      	ldr	r3, [pc, #28]	@ (8001650 <measureDistance+0xac>)
 8001634:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001638:	801a      	strh	r2, [r3, #0]
	}
	return distance;
 800163a:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <measureDistance+0xac>)
 800163c:	881b      	ldrh	r3, [r3, #0]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003a4 	.word	0x200003a4
 800164c:	2000026a 	.word	0x2000026a
 8001650:	20000268 	.word	0x20000268

08001654 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af02      	add	r7, sp, #8
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	f023 030f 	bic.w	r3, r3, #15
 8001664:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	011b      	lsls	r3, r3, #4
 800166a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	f043 030c 	orr.w	r3, r3, #12
 8001672:	b2db      	uxtb	r3, r3
 8001674:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	b2db      	uxtb	r3, r3
 800167e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001680:	7bbb      	ldrb	r3, [r7, #14]
 8001682:	f043 030c 	orr.w	r3, r3, #12
 8001686:	b2db      	uxtb	r3, r3
 8001688:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800168a:	7bbb      	ldrb	r3, [r7, #14]
 800168c:	f043 0308 	orr.w	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	2364      	movs	r3, #100	@ 0x64
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2304      	movs	r3, #4
 800169e:	214e      	movs	r1, #78	@ 0x4e
 80016a0:	4803      	ldr	r0, [pc, #12]	@ (80016b0 <lcd_send_cmd+0x5c>)
 80016a2:	f001 febf 	bl	8003424 <HAL_I2C_Master_Transmit>
}
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000308 	.word	0x20000308

080016b4 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80016b8:	2032      	movs	r0, #50	@ 0x32
 80016ba:	f001 f927 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x30);
 80016be:	2030      	movs	r0, #48	@ 0x30
 80016c0:	f7ff ffc8 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80016c4:	2005      	movs	r0, #5
 80016c6:	f001 f921 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x30);
 80016ca:	2030      	movs	r0, #48	@ 0x30
 80016cc:	f7ff ffc2 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80016d0:	2001      	movs	r0, #1
 80016d2:	f001 f91b 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x30);
 80016d6:	2030      	movs	r0, #48	@ 0x30
 80016d8:	f7ff ffbc 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f001 f915 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80016e2:	2020      	movs	r0, #32
 80016e4:	f7ff ffb6 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(10);
 80016e8:	200a      	movs	r0, #10
 80016ea:	f001 f90f 	bl	800290c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80016ee:	2028      	movs	r0, #40	@ 0x28
 80016f0:	f7ff ffb0 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f001 f909 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80016fa:	2008      	movs	r0, #8
 80016fc:	f7ff ffaa 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f001 f903 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff ffa4 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f001 f8fd 	bl	800290c <HAL_Delay>
	HAL_Delay(1);
 8001712:	2001      	movs	r0, #1
 8001714:	f001 f8fa 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001718:	2006      	movs	r0, #6
 800171a:	f7ff ff9b 	bl	8001654 <lcd_send_cmd>
	HAL_Delay(1);
 800171e:	2001      	movs	r0, #1
 8001720:	f001 f8f4 	bl	800290c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001724:	200c      	movs	r0, #12
 8001726:	f7ff ff95 	bl	8001654 <lcd_send_cmd>
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001730:	b590      	push	{r4, r7, lr}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001736:	f001 f887 	bl	8002848 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800173a:	f000 f92f 	bl	800199c <SystemClock_Config>
	HAL_Delay(1000);
 800173e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001742:	f001 f8e3 	bl	800290c <HAL_Delay>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001746:	f000 fb81 	bl	8001e4c <MX_GPIO_Init>
	MX_I2C1_Init();
 800174a:	f000 f96d 	bl	8001a28 <MX_I2C1_Init>
	MX_TIM1_Init();
 800174e:	f000 f999 	bl	8001a84 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001752:	f000 fa43 	bl	8001bdc <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001756:	f000 fafb 	bl	8001d50 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800175a:	f000 fb23 	bl	8001da4 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800175e:	f000 fb4b 	bl	8001df8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

		// Initialize the ACC system
		      ACC_Init();
 8001762:	f7ff fcb5 	bl	80010d0 <ACC_Init>

		      // Enable ACC with 70% target speed
		      ACC_Enable(70);
 8001766:	2046      	movs	r0, #70	@ 0x46
 8001768:	f7ff fcd4 	bl	8001114 <ACC_Enable>

		      // Set following distance to 60cm
		      ACC_SetFollowingDistance(60);
 800176c:	203c      	movs	r0, #60	@ 0x3c
 800176e:	f7ff fcf9 	bl	8001164 <ACC_SetFollowingDistance>

//	Motors_Init();
//	Set_Speed(70);
//	Move_Forward();

	lcd_init();
 8001772:	f7ff ff9f 	bl	80016b4 <lcd_init>

	Ringbuf_init();
 8001776:	f000 ff9b 	bl	80026b0 <Ringbuf_init>

	MPU6050_Init(&hi2c1);
 800177a:	4875      	ldr	r0, [pc, #468]	@ (8001950 <main+0x220>)
 800177c:	f000 fc00 	bl	8001f80 <MPU6050_Init>


	uint16_t distancesInCm[3];
	/* USER CODE END 2 */
	HAL_UART_Receive_IT(&huart3, &rxChar1, 1);
 8001780:	2201      	movs	r2, #1
 8001782:	4974      	ldr	r1, [pc, #464]	@ (8001954 <main+0x224>)
 8001784:	4874      	ldr	r0, [pc, #464]	@ (8001958 <main+0x228>)
 8001786:	f004 fbbb 	bl	8005f00 <HAL_UART_Receive_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001790:	4872      	ldr	r0, [pc, #456]	@ (800195c <main+0x22c>)
 8001792:	f001 fcea 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800179c:	486f      	ldr	r0, [pc, #444]	@ (800195c <main+0x22c>)
 800179e:	f001 fce4 	bl	800316a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a8:	486c      	ldr	r0, [pc, #432]	@ (800195c <main+0x22c>)
 80017aa:	f001 fcde 	bl	800316a <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_Delay(10);
 80017ae:	200a      	movs	r0, #10
 80017b0:	f001 f8ac 	bl	800290c <HAL_Delay>
		/* USER CODE END WHILE */
		/* USER CODE BEGIN 3 */

		// Read MPU6050 data
		MPU6050_ReadAcceleration(&hi2c1, &mpuData);
 80017b4:	496a      	ldr	r1, [pc, #424]	@ (8001960 <main+0x230>)
 80017b6:	4866      	ldr	r0, [pc, #408]	@ (8001950 <main+0x220>)
 80017b8:	f000 fc0e 	bl	8001fd8 <MPU6050_ReadAcceleration>
		//	IMA_Update();
		x_acc = (mpuData.acc_x_raw / 8192) ;
 80017bc:	4b68      	ldr	r3, [pc, #416]	@ (8001960 <main+0x230>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da02      	bge.n	80017cc <main+0x9c>
 80017c6:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 80017ca:	331f      	adds	r3, #31
 80017cc:	135b      	asrs	r3, r3, #13
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	4b64      	ldr	r3, [pc, #400]	@ (8001964 <main+0x234>)
 80017d2:	801a      	strh	r2, [r3, #0]
		y_acc = (mpuData.acc_y_raw / 8192) ;
 80017d4:	4b62      	ldr	r3, [pc, #392]	@ (8001960 <main+0x230>)
 80017d6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	da02      	bge.n	80017e4 <main+0xb4>
 80017de:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 80017e2:	331f      	adds	r3, #31
 80017e4:	135b      	asrs	r3, r3, #13
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <main+0x238>)
 80017ea:	801a      	strh	r2, [r3, #0]
		z_acc = (mpuData.acc_z_raw / 8192) ;
 80017ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001960 <main+0x230>)
 80017ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	da02      	bge.n	80017fc <main+0xcc>
 80017f6:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 80017fa:	331f      	adds	r3, #31
 80017fc:	135b      	asrs	r3, r3, #13
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b5a      	ldr	r3, [pc, #360]	@ (800196c <main+0x23c>)
 8001802:	801a      	strh	r2, [r3, #0]
		accelerate_g  = sqrt((x_acc^2) + (y_acc^2) + (z_acc^2) ) ;
 8001804:	4b57      	ldr	r3, [pc, #348]	@ (8001964 <main+0x234>)
 8001806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180a:	f083 0302 	eor.w	r3, r3, #2
 800180e:	b21b      	sxth	r3, r3
 8001810:	461a      	mov	r2, r3
 8001812:	4b55      	ldr	r3, [pc, #340]	@ (8001968 <main+0x238>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	f083 0302 	eor.w	r3, r3, #2
 800181c:	b21b      	sxth	r3, r3
 800181e:	4413      	add	r3, r2
 8001820:	4a52      	ldr	r2, [pc, #328]	@ (800196c <main+0x23c>)
 8001822:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001826:	f082 0202 	eor.w	r2, r2, #2
 800182a:	b212      	sxth	r2, r2
 800182c:	4413      	add	r3, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fde8 	bl	8000404 <__aeabi_i2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f009 fc4c 	bl	800b0d8 <sqrt>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f8f6 	bl	8000a38 <__aeabi_d2iz>
 800184c:	4603      	mov	r3, r0
 800184e:	b21a      	sxth	r2, r3
 8001850:	4b47      	ldr	r3, [pc, #284]	@ (8001970 <main+0x240>)
 8001852:	801a      	strh	r2, [r3, #0]
		roll_x = (mpuData.gyro_x_raw / 131 ) ;
 8001854:	4b42      	ldr	r3, [pc, #264]	@ (8001960 <main+0x230>)
 8001856:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800185a:	4a46      	ldr	r2, [pc, #280]	@ (8001974 <main+0x244>)
 800185c:	fb82 1203 	smull	r1, r2, r2, r3
 8001860:	1152      	asrs	r2, r2, #5
 8001862:	17db      	asrs	r3, r3, #31
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	b21a      	sxth	r2, r3
 8001868:	4b43      	ldr	r3, [pc, #268]	@ (8001978 <main+0x248>)
 800186a:	801a      	strh	r2, [r3, #0]
		roll_y = (mpuData.gyro_y_raw / 131 ) ;
 800186c:	4b3c      	ldr	r3, [pc, #240]	@ (8001960 <main+0x230>)
 800186e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001872:	4a40      	ldr	r2, [pc, #256]	@ (8001974 <main+0x244>)
 8001874:	fb82 1203 	smull	r1, r2, r2, r3
 8001878:	1152      	asrs	r2, r2, #5
 800187a:	17db      	asrs	r3, r3, #31
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	b21a      	sxth	r2, r3
 8001880:	4b3e      	ldr	r3, [pc, #248]	@ (800197c <main+0x24c>)
 8001882:	801a      	strh	r2, [r3, #0]
		if ( (accelerate_g > 2) || (roll_x > 200) || (roll_y > 200))
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <main+0x240>)
 8001886:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188a:	2b02      	cmp	r3, #2
 800188c:	dc09      	bgt.n	80018a2 <main+0x172>
 800188e:	4b3a      	ldr	r3, [pc, #232]	@ (8001978 <main+0x248>)
 8001890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001894:	2bc8      	cmp	r3, #200	@ 0xc8
 8001896:	dc04      	bgt.n	80018a2 <main+0x172>
 8001898:	4b38      	ldr	r3, [pc, #224]	@ (800197c <main+0x24c>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	2bc8      	cmp	r3, #200	@ 0xc8
 80018a0:	dd1c      	ble.n	80018dc <main+0x1ac>
		{
			uint32_t now = HAL_GetTick();
 80018a2:	f001 f829 	bl	80028f8 <HAL_GetTick>
 80018a6:	60b8      	str	r0, [r7, #8]
			if ((now - lastSendMs) >= SEND_INTERVAL_MS)
 80018a8:	4b35      	ldr	r3, [pc, #212]	@ (8001980 <main+0x250>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d311      	bcc.n	80018dc <main+0x1ac>
			{
				HAL_UART_Transmit(&huart3, (uint8_t *)startupMsg,strlen(startupMsg), HAL_MAX_DELAY);
 80018b8:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <main+0x254>)
 80018ba:	681c      	ldr	r4, [r3, #0]
 80018bc:	4b31      	ldr	r3, [pc, #196]	@ (8001984 <main+0x254>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fc45 	bl	8000150 <strlen>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	4621      	mov	r1, r4
 80018d0:	4821      	ldr	r0, [pc, #132]	@ (8001958 <main+0x228>)
 80018d2:	f004 fa8a 	bl	8005dea <HAL_UART_Transmit>
				lastSendMs = now;
 80018d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001980 <main+0x250>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	6013      	str	r3, [r2, #0]
			}  	  	  }
		/* USER CODE BEGIN 3 */

		// 		 Read GPS data
		for(uint16_t i=0; i<3; i++)
 80018dc:	2300      	movs	r3, #0
 80018de:	81fb      	strh	r3, [r7, #14]
 80018e0:	e01f      	b.n	8001922 <main+0x1f2>
		{
			sensor = i;//update sensor index in timer2
 80018e2:	4a29      	ldr	r2, [pc, #164]	@ (8001988 <main+0x258>)
 80018e4:	89fb      	ldrh	r3, [r7, #14]
 80018e6:	8013      	strh	r3, [r2, #0]
			distancesInCm[i] = measureDistance(triggerPorts[i], triggerPins[i], echoPorts[i], echoPins[i]);
 80018e8:	89fb      	ldrh	r3, [r7, #14]
 80018ea:	4a28      	ldr	r2, [pc, #160]	@ (800198c <main+0x25c>)
 80018ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018f0:	89fb      	ldrh	r3, [r7, #14]
 80018f2:	4a27      	ldr	r2, [pc, #156]	@ (8001990 <main+0x260>)
 80018f4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	4a26      	ldr	r2, [pc, #152]	@ (8001994 <main+0x264>)
 80018fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001900:	89fb      	ldrh	r3, [r7, #14]
 8001902:	4c25      	ldr	r4, [pc, #148]	@ (8001998 <main+0x268>)
 8001904:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001908:	89fc      	ldrh	r4, [r7, #14]
 800190a:	f7ff fe4b 	bl	80015a4 <measureDistance>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	0063      	lsls	r3, r4, #1
 8001914:	3310      	adds	r3, #16
 8001916:	443b      	add	r3, r7
 8001918:	f823 2c10 	strh.w	r2, [r3, #-16]
		for(uint16_t i=0; i<3; i++)
 800191c:	89fb      	ldrh	r3, [r7, #14]
 800191e:	3301      	adds	r3, #1
 8001920:	81fb      	strh	r3, [r7, #14]
 8001922:	89fb      	ldrh	r3, [r7, #14]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d9dc      	bls.n	80018e2 <main+0x1b2>

		}

     	ACC_Update(distancesInCm[0]);
 8001928:	883b      	ldrh	r3, [r7, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fc2e 	bl	800118c <ACC_Update>
		Turn_Left(distancesInCm[1], distancesInCm[2], 70);
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4618      	mov	r0, r3
 8001934:	88bb      	ldrh	r3, [r7, #4]
 8001936:	2246      	movs	r2, #70	@ 0x46
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff fde6 	bl	800150a <Turn_Left>


		Turn_Right(distancesInCm[1], distancesInCm[2], 70);
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	4618      	mov	r0, r3
 8001942:	88bb      	ldrh	r3, [r7, #4]
 8001944:	2246      	movs	r2, #70	@ 0x46
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff fdb8 	bl	80014bc <Turn_Right>
		HAL_Delay(10);
 800194c:	e72f      	b.n	80017ae <main+0x7e>
 800194e:	bf00      	nop
 8001950:	20000308 	.word	0x20000308
 8001954:	200002c4 	.word	0x200002c4
 8001958:	2000047c 	.word	0x2000047c
 800195c:	40011000 	.word	0x40011000
 8001960:	20000250 	.word	0x20000250
 8001964:	20000274 	.word	0x20000274
 8001968:	20000276 	.word	0x20000276
 800196c:	20000278 	.word	0x20000278
 8001970:	2000026e 	.word	0x2000026e
 8001974:	3e88cb3d 	.word	0x3e88cb3d
 8001978:	20000270 	.word	0x20000270
 800197c:	20000272 	.word	0x20000272
 8001980:	2000027c 	.word	0x2000027c
 8001984:	2000002c 	.word	0x2000002c
 8001988:	2000026c 	.word	0x2000026c
 800198c:	20000004 	.word	0x20000004
 8001990:	20000010 	.word	0x20000010
 8001994:	20000018 	.word	0x20000018
 8001998:	20000024 	.word	0x20000024

0800199c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b090      	sub	sp, #64	@ 0x40
 80019a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	2228      	movs	r2, #40	@ 0x28
 80019a8:	2100      	movs	r1, #0
 80019aa:	4618      	mov	r0, r3
 80019ac:	f006 f845 	bl	8007a3a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019be:	2301      	movs	r3, #1
 80019c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019cc:	2301      	movs	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019d0:	2302      	movs	r3, #2
 80019d2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019da:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4618      	mov	r0, r3
 80019e6:	f002 fdbf 	bl	8004568 <HAL_RCC_OscConfig>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80019f0:	f000 fa86 	bl	8001f00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019f4:	230f      	movs	r3, #15
 80019f6:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019f8:	2302      	movs	r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a04:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 f82c 	bl	8004a6c <HAL_RCC_ClockConfig>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <SystemClock_Config+0x82>
	{
		Error_Handler();
 8001a1a:	f000 fa71 	bl	8001f00 <Error_Handler>
	}
}
 8001a1e:	bf00      	nop
 8001a20:	3740      	adds	r7, #64	@ 0x40
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
	...

08001a28 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	@ (8001a7c <MX_I2C1_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <MX_I2C1_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a66:	f001 fb99 	bl	800319c <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001a70:	f000 fa46 	bl	8001f00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000308 	.word	0x20000308
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	000186a0 	.word	0x000186a0

08001a84 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b096      	sub	sp, #88	@ 0x58
 8001a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]
 8001ab2:	615a      	str	r2, [r3, #20]
 8001ab4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f005 ffbc 	bl	8007a3a <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001ac2:	4b44      	ldr	r3, [pc, #272]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001ac4:	4a44      	ldr	r2, [pc, #272]	@ (8001bd8 <MX_TIM1_Init+0x154>)
 8001ac6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8001ac8:	4b42      	ldr	r3, [pc, #264]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001aca:	2247      	movs	r2, #71	@ 0x47
 8001acc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ace:	4b41      	ldr	r3, [pc, #260]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001ad6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ada:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001adc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001aee:	4839      	ldr	r0, [pc, #228]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001af0:	f003 f94a 	bl	8004d88 <HAL_TIM_Base_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8001afa:	f000 fa01 	bl	8001f00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b02:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b04:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4832      	ldr	r0, [pc, #200]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001b0c:	f003 fcb8 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8001b16:	f000 f9f3 	bl	8001f00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b1a:	482e      	ldr	r0, [pc, #184]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001b1c:	f003 fa04 	bl	8004f28 <HAL_TIM_PWM_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8001b26:	f000 f9eb 	bl	8001f00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b36:	4619      	mov	r1, r3
 8001b38:	4826      	ldr	r0, [pc, #152]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001b3a:	f004 f845 	bl	8005bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001b44:	f000 f9dc 	bl	8001f00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b48:	2360      	movs	r3, #96	@ 0x60
 8001b4a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b54:	2300      	movs	r3, #0
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b60:	2300      	movs	r3, #0
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4819      	ldr	r0, [pc, #100]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001b6e:	f003 fbc5 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM1_Init+0xf8>
	{
		Error_Handler();
 8001b78:	f000 f9c2 	bl	8001f00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b80:	220c      	movs	r2, #12
 8001b82:	4619      	mov	r1, r3
 8001b84:	4813      	ldr	r0, [pc, #76]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001b86:	f003 fbb9 	bl	80052fc <HAL_TIM_PWM_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_TIM1_Init+0x110>
	{
		Error_Handler();
 8001b90:	f000 f9b6 	bl	8001f00 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bac:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001bb8:	f004 f864 	bl	8005c84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 8001bc2:	f000 f99d 	bl	8001f00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001bc6:	4803      	ldr	r0, [pc, #12]	@ (8001bd4 <MX_TIM1_Init+0x150>)
 8001bc8:	f000 fafc 	bl	80021c4 <HAL_TIM_MspPostInit>

}
 8001bcc:	bf00      	nop
 8001bce:	3758      	adds	r7, #88	@ 0x58
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000035c 	.word	0x2000035c
 8001bd8:	40012c00 	.word	0x40012c00

08001bdc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	463b      	mov	r3, r7
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
 8001bf6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001bf8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001bfa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001bfe:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c02:	2248      	movs	r2, #72	@ 0x48
 8001c04:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b1a      	ldr	r3, [pc, #104]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 57;
 8001c0c:	4b18      	ldr	r3, [pc, #96]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c0e:	2239      	movs	r2, #57	@ 0x39
 8001c10:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c12:	4b17      	ldr	r3, [pc, #92]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c1e:	4814      	ldr	r0, [pc, #80]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c20:	f003 f8b2 	bl	8004d88 <HAL_TIM_Base_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_TIM2_Init+0x52>
	{
		Error_Handler();
 8001c2a:	f000 f969 	bl	8001f00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c32:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c3c:	f003 fc20 	bl	8005480 <HAL_TIM_ConfigClockSource>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x6e>
	{
		Error_Handler();
 8001c46:	f000 f95b 	bl	8001f00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c52:	463b      	mov	r3, r7
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	@ (8001c70 <MX_TIM2_Init+0x94>)
 8001c58:	f003 ffb6 	bl	8005bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 8001c62:	f000 f94d 	bl	8001f00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200003a4 	.word	0x200003a4

08001c74 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)                      // Make sure this is USART2
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001d28 <HAL_UART_RxCpltCallback+0xb4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d127      	bne.n	8001cd4 <HAL_UART_RxCpltCallback+0x60>
	{
		/* 1. Store byte if there is still space */
		if (rxIndex < RX_BUFFER_SIZE - 1)
 8001c84:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_UART_RxCpltCallback+0xb8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b3e      	cmp	r3, #62	@ 0x3e
 8001c8a:	d80a      	bhi.n	8001ca2 <HAL_UART_RxCpltCallback+0x2e>
			rxBuffer[rxIndex++] = rxChar;
 8001c8c:	4b27      	ldr	r3, [pc, #156]	@ (8001d2c <HAL_UART_RxCpltCallback+0xb8>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	b2d1      	uxtb	r1, r2
 8001c94:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <HAL_UART_RxCpltCallback+0xb8>)
 8001c96:	7011      	strb	r1, [r2, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	4b25      	ldr	r3, [pc, #148]	@ (8001d30 <HAL_UART_RxCpltCallback+0xbc>)
 8001c9c:	7819      	ldrb	r1, [r3, #0]
 8001c9e:	4b25      	ldr	r3, [pc, #148]	@ (8001d34 <HAL_UART_RxCpltCallback+0xc0>)
 8001ca0:	5499      	strb	r1, [r3, r2]

		/* 2. End-of-message detected (we use '!' as terminator) */
		if (rxChar == '!')
 8001ca2:	4b23      	ldr	r3, [pc, #140]	@ (8001d30 <HAL_UART_RxCpltCallback+0xbc>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b21      	cmp	r3, #33	@ 0x21
 8001ca8:	d10f      	bne.n	8001cca <HAL_UART_RxCpltCallback+0x56>
		{
			rxBuffer[rxIndex] = '\0';          // Null-terminate the C-string
 8001caa:	4b20      	ldr	r3, [pc, #128]	@ (8001d2c <HAL_UART_RxCpltCallback+0xb8>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_UART_RxCpltCallback+0xc0>)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]
			rxSize  = rxIndex;                 // Save line length
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_UART_RxCpltCallback+0xb8>)
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_UART_RxCpltCallback+0xc4>)
 8001cbc:	701a      	strb	r2, [r3, #0]
			rxReady = 1;                       // Tell main code that line is ready
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_UART_RxCpltCallback+0xc8>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	701a      	strb	r2, [r3, #0]
			rxIndex = 0;                       // Reset index for the next line
 8001cc4:	4b19      	ldr	r3, [pc, #100]	@ (8001d2c <HAL_UART_RxCpltCallback+0xb8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
		}

		/* 3. Re-arm USART2 for the next byte */
		HAL_UART_Receive_IT(&huart2, &rxChar, 1);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4918      	ldr	r1, [pc, #96]	@ (8001d30 <HAL_UART_RxCpltCallback+0xbc>)
 8001cce:	4816      	ldr	r0, [pc, #88]	@ (8001d28 <HAL_UART_RxCpltCallback+0xb4>)
 8001cd0:	f004 f916 	bl	8005f00 <HAL_UART_Receive_IT>
	}
	if(huart == &huart3){
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8001d40 <HAL_UART_RxCpltCallback+0xcc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d120      	bne.n	8001d1e <HAL_UART_RxCpltCallback+0xaa>
		/* 1. Store byte if there is still space */
		if (rxIndex1 < RX_BUFFER_SIZE - 1)
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_UART_RxCpltCallback+0xd0>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ce2:	d80a      	bhi.n	8001cfa <HAL_UART_RxCpltCallback+0x86>
			rxBuffer1[rxIndex1++] = rxChar1;
 8001ce4:	4b17      	ldr	r3, [pc, #92]	@ (8001d44 <HAL_UART_RxCpltCallback+0xd0>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	b2d1      	uxtb	r1, r2
 8001cec:	4a15      	ldr	r2, [pc, #84]	@ (8001d44 <HAL_UART_RxCpltCallback+0xd0>)
 8001cee:	7011      	strb	r1, [r2, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b15      	ldr	r3, [pc, #84]	@ (8001d48 <HAL_UART_RxCpltCallback+0xd4>)
 8001cf4:	7819      	ldrb	r1, [r3, #0]
 8001cf6:	4b15      	ldr	r3, [pc, #84]	@ (8001d4c <HAL_UART_RxCpltCallback+0xd8>)
 8001cf8:	5499      	strb	r1, [r3, r2]

		/* 2. End-of-message detected (we use '!' as terminator) */
		if (rxChar1 == '\n')
 8001cfa:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_UART_RxCpltCallback+0xd4>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d108      	bne.n	8001d14 <HAL_UART_RxCpltCallback+0xa0>
		{
			rxBuffer1[rxIndex1] = '\0';          // Null-terminate the C-string
 8001d02:	4b10      	ldr	r3, [pc, #64]	@ (8001d44 <HAL_UART_RxCpltCallback+0xd0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_UART_RxCpltCallback+0xd8>)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	5499      	strb	r1, [r3, r2]
			//rxSize  = rxIndex;                 // Save line length
			rxIndex1 = 0;                       // Reset index for the next line
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <HAL_UART_RxCpltCallback+0xd0>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		}

		/* 3. Re-arm USART2 for the next byte */
		HAL_UART_Receive_IT(&huart3, &rxChar1, 1);
 8001d14:	2201      	movs	r2, #1
 8001d16:	490c      	ldr	r1, [pc, #48]	@ (8001d48 <HAL_UART_RxCpltCallback+0xd4>)
 8001d18:	4809      	ldr	r0, [pc, #36]	@ (8001d40 <HAL_UART_RxCpltCallback+0xcc>)
 8001d1a:	f004 f8f1 	bl	8005f00 <HAL_UART_Receive_IT>
	}
}
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000434 	.word	0x20000434
 8001d2c:	20000283 	.word	0x20000283
 8001d30:	20000282 	.word	0x20000282
 8001d34:	20000284 	.word	0x20000284
 8001d38:	20000281 	.word	0x20000281
 8001d3c:	20000280 	.word	0x20000280
 8001d40:	2000047c 	.word	0x2000047c
 8001d44:	200002c5 	.word	0x200002c5
 8001d48:	200002c4 	.word	0x200002c4
 8001d4c:	200002c8 	.word	0x200002c8

08001d50 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001d54:	4b11      	ldr	r3, [pc, #68]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d56:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <MX_USART1_UART_Init+0x50>)
 8001d58:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 8001d5a:	4b10      	ldr	r3, [pc, #64]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d5c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d60:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001d74:	4b09      	ldr	r3, [pc, #36]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d76:	220c      	movs	r2, #12
 8001d78:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d86:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <MX_USART1_UART_Init+0x4c>)
 8001d88:	f003 ffdf 	bl	8005d4a <HAL_UART_Init>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001d92:	f000 f8b5 	bl	8001f00 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200003ec 	.word	0x200003ec
 8001da0:	40013800 	.word	0x40013800

08001da4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001da8:	4b11      	ldr	r3, [pc, #68]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	@ (8001df4 <MX_USART2_UART_Init+0x50>)
 8001dac:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001dae:	4b10      	ldr	r3, [pc, #64]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001db4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dca:	220c      	movs	r2, #12
 8001dcc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dce:	4b08      	ldr	r3, [pc, #32]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dda:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_USART2_UART_Init+0x4c>)
 8001ddc:	f003 ffb5 	bl	8005d4a <HAL_UART_Init>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 8001de6:	f000 f88b 	bl	8001f00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000434 	.word	0x20000434
 8001df4:	40004400 	.word	0x40004400

08001df8 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <MX_USART3_UART_Init+0x50>)
 8001e00:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e04:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001e08:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_USART3_UART_Init+0x4c>)
 8001e30:	f003 ff8b 	bl	8005d4a <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001e3a:	f000 f861 	bl	8001f00 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000047c 	.word	0x2000047c
 8001e48:	40004800 	.word	0x40004800

08001e4c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e60:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a23      	ldr	r2, [pc, #140]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e66:	f043 0320 	orr.w	r3, r3, #32
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0320 	and.w	r3, r3, #32
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e7e:	f043 0304 	orr.w	r3, r3, #4
 8001e82:	6193      	str	r3, [r2, #24]
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e86:	699b      	ldr	r3, [r3, #24]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	60bb      	str	r3, [r7, #8]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	4b18      	ldr	r3, [pc, #96]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	4a17      	ldr	r2, [pc, #92]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	6193      	str	r3, [r2, #24]
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <MX_GPIO_Init+0xa8>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Trigger0_Pin|Trigger1_Pin|Trigger2_Pin|GPIO_PIN_3
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f247 1138 	movw	r1, #28984	@ 0x7138
 8001eae:	4812      	ldr	r0, [pc, #72]	@ (8001ef8 <MX_GPIO_Init+0xac>)
 8001eb0:	f001 f95b 	bl	800316a <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

	/*Configure GPIO pins : Echo0_Pin Echo1_Pin Echo2_Pin */
	GPIO_InitStruct.Pin = Echo0_Pin|Echo1_Pin|Echo2_Pin;
 8001eb4:	2370      	movs	r3, #112	@ 0x70
 8001eb6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	480d      	ldr	r0, [pc, #52]	@ (8001efc <MX_GPIO_Init+0xb0>)
 8001ec8:	f000 ffb4 	bl	8002e34 <HAL_GPIO_Init>

	/*Configure GPIO pins : Trigger0_Pin Trigger1_Pin Trigger2_Pin PB3
                           PB4 PB5 PB8 */
	GPIO_InitStruct.Pin = Trigger0_Pin|Trigger1_Pin|Trigger2_Pin|GPIO_PIN_3
 8001ecc:	f247 1338 	movw	r3, #28984	@ 0x7138
 8001ed0:	613b      	str	r3, [r7, #16]
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ede:	f107 0310 	add.w	r3, r7, #16
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4804      	ldr	r0, [pc, #16]	@ (8001ef8 <MX_GPIO_Init+0xac>)
 8001ee6:	f000 ffa5 	bl	8002e34 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001eea:	bf00      	nop
 8001eec:	3720      	adds	r7, #32
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40010800 	.word	0x40010800

08001f00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bc80      	pop	{r7}
 8001f0a:	4770      	bx	lr

08001f0c <MPU6050_WriteRegister>:
#include "mpu6050.h"
#include "stm32f1xx_hal.h"

// Write to MPU6050 register
void MPU6050_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t *data, uint8_t len)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af04      	add	r7, sp, #16
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	607a      	str	r2, [r7, #4]
 8001f16:	461a      	mov	r2, r3
 8001f18:	460b      	mov	r3, r1
 8001f1a:	72fb      	strb	r3, [r7, #11]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(hi2c, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8001f20:	7afb      	ldrb	r3, [r7, #11]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	7abb      	ldrb	r3, [r7, #10]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	9102      	str	r1, [sp, #8]
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2301      	movs	r3, #1
 8001f36:	21d0      	movs	r1, #208	@ 0xd0
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f001 fb71 	bl	8003620 <HAL_I2C_Mem_Write>
}
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <MPU6050_ReadRegister>:

// Read from MPU6050 register
void MPU6050_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg_addr, uint8_t *data, uint8_t len)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b088      	sub	sp, #32
 8001f4a:	af04      	add	r7, sp, #16
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	461a      	mov	r2, r3
 8001f52:	460b      	mov	r3, r1
 8001f54:	72fb      	strb	r3, [r7, #11]
 8001f56:	4613      	mov	r3, r2
 8001f58:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Read(hi2c, MPU6050_ADDR, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, HAL_MAX_DELAY);
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	7abb      	ldrb	r3, [r7, #10]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f04f 31ff 	mov.w	r1, #4294967295
 8001f66:	9102      	str	r1, [sp, #8]
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2301      	movs	r3, #1
 8001f70:	21d0      	movs	r1, #208	@ 0xd0
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f001 fc4e 	bl	8003814 <HAL_I2C_Mem_Read>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <MPU6050_Init>:
// Initialize MPU6050
void MPU6050_Init(I2C_HandleTypeDef *hi2c)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // Wake up MPU6050
    data = 0x00;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hi2c, PWR_MGMT_1_REG, &data, 1);
 8001f8c:	f107 020f 	add.w	r2, r7, #15
 8001f90:	2301      	movs	r3, #1
 8001f92:	216b      	movs	r1, #107	@ 0x6b
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffb9 	bl	8001f0c <MPU6050_WriteRegister>

    // Set sample rate to 1kHz
    data = 0x07;
 8001f9a:	2307      	movs	r3, #7
 8001f9c:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hi2c, SMPLRT_DIV_REG, &data, 1);
 8001f9e:	f107 020f 	add.w	r2, r7, #15
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	2119      	movs	r1, #25
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ffb0 	bl	8001f0c <MPU6050_WriteRegister>

    // Configure accelerometer (+/- 2g)
    data = 0x00;
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hi2c, ACCEL_CONFIG_REG, &data, 1);
 8001fb0:	f107 020f 	add.w	r2, r7, #15
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	211c      	movs	r1, #28
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffa7 	bl	8001f0c <MPU6050_WriteRegister>

    // Configure gyroscope (+/- 250 deg/s)
    data = 0x00;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
    MPU6050_WriteRegister(hi2c, GYRO_CONFIG_REG, &data, 1);
 8001fc2:	f107 020f 	add.w	r2, r7, #15
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	211b      	movs	r1, #27
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff ff9e 	bl	8001f0c <MPU6050_WriteRegister>
}
 8001fd0:	bf00      	nop
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <MPU6050_ReadAcceleration>:

// Read acceleration data
void MPU6050_ReadAcceleration(I2C_HandleTypeDef *hi2c, Struct_MPU6050 *mpu6050)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
    uint8_t buffer[6];
    uint8_t buffer2[6];

    MPU6050_ReadRegister(hi2c, ACCEL_XOUT_H_REG, buffer, 6);
 8001fe2:	f107 0210 	add.w	r2, r7, #16
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	213b      	movs	r1, #59	@ 0x3b
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffab 	bl	8001f46 <MPU6050_ReadRegister>

    mpu6050->acc_x_raw = (int16_t)(buffer[0] << 8 | buffer[1]);
 8001ff0:	7c3b      	ldrb	r3, [r7, #16]
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	7c7b      	ldrb	r3, [r7, #17]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	801a      	strh	r2, [r3, #0]
    mpu6050->acc_y_raw = (int16_t)(buffer[2] << 8 | buffer[3]);
 8002002:	7cbb      	ldrb	r3, [r7, #18]
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21a      	sxth	r2, r3
 8002008:	7cfb      	ldrb	r3, [r7, #19]
 800200a:	b21b      	sxth	r3, r3
 800200c:	4313      	orrs	r3, r2
 800200e:	b21a      	sxth	r2, r3
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	805a      	strh	r2, [r3, #2]
    mpu6050->acc_z_raw = (int16_t)(buffer[4] << 8 | buffer[5]);
 8002014:	7d3b      	ldrb	r3, [r7, #20]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b21a      	sxth	r2, r3
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	b21b      	sxth	r3, r3
 800201e:	4313      	orrs	r3, r2
 8002020:	b21a      	sxth	r2, r3
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	809a      	strh	r2, [r3, #4]
    MPU6050_ReadRegister(hi2c, GYRO_XOUT_H_REG, buffer2, 6);
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	2306      	movs	r3, #6
 800202c:	2143      	movs	r1, #67	@ 0x43
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff89 	bl	8001f46 <MPU6050_ReadRegister>
    mpu6050->gyro_x_raw = (int16_t)(buffer2[0] << 8 | buffer2[1]);
 8002034:	7a3b      	ldrb	r3, [r7, #8]
 8002036:	021b      	lsls	r3, r3, #8
 8002038:	b21a      	sxth	r2, r3
 800203a:	7a7b      	ldrb	r3, [r7, #9]
 800203c:	b21b      	sxth	r3, r3
 800203e:	4313      	orrs	r3, r2
 8002040:	b21a      	sxth	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	80da      	strh	r2, [r3, #6]
    mpu6050->gyro_y_raw = (int16_t)(buffer2[2] << 8 | buffer2[3]);
 8002046:	7abb      	ldrb	r3, [r7, #10]
 8002048:	021b      	lsls	r3, r3, #8
 800204a:	b21a      	sxth	r2, r3
 800204c:	7afb      	ldrb	r3, [r7, #11]
 800204e:	b21b      	sxth	r3, r3
 8002050:	4313      	orrs	r3, r2
 8002052:	b21a      	sxth	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	811a      	strh	r2, [r3, #8]
    mpu6050->gyro_z_raw = (int16_t)(buffer2[4] << 8 | buffer2[6]);
 8002058:	7b3b      	ldrb	r3, [r7, #12]
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	b21a      	sxth	r2, r3
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	b21b      	sxth	r3, r3
 8002062:	4313      	orrs	r3, r2
 8002064:	b21a      	sxth	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	815a      	strh	r2, [r3, #10]


}
 800206a:	bf00      	nop
 800206c:	3718      	adds	r7, #24
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800207a:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_MspInit+0x5c>)
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6193      	str	r3, [r2, #24]
 8002086:	4b12      	ldr	r3, [pc, #72]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b0f      	ldr	r3, [pc, #60]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	4a0e      	ldr	r2, [pc, #56]	@ (80020d0 <HAL_MspInit+0x5c>)
 8002098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800209c:	61d3      	str	r3, [r2, #28]
 800209e:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_MspInit+0x5c>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020a6:	607b      	str	r3, [r7, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020aa:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <HAL_MspInit+0x60>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <HAL_MspInit+0x60>)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000

080020d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a15      	ldr	r2, [pc, #84]	@ (8002148 <HAL_I2C_MspInit+0x70>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d123      	bne.n	8002140 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b14      	ldr	r3, [pc, #80]	@ (800214c <HAL_I2C_MspInit+0x74>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	4a13      	ldr	r2, [pc, #76]	@ (800214c <HAL_I2C_MspInit+0x74>)
 80020fe:	f043 0308 	orr.w	r3, r3, #8
 8002102:	6193      	str	r3, [r2, #24]
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <HAL_I2C_MspInit+0x74>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002110:	23c0      	movs	r3, #192	@ 0xc0
 8002112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002114:	2312      	movs	r3, #18
 8002116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002118:	2303      	movs	r3, #3
 800211a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4619      	mov	r1, r3
 8002122:	480b      	ldr	r0, [pc, #44]	@ (8002150 <HAL_I2C_MspInit+0x78>)
 8002124:	f000 fe86 	bl	8002e34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_I2C_MspInit+0x74>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	4a07      	ldr	r2, [pc, #28]	@ (800214c <HAL_I2C_MspInit+0x74>)
 800212e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002132:	61d3      	str	r3, [r2, #28]
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <HAL_I2C_MspInit+0x74>)
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002140:	bf00      	nop
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40005400 	.word	0x40005400
 800214c:	40021000 	.word	0x40021000
 8002150:	40010c00 	.word	0x40010c00

08002154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a16      	ldr	r2, [pc, #88]	@ (80021bc <HAL_TIM_Base_MspInit+0x68>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d10c      	bne.n	8002180 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002166:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	4a15      	ldr	r2, [pc, #84]	@ (80021c0 <HAL_TIM_Base_MspInit+0x6c>)
 800216c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002170:	6193      	str	r3, [r2, #24]
 8002172:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800217e:	e018      	b.n	80021b2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002188:	d113      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218a:	4b0d      	ldr	r3, [pc, #52]	@ (80021c0 <HAL_TIM_Base_MspInit+0x6c>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b0a      	ldr	r3, [pc, #40]	@ (80021c0 <HAL_TIM_Base_MspInit+0x6c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60bb      	str	r3, [r7, #8]
 80021a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201c      	movs	r0, #28
 80021a8:	f000 fd5b 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f000 fd74 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40021000 	.word	0x40021000

080021c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_TIM_MspPostInit+0x5c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d118      	bne.n	8002216 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_TIM_MspPostInit+0x60>)
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	4a0e      	ldr	r2, [pc, #56]	@ (8002224 <HAL_TIM_MspPostInit+0x60>)
 80021ea:	f043 0304 	orr.w	r3, r3, #4
 80021ee:	6193      	str	r3, [r2, #24]
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_TIM_MspPostInit+0x60>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 80021fc:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8002200:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2302      	movs	r3, #2
 8002208:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 0310 	add.w	r3, r7, #16
 800220e:	4619      	mov	r1, r3
 8002210:	4805      	ldr	r0, [pc, #20]	@ (8002228 <HAL_TIM_MspPostInit+0x64>)
 8002212:	f000 fe0f 	bl	8002e34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002216:	bf00      	nop
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40021000 	.word	0x40021000
 8002228:	40010800 	.word	0x40010800

0800222c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b08c      	sub	sp, #48	@ 0x30
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	605a      	str	r2, [r3, #4]
 800223e:	609a      	str	r2, [r3, #8]
 8002240:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a5f      	ldr	r2, [pc, #380]	@ (80023c4 <HAL_UART_MspInit+0x198>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d13a      	bne.n	80022c2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224c:	4b5e      	ldr	r3, [pc, #376]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	4a5d      	ldr	r2, [pc, #372]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002252:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002256:	6193      	str	r3, [r2, #24]
 8002258:	4b5b      	ldr	r3, [pc, #364]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002264:	4b58      	ldr	r3, [pc, #352]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a57      	ldr	r2, [pc, #348]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800226a:	f043 0304 	orr.w	r3, r3, #4
 800226e:	6193      	str	r3, [r2, #24]
 8002270:	4b55      	ldr	r3, [pc, #340]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
 800227a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800227c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002286:	2303      	movs	r3, #3
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 0320 	add.w	r3, r7, #32
 800228e:	4619      	mov	r1, r3
 8002290:	484e      	ldr	r0, [pc, #312]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 8002292:	f000 fdcf 	bl	8002e34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800229c:	2300      	movs	r3, #0
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 0320 	add.w	r3, r7, #32
 80022a8:	4619      	mov	r1, r3
 80022aa:	4848      	ldr	r0, [pc, #288]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 80022ac:	f000 fdc2 	bl	8002e34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2100      	movs	r1, #0
 80022b4:	2025      	movs	r0, #37	@ 0x25
 80022b6:	f000 fcd4 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80022ba:	2025      	movs	r0, #37	@ 0x25
 80022bc:	f000 fced 	bl	8002c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022c0:	e07c      	b.n	80023bc <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a42      	ldr	r2, [pc, #264]	@ (80023d0 <HAL_UART_MspInit+0x1a4>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d138      	bne.n	800233e <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022cc:	4b3e      	ldr	r3, [pc, #248]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a3d      	ldr	r2, [pc, #244]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b3b      	ldr	r3, [pc, #236]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e4:	4b38      	ldr	r3, [pc, #224]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a37      	ldr	r2, [pc, #220]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022ea:	f043 0304 	orr.w	r3, r3, #4
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b35      	ldr	r3, [pc, #212]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022fc:	2304      	movs	r3, #4
 80022fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002308:	f107 0320 	add.w	r3, r7, #32
 800230c:	4619      	mov	r1, r3
 800230e:	482f      	ldr	r0, [pc, #188]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 8002310:	f000 fd90 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002314:	2308      	movs	r3, #8
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002320:	f107 0320 	add.w	r3, r7, #32
 8002324:	4619      	mov	r1, r3
 8002326:	4829      	ldr	r0, [pc, #164]	@ (80023cc <HAL_UART_MspInit+0x1a0>)
 8002328:	f000 fd84 	bl	8002e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800232c:	2200      	movs	r2, #0
 800232e:	2100      	movs	r1, #0
 8002330:	2026      	movs	r0, #38	@ 0x26
 8002332:	f000 fc96 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002336:	2026      	movs	r0, #38	@ 0x26
 8002338:	f000 fcaf 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 800233c:	e03e      	b.n	80023bc <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a24      	ldr	r2, [pc, #144]	@ (80023d4 <HAL_UART_MspInit+0x1a8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d139      	bne.n	80023bc <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002348:	4b1f      	ldr	r3, [pc, #124]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	4a1e      	ldr	r2, [pc, #120]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800234e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002352:	61d3      	str	r3, [r2, #28]
 8002354:	4b1c      	ldr	r3, [pc, #112]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002360:	4b19      	ldr	r3, [pc, #100]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a18      	ldr	r2, [pc, #96]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 8002366:	f043 0308 	orr.w	r3, r3, #8
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b16      	ldr	r3, [pc, #88]	@ (80023c8 <HAL_UART_MspInit+0x19c>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002378:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800237c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0320 	add.w	r3, r7, #32
 800238a:	4619      	mov	r1, r3
 800238c:	4812      	ldr	r0, [pc, #72]	@ (80023d8 <HAL_UART_MspInit+0x1ac>)
 800238e:	f000 fd51 	bl	8002e34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002392:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002396:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a0:	f107 0320 	add.w	r3, r7, #32
 80023a4:	4619      	mov	r1, r3
 80023a6:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <HAL_UART_MspInit+0x1ac>)
 80023a8:	f000 fd44 	bl	8002e34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2027      	movs	r0, #39	@ 0x27
 80023b2:	f000 fc56 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023b6:	2027      	movs	r0, #39	@ 0x27
 80023b8:	f000 fc6f 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 80023bc:	bf00      	nop
 80023be:	3730      	adds	r7, #48	@ 0x30
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013800 	.word	0x40013800
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40010800 	.word	0x40010800
 80023d0:	40004400 	.word	0x40004400
 80023d4:	40004800 	.word	0x40004800
 80023d8:	40010c00 	.word	0x40010c00

080023dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e0:	bf00      	nop
 80023e2:	e7fd      	b.n	80023e0 <NMI_Handler+0x4>

080023e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <HardFault_Handler+0x4>

080023ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <MemManage_Handler+0x4>

080023f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <BusFault_Handler+0x4>

080023fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <UsageFault_Handler+0x4>

08002404 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002408:	bf00      	nop
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002410:	b480      	push	{r7}
 8002412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002414:	bf00      	nop
 8002416:	46bd      	mov	sp, r7
 8002418:	bc80      	pop	{r7}
 800241a:	4770      	bx	lr

0800241c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
		if(timeout >0)  timeout--;
 800242c:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <SysTick_Handler+0x38>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <SysTick_Handler+0x1c>
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <SysTick_Handler+0x38>)
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	4b07      	ldr	r3, [pc, #28]	@ (8002460 <SysTick_Handler+0x38>)
 8002442:	801a      	strh	r2, [r3, #0]
			if (VCCTimeout>0) VCCTimeout--;
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <SysTick_Handler+0x3c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	dd04      	ble.n	8002456 <SysTick_Handler+0x2e>
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <SysTick_Handler+0x3c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3b01      	subs	r3, #1
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <SysTick_Handler+0x3c>)
 8002454:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002456:	f000 fa3d 	bl	80028d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200004c8 	.word	0x200004c8
 8002464:	20000000 	.word	0x20000000

08002468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(HAL_GPIO_ReadPin(echoPorts[sensor], echoPins[sensor]) && distance < 500)
 800246c:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <TIM2_IRQHandler+0x60>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	4b16      	ldr	r3, [pc, #88]	@ (80024cc <TIM2_IRQHandler+0x64>)
 8002474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002478:	4a13      	ldr	r2, [pc, #76]	@ (80024c8 <TIM2_IRQHandler+0x60>)
 800247a:	8812      	ldrh	r2, [r2, #0]
 800247c:	4611      	mov	r1, r2
 800247e:	4a14      	ldr	r2, [pc, #80]	@ (80024d0 <TIM2_IRQHandler+0x68>)
 8002480:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8002484:	4611      	mov	r1, r2
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fe58 	bl	800313c <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <TIM2_IRQHandler+0x40>
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <TIM2_IRQHandler+0x6c>)
 8002494:	881b      	ldrh	r3, [r3, #0]
 8002496:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800249a:	d205      	bcs.n	80024a8 <TIM2_IRQHandler+0x40>
		distance++;
 800249c:	4b0d      	ldr	r3, [pc, #52]	@ (80024d4 <TIM2_IRQHandler+0x6c>)
 800249e:	881b      	ldrh	r3, [r3, #0]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <TIM2_IRQHandler+0x6c>)
 80024a6:	801a      	strh	r2, [r3, #0]
	if(triggerTime < TriggerDuration)
 80024a8:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <TIM2_IRQHandler+0x70>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d805      	bhi.n	80024bc <TIM2_IRQHandler+0x54>
		triggerTime++;
 80024b0:	4b09      	ldr	r3, [pc, #36]	@ (80024d8 <TIM2_IRQHandler+0x70>)
 80024b2:	881b      	ldrh	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	4b07      	ldr	r3, [pc, #28]	@ (80024d8 <TIM2_IRQHandler+0x70>)
 80024ba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024bc:	4807      	ldr	r0, [pc, #28]	@ (80024dc <TIM2_IRQHandler+0x74>)
 80024be:	f002 fe2d 	bl	800511c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	2000026c 	.word	0x2000026c
 80024cc:	20000018 	.word	0x20000018
 80024d0:	20000024 	.word	0x20000024
 80024d4:	20000268 	.word	0x20000268
 80024d8:	2000026a 	.word	0x2000026a
 80024dc:	200003a4 	.word	0x200003a4

080024e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
		Uart_isr(&huart1);
 80024e4:	4803      	ldr	r0, [pc, #12]	@ (80024f4 <USART1_IRQHandler+0x14>)
 80024e6:	f000 f92b 	bl	8002740 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024ea:	4802      	ldr	r0, [pc, #8]	@ (80024f4 <USART1_IRQHandler+0x14>)
 80024ec:	f003 fd2e 	bl	8005f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	200003ec 	.word	0x200003ec

080024f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <USART2_IRQHandler+0x10>)
 80024fe:	f003 fd25 	bl	8005f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000434 	.word	0x20000434

0800250c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002510:	4802      	ldr	r0, [pc, #8]	@ (800251c <USART3_IRQHandler+0x10>)
 8002512:	f003 fd1b 	bl	8005f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000047c 	.word	0x2000047c

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <_kill>:

int _kill(int pid, int sig)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002538:	f005 fae4 	bl	8007b04 <__errno>
 800253c:	4603      	mov	r3, r0
 800253e:	2216      	movs	r2, #22
 8002540:	601a      	str	r2, [r3, #0]
  return -1;
 8002542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <_exit>:

void _exit (int status)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002556:	f04f 31ff 	mov.w	r1, #4294967295
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ffe7 	bl	800252e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <_exit+0x12>

08002564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00a      	b.n	800258c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002576:	f3af 8000 	nop.w
 800257a:	4601      	mov	r1, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf0      	blt.n	8002576 <_read+0x12>
  }

  return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e009      	b.n	80025c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf1      	blt.n	80025b0 <_write+0x12>
  }
  return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_close>:

int _close(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025fc:	605a      	str	r2, [r3, #4]
  return 0;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <_isatty>:

int _isatty(int file)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002612:	2301      	movs	r3, #1
}
 8002614:	4618      	mov	r0, r3
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	bc80      	pop	{r7}
 800261c:	4770      	bx	lr

0800261e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	60f8      	str	r0, [r7, #12]
 8002626:	60b9      	str	r1, [r7, #8]
 8002628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
	...

08002638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002640:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <_sbrk+0x5c>)
 8002642:	4b15      	ldr	r3, [pc, #84]	@ (8002698 <_sbrk+0x60>)
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800264c:	4b13      	ldr	r3, [pc, #76]	@ (800269c <_sbrk+0x64>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d102      	bne.n	800265a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <_sbrk+0x64>)
 8002656:	4a12      	ldr	r2, [pc, #72]	@ (80026a0 <_sbrk+0x68>)
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <_sbrk+0x64>)
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4413      	add	r3, r2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	429a      	cmp	r2, r3
 8002666:	d207      	bcs.n	8002678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002668:	f005 fa4c 	bl	8007b04 <__errno>
 800266c:	4603      	mov	r3, r0
 800266e:	220c      	movs	r2, #12
 8002670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002672:	f04f 33ff 	mov.w	r3, #4294967295
 8002676:	e009      	b.n	800268c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002678:	4b08      	ldr	r3, [pc, #32]	@ (800269c <_sbrk+0x64>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267e:	4b07      	ldr	r3, [pc, #28]	@ (800269c <_sbrk+0x64>)
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	4a05      	ldr	r2, [pc, #20]	@ (800269c <_sbrk+0x64>)
 8002688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800268a:	68fb      	ldr	r3, [r7, #12]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	20005000 	.word	0x20005000
 8002698:	00000400 	.word	0x00000400
 800269c:	200004c4 	.word	0x200004c4
 80026a0:	20000a38 	.word	0x20000a38

080026a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 80026b4:	4b0c      	ldr	r3, [pc, #48]	@ (80026e8 <Ringbuf_init+0x38>)
 80026b6:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <Ringbuf_init+0x3c>)
 80026b8:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 80026ba:	4b0d      	ldr	r3, [pc, #52]	@ (80026f0 <Ringbuf_init+0x40>)
 80026bc:	4a0d      	ldr	r2, [pc, #52]	@ (80026f4 <Ringbuf_init+0x44>)
 80026be:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80026c0:	4b0d      	ldr	r3, [pc, #52]	@ (80026f8 <Ringbuf_init+0x48>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <Ringbuf_init+0x48>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <Ringbuf_init+0x48>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <Ringbuf_init+0x48>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0220 	orr.w	r2, r2, #32
 80026de:	60da      	str	r2, [r3, #12]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr
 80026e8:	200008dc 	.word	0x200008dc
 80026ec:	200004cc 	.word	0x200004cc
 80026f0:	200008e0 	.word	0x200008e0
 80026f4:	200006d4 	.word	0x200006d4
 80026f8:	200003ec 	.word	0x200003ec

080026fc <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800270e:	3301      	adds	r3, #1
 8002710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002714:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	429a      	cmp	r2, r3
 8002720:	d009      	beq.n	8002736 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	79f9      	ldrb	r1, [r7, #7]
 800272c:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 800272e:	68fa      	ldr	r2, [r7, #12]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 8002736:	bf00      	nop
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0320 	and.w	r3, r3, #32
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <Uart_isr+0x4a>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0320 	and.w	r3, r3, #32
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800277a:	4b1e      	ldr	r3, [pc, #120]	@ (80027f4 <Uart_isr+0xb4>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ffba 	bl	80026fc <store_char>
        return;
 8002788:	e031      	b.n	80027ee <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002790:	2b00      	cmp	r3, #0
 8002792:	d02c      	beq.n	80027ee <Uart_isr+0xae>
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d027      	beq.n	80027ee <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800279e:	4b16      	ldr	r3, [pc, #88]	@ (80027f8 <Uart_isr+0xb8>)
 80027a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80027a4:	4b14      	ldr	r3, [pc, #80]	@ (80027f8 <Uart_isr+0xb8>)
 80027a6:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d108      	bne.n	80027c0 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027bc:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80027be:	e015      	b.n	80027ec <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80027c0:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <Uart_isr+0xb8>)
 80027c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80027c6:	4a0c      	ldr	r2, [pc, #48]	@ (80027f8 <Uart_isr+0xb8>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <Uart_isr+0xb8>)
 80027ce:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d8:	4a07      	ldr	r2, [pc, #28]	@ (80027f8 <Uart_isr+0xb8>)
 80027da:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	7bba      	ldrb	r2, [r7, #14]
 80027ea:	605a      	str	r2, [r3, #4]
    	return;
 80027ec:	bf00      	nop
    }
}
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200008dc 	.word	0x200008dc
 80027f8:	200006d4 	.word	0x200006d4

080027fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027fc:	f7ff ff52 	bl	80026a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480b      	ldr	r0, [pc, #44]	@ (8002830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002802:	490c      	ldr	r1, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002804:	4a0c      	ldr	r2, [pc, #48]	@ (8002838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a09      	ldr	r2, [pc, #36]	@ (800283c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002818:	4c09      	ldr	r4, [pc, #36]	@ (8002840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f005 f973 	bl	8007b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800282a:	f7fe ff81 	bl	8001730 <main>
  bx lr
 800282e:	4770      	bx	lr
  ldr r0, =_sdata
 8002830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002834:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002838:	0800b768 	.word	0x0800b768
  ldr r2, =_sbss
 800283c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002840:	20000a38 	.word	0x20000a38

08002844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002844:	e7fe      	b.n	8002844 <ADC1_2_IRQHandler>
	...

08002848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <HAL_Init+0x28>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a07      	ldr	r2, [pc, #28]	@ (8002870 <HAL_Init+0x28>)
 8002852:	f043 0310 	orr.w	r3, r3, #16
 8002856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002858:	2003      	movs	r0, #3
 800285a:	f000 f9f7 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800285e:	200f      	movs	r0, #15
 8002860:	f000 f808 	bl	8002874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002864:	f7ff fc06 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40022000 	.word	0x40022000

08002874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800287c:	4b12      	ldr	r3, [pc, #72]	@ (80028c8 <HAL_InitTick+0x54>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b12      	ldr	r3, [pc, #72]	@ (80028cc <HAL_InitTick+0x58>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	4619      	mov	r1, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800288a:	fbb3 f3f1 	udiv	r3, r3, r1
 800288e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002892:	4618      	mov	r0, r3
 8002894:	f000 fa0f 	bl	8002cb6 <HAL_SYSTICK_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e00e      	b.n	80028c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b0f      	cmp	r3, #15
 80028a6:	d80a      	bhi.n	80028be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028a8:	2200      	movs	r2, #0
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	f04f 30ff 	mov.w	r0, #4294967295
 80028b0:	f000 f9d7 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028b4:	4a06      	ldr	r2, [pc, #24]	@ (80028d0 <HAL_InitTick+0x5c>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	e000      	b.n	80028c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000030 	.word	0x20000030
 80028cc:	20000038 	.word	0x20000038
 80028d0:	20000034 	.word	0x20000034

080028d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028d8:	4b05      	ldr	r3, [pc, #20]	@ (80028f0 <HAL_IncTick+0x1c>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_IncTick+0x20>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4413      	add	r3, r2
 80028e4:	4a03      	ldr	r2, [pc, #12]	@ (80028f4 <HAL_IncTick+0x20>)
 80028e6:	6013      	str	r3, [r2, #0]
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr
 80028f0:	20000038 	.word	0x20000038
 80028f4:	200008e8 	.word	0x200008e8

080028f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return uwTick;
 80028fc:	4b02      	ldr	r3, [pc, #8]	@ (8002908 <HAL_GetTick+0x10>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	200008e8 	.word	0x200008e8

0800290c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800290c:	b590      	push	{r4, r7, lr}
 800290e:	b087      	sub	sp, #28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002914:	f7ff fff0 	bl	80028f8 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]
  uint32_t wait = Delay;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	617b      	str	r3, [r7, #20]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	f000 809b 	beq.w	8002a5e <HAL_Delay+0x152>
  {
    wait += (uint32_t)(uwTickFreq);
 8002928:	4b54      	ldr	r3, [pc, #336]	@ (8002a7c <HAL_Delay+0x170>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	4413      	add	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002934:	e093      	b.n	8002a5e <HAL_Delay+0x152>
  {
	  MPU6050_ReadAcceleration(&hi2c1, &mpuData);
 8002936:	4952      	ldr	r1, [pc, #328]	@ (8002a80 <HAL_Delay+0x174>)
 8002938:	4852      	ldr	r0, [pc, #328]	@ (8002a84 <HAL_Delay+0x178>)
 800293a:	f7ff fb4d 	bl	8001fd8 <MPU6050_ReadAcceleration>
	  		//	IMA_Update();
	  		x_acc = (mpuData.acc_x_raw / 8192) ;
 800293e:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_Delay+0x174>)
 8002940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da02      	bge.n	800294e <HAL_Delay+0x42>
 8002948:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800294c:	331f      	adds	r3, #31
 800294e:	135b      	asrs	r3, r3, #13
 8002950:	b21a      	sxth	r2, r3
 8002952:	4b4d      	ldr	r3, [pc, #308]	@ (8002a88 <HAL_Delay+0x17c>)
 8002954:	801a      	strh	r2, [r3, #0]
	  		y_acc = (mpuData.acc_y_raw / 8192) ;
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_Delay+0x174>)
 8002958:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800295c:	2b00      	cmp	r3, #0
 800295e:	da02      	bge.n	8002966 <HAL_Delay+0x5a>
 8002960:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 8002964:	331f      	adds	r3, #31
 8002966:	135b      	asrs	r3, r3, #13
 8002968:	b21a      	sxth	r2, r3
 800296a:	4b48      	ldr	r3, [pc, #288]	@ (8002a8c <HAL_Delay+0x180>)
 800296c:	801a      	strh	r2, [r3, #0]
	  		z_acc = (mpuData.acc_z_raw / 8192) ;
 800296e:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <HAL_Delay+0x174>)
 8002970:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da02      	bge.n	800297e <HAL_Delay+0x72>
 8002978:	f503 53ff 	add.w	r3, r3, #8160	@ 0x1fe0
 800297c:	331f      	adds	r3, #31
 800297e:	135b      	asrs	r3, r3, #13
 8002980:	b21a      	sxth	r2, r3
 8002982:	4b43      	ldr	r3, [pc, #268]	@ (8002a90 <HAL_Delay+0x184>)
 8002984:	801a      	strh	r2, [r3, #0]
	  		accelerate_g  = sqrt((x_acc^2) + (y_acc^2) + (z_acc^2) ) ;
 8002986:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_Delay+0x17c>)
 8002988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298c:	f083 0302 	eor.w	r3, r3, #2
 8002990:	b21b      	sxth	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	4b3d      	ldr	r3, [pc, #244]	@ (8002a8c <HAL_Delay+0x180>)
 8002996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299a:	f083 0302 	eor.w	r3, r3, #2
 800299e:	b21b      	sxth	r3, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002a90 <HAL_Delay+0x184>)
 80029a4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80029a8:	f082 0202 	eor.w	r2, r2, #2
 80029ac:	b212      	sxth	r2, r2
 80029ae:	4413      	add	r3, r2
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fd fd27 	bl	8000404 <__aeabi_i2d>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4610      	mov	r0, r2
 80029bc:	4619      	mov	r1, r3
 80029be:	f008 fb8b 	bl	800b0d8 <sqrt>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f7fe f835 	bl	8000a38 <__aeabi_d2iz>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b21a      	sxth	r2, r3
 80029d2:	4b30      	ldr	r3, [pc, #192]	@ (8002a94 <HAL_Delay+0x188>)
 80029d4:	801a      	strh	r2, [r3, #0]
	  		roll_x = (mpuData.gyro_x_raw / 131 ) ;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <HAL_Delay+0x174>)
 80029d8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029dc:	4a2e      	ldr	r2, [pc, #184]	@ (8002a98 <HAL_Delay+0x18c>)
 80029de:	fb82 1203 	smull	r1, r2, r2, r3
 80029e2:	1152      	asrs	r2, r2, #5
 80029e4:	17db      	asrs	r3, r3, #31
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	b21a      	sxth	r2, r3
 80029ea:	4b2c      	ldr	r3, [pc, #176]	@ (8002a9c <HAL_Delay+0x190>)
 80029ec:	801a      	strh	r2, [r3, #0]
	  		roll_y = (mpuData.gyro_y_raw / 131 ) ;
 80029ee:	4b24      	ldr	r3, [pc, #144]	@ (8002a80 <HAL_Delay+0x174>)
 80029f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029f4:	4a28      	ldr	r2, [pc, #160]	@ (8002a98 <HAL_Delay+0x18c>)
 80029f6:	fb82 1203 	smull	r1, r2, r2, r3
 80029fa:	1152      	asrs	r2, r2, #5
 80029fc:	17db      	asrs	r3, r3, #31
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	b21a      	sxth	r2, r3
 8002a02:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <HAL_Delay+0x194>)
 8002a04:	801a      	strh	r2, [r3, #0]
	  		if ( (accelerate_g > 2) || (roll_x > 200) || (roll_y > 200))
 8002a06:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <HAL_Delay+0x188>)
 8002a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	dc09      	bgt.n	8002a24 <HAL_Delay+0x118>
 8002a10:	4b22      	ldr	r3, [pc, #136]	@ (8002a9c <HAL_Delay+0x190>)
 8002a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a16:	2bc8      	cmp	r3, #200	@ 0xc8
 8002a18:	dc04      	bgt.n	8002a24 <HAL_Delay+0x118>
 8002a1a:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <HAL_Delay+0x194>)
 8002a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a20:	2bc8      	cmp	r3, #200	@ 0xc8
 8002a22:	dd1c      	ble.n	8002a5e <HAL_Delay+0x152>
	  		{
	  			uint32_t now = HAL_GetTick();
 8002a24:	f7ff ff68 	bl	80028f8 <HAL_GetTick>
 8002a28:	60f8      	str	r0, [r7, #12]
	  			if ((now - lastSendMs) >= SEND_INTERVAL_MS)
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa4 <HAL_Delay+0x198>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <HAL_Delay+0x19c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d311      	bcc.n	8002a5e <HAL_Delay+0x152>
	  			{
	  				HAL_UART_Transmit(&huart3, (uint8_t *)startupMsg,strlen(startupMsg), HAL_MAX_DELAY);
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002aac <HAL_Delay+0x1a0>)
 8002a3c:	681c      	ldr	r4, [r3, #0]
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002aac <HAL_Delay+0x1a0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fb84 	bl	8000150 <strlen>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8002a50:	4621      	mov	r1, r4
 8002a52:	4817      	ldr	r0, [pc, #92]	@ (8002ab0 <HAL_Delay+0x1a4>)
 8002a54:	f003 f9c9 	bl	8005dea <HAL_UART_Transmit>
	  				lastSendMs = now;
 8002a58:	4a12      	ldr	r2, [pc, #72]	@ (8002aa4 <HAL_Delay+0x198>)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6013      	str	r3, [r2, #0]
  while ((HAL_GetTick() - tickstart) < wait)
 8002a5e:	f7ff ff4b 	bl	80028f8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	f63f af63 	bhi.w	8002936 <HAL_Delay+0x2a>
	  			}  	  	  }
  }
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	371c      	adds	r7, #28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd90      	pop	{r4, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000038 	.word	0x20000038
 8002a80:	20000250 	.word	0x20000250
 8002a84:	20000308 	.word	0x20000308
 8002a88:	20000274 	.word	0x20000274
 8002a8c:	20000276 	.word	0x20000276
 8002a90:	20000278 	.word	0x20000278
 8002a94:	2000026e 	.word	0x2000026e
 8002a98:	3e88cb3d 	.word	0x3e88cb3d
 8002a9c:	20000270 	.word	0x20000270
 8002aa0:	20000272 	.word	0x20000272
 8002aa4:	200008e4 	.word	0x200008e4
 8002aa8:	0800b2fc 	.word	0x0800b2fc
 8002aac:	2000002c 	.word	0x2000002c
 8002ab0:	2000047c 	.word	0x2000047c

08002ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aca:	68ba      	ldr	r2, [r7, #8]
 8002acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ae6:	4a04      	ldr	r2, [pc, #16]	@ (8002af8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	60d3      	str	r3, [r2, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3714      	adds	r7, #20
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bc80      	pop	{r7}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00

08002afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b00:	4b04      	ldr	r3, [pc, #16]	@ (8002b14 <__NVIC_GetPriorityGrouping+0x18>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	0a1b      	lsrs	r3, r3, #8
 8002b06:	f003 0307 	and.w	r3, r3, #7
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db0b      	blt.n	8002b42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b2a:	79fb      	ldrb	r3, [r7, #7]
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	4906      	ldr	r1, [pc, #24]	@ (8002b4c <__NVIC_EnableIRQ+0x34>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	2001      	movs	r0, #1
 8002b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	e000e100 	.word	0xe000e100

08002b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	4603      	mov	r3, r0
 8002b58:	6039      	str	r1, [r7, #0]
 8002b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db0a      	blt.n	8002b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	490c      	ldr	r1, [pc, #48]	@ (8002b9c <__NVIC_SetPriority+0x4c>)
 8002b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	440b      	add	r3, r1
 8002b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b78:	e00a      	b.n	8002b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <__NVIC_SetPriority+0x50>)
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	3b04      	subs	r3, #4
 8002b88:	0112      	lsls	r2, r2, #4
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	761a      	strb	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000e100 	.word	0xe000e100
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b089      	sub	sp, #36	@ 0x24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f003 0307 	and.w	r3, r3, #7
 8002bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f1c3 0307 	rsb	r3, r3, #7
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	bf28      	it	cs
 8002bc2:	2304      	movcs	r3, #4
 8002bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d902      	bls.n	8002bd4 <NVIC_EncodePriority+0x30>
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	3b03      	subs	r3, #3
 8002bd2:	e000      	b.n	8002bd6 <NVIC_EncodePriority+0x32>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43da      	mvns	r2, r3
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	401a      	ands	r2, r3
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bec:	f04f 31ff 	mov.w	r1, #4294967295
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf6:	43d9      	mvns	r1, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bfc:	4313      	orrs	r3, r2
         );
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	@ 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff90 	bl	8002b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	@ (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff2d 	bl	8002ab4 <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff42 	bl	8002afc <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff90 	bl	8002ba4 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5f 	bl	8002b50 <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff35 	bl	8002b18 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffa2 	bl	8002c08 <SysTick_Config>
 8002cc4:	4603      	mov	r3, r0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d008      	beq.n	8002cf8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e020      	b.n	8002d3a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 020e 	bic.w	r2, r2, #14
 8002d06:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 0201 	bic.w	r2, r2, #1
 8002d16:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f202 	lsl.w	r2, r1, r2
 8002d26:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d005      	beq.n	8002d68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2204      	movs	r2, #4
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	e051      	b.n	8002e0c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 020e 	bic.w	r2, r2, #14
 8002d76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0201 	bic.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a22      	ldr	r2, [pc, #136]	@ (8002e18 <HAL_DMA_Abort_IT+0xd4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d029      	beq.n	8002de6 <HAL_DMA_Abort_IT+0xa2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a21      	ldr	r2, [pc, #132]	@ (8002e1c <HAL_DMA_Abort_IT+0xd8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d022      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x9e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e20 <HAL_DMA_Abort_IT+0xdc>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01a      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x98>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a1e      	ldr	r2, [pc, #120]	@ (8002e24 <HAL_DMA_Abort_IT+0xe0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d012      	beq.n	8002dd6 <HAL_DMA_Abort_IT+0x92>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <HAL_DMA_Abort_IT+0xe4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00a      	beq.n	8002dd0 <HAL_DMA_Abort_IT+0x8c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002e2c <HAL_DMA_Abort_IT+0xe8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d102      	bne.n	8002dca <HAL_DMA_Abort_IT+0x86>
 8002dc4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002dc8:	e00e      	b.n	8002de8 <HAL_DMA_Abort_IT+0xa4>
 8002dca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dce:	e00b      	b.n	8002de8 <HAL_DMA_Abort_IT+0xa4>
 8002dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002dd4:	e008      	b.n	8002de8 <HAL_DMA_Abort_IT+0xa4>
 8002dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dda:	e005      	b.n	8002de8 <HAL_DMA_Abort_IT+0xa4>
 8002ddc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002de0:	e002      	b.n	8002de8 <HAL_DMA_Abort_IT+0xa4>
 8002de2:	2310      	movs	r3, #16
 8002de4:	e000      	b.n	8002de8 <HAL_DMA_Abort_IT+0xa4>
 8002de6:	2301      	movs	r3, #1
 8002de8:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_DMA_Abort_IT+0xec>)
 8002dea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
    } 
  }
  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40020008 	.word	0x40020008
 8002e1c:	4002001c 	.word	0x4002001c
 8002e20:	40020030 	.word	0x40020030
 8002e24:	40020044 	.word	0x40020044
 8002e28:	40020058 	.word	0x40020058
 8002e2c:	4002006c 	.word	0x4002006c
 8002e30:	40020000 	.word	0x40020000

08002e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b08b      	sub	sp, #44	@ 0x2c
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e46:	e169      	b.n	800311c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e48:	2201      	movs	r2, #1
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	f040 8158 	bne.w	8003116 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	4a9a      	ldr	r2, [pc, #616]	@ (80030d4 <HAL_GPIO_Init+0x2a0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d05e      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e70:	4a98      	ldr	r2, [pc, #608]	@ (80030d4 <HAL_GPIO_Init+0x2a0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d875      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e76:	4a98      	ldr	r2, [pc, #608]	@ (80030d8 <HAL_GPIO_Init+0x2a4>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d058      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e7c:	4a96      	ldr	r2, [pc, #600]	@ (80030d8 <HAL_GPIO_Init+0x2a4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d86f      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e82:	4a96      	ldr	r2, [pc, #600]	@ (80030dc <HAL_GPIO_Init+0x2a8>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d052      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e88:	4a94      	ldr	r2, [pc, #592]	@ (80030dc <HAL_GPIO_Init+0x2a8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d869      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e8e:	4a94      	ldr	r2, [pc, #592]	@ (80030e0 <HAL_GPIO_Init+0x2ac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d04c      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002e94:	4a92      	ldr	r2, [pc, #584]	@ (80030e0 <HAL_GPIO_Init+0x2ac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d863      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002e9a:	4a92      	ldr	r2, [pc, #584]	@ (80030e4 <HAL_GPIO_Init+0x2b0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d046      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
 8002ea0:	4a90      	ldr	r2, [pc, #576]	@ (80030e4 <HAL_GPIO_Init+0x2b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d85d      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002ea6:	2b12      	cmp	r3, #18
 8002ea8:	d82a      	bhi.n	8002f00 <HAL_GPIO_Init+0xcc>
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d859      	bhi.n	8002f62 <HAL_GPIO_Init+0x12e>
 8002eae:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb4 <HAL_GPIO_Init+0x80>)
 8002eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb4:	08002f2f 	.word	0x08002f2f
 8002eb8:	08002f09 	.word	0x08002f09
 8002ebc:	08002f1b 	.word	0x08002f1b
 8002ec0:	08002f5d 	.word	0x08002f5d
 8002ec4:	08002f63 	.word	0x08002f63
 8002ec8:	08002f63 	.word	0x08002f63
 8002ecc:	08002f63 	.word	0x08002f63
 8002ed0:	08002f63 	.word	0x08002f63
 8002ed4:	08002f63 	.word	0x08002f63
 8002ed8:	08002f63 	.word	0x08002f63
 8002edc:	08002f63 	.word	0x08002f63
 8002ee0:	08002f63 	.word	0x08002f63
 8002ee4:	08002f63 	.word	0x08002f63
 8002ee8:	08002f63 	.word	0x08002f63
 8002eec:	08002f63 	.word	0x08002f63
 8002ef0:	08002f63 	.word	0x08002f63
 8002ef4:	08002f63 	.word	0x08002f63
 8002ef8:	08002f11 	.word	0x08002f11
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	4a79      	ldr	r2, [pc, #484]	@ (80030e8 <HAL_GPIO_Init+0x2b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d013      	beq.n	8002f2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f06:	e02c      	b.n	8002f62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	623b      	str	r3, [r7, #32]
          break;
 8002f0e:	e029      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	3304      	adds	r3, #4
 8002f16:	623b      	str	r3, [r7, #32]
          break;
 8002f18:	e024      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	3308      	adds	r3, #8
 8002f20:	623b      	str	r3, [r7, #32]
          break;
 8002f22:	e01f      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	330c      	adds	r3, #12
 8002f2a:	623b      	str	r3, [r7, #32]
          break;
 8002f2c:	e01a      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f36:	2304      	movs	r3, #4
 8002f38:	623b      	str	r3, [r7, #32]
          break;
 8002f3a:	e013      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d105      	bne.n	8002f50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f44:	2308      	movs	r3, #8
 8002f46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	611a      	str	r2, [r3, #16]
          break;
 8002f4e:	e009      	b.n	8002f64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f50:	2308      	movs	r3, #8
 8002f52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	615a      	str	r2, [r3, #20]
          break;
 8002f5a:	e003      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
          break;
 8002f60:	e000      	b.n	8002f64 <HAL_GPIO_Init+0x130>
          break;
 8002f62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2bff      	cmp	r3, #255	@ 0xff
 8002f68:	d801      	bhi.n	8002f6e <HAL_GPIO_Init+0x13a>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	e001      	b.n	8002f72 <HAL_GPIO_Init+0x13e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3304      	adds	r3, #4
 8002f72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2bff      	cmp	r3, #255	@ 0xff
 8002f78:	d802      	bhi.n	8002f80 <HAL_GPIO_Init+0x14c>
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	e002      	b.n	8002f86 <HAL_GPIO_Init+0x152>
 8002f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f82:	3b08      	subs	r3, #8
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	210f      	movs	r1, #15
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	401a      	ands	r2, r3
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 80b1 	beq.w	8003116 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6193      	str	r3, [r2, #24]
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <HAL_GPIO_Init+0x2b8>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f003 0301 	and.w	r3, r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fcc:	4a48      	ldr	r2, [pc, #288]	@ (80030f0 <HAL_GPIO_Init+0x2bc>)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	089b      	lsrs	r3, r3, #2
 8002fd2:	3302      	adds	r3, #2
 8002fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	220f      	movs	r2, #15
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a40      	ldr	r2, [pc, #256]	@ (80030f4 <HAL_GPIO_Init+0x2c0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <HAL_GPIO_Init+0x1ec>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80030f8 <HAL_GPIO_Init+0x2c4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00d      	beq.n	800301c <HAL_GPIO_Init+0x1e8>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a3e      	ldr	r2, [pc, #248]	@ (80030fc <HAL_GPIO_Init+0x2c8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <HAL_GPIO_Init+0x1e4>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3d      	ldr	r2, [pc, #244]	@ (8003100 <HAL_GPIO_Init+0x2cc>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_GPIO_Init+0x1e0>
 8003010:	2303      	movs	r3, #3
 8003012:	e006      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003014:	2304      	movs	r3, #4
 8003016:	e004      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003018:	2302      	movs	r3, #2
 800301a:	e002      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_GPIO_Init+0x1ee>
 8003020:	2300      	movs	r3, #0
 8003022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003024:	f002 0203 	and.w	r2, r2, #3
 8003028:	0092      	lsls	r2, r2, #2
 800302a:	4093      	lsls	r3, r2
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003032:	492f      	ldr	r1, [pc, #188]	@ (80030f0 <HAL_GPIO_Init+0x2bc>)
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	089b      	lsrs	r3, r3, #2
 8003038:	3302      	adds	r3, #2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d006      	beq.n	800305a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800304c:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	492c      	ldr	r1, [pc, #176]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]
 8003058:	e006      	b.n	8003068 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800305a:	4b2a      	ldr	r3, [pc, #168]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	43db      	mvns	r3, r3
 8003062:	4928      	ldr	r1, [pc, #160]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 8003064:	4013      	ands	r3, r2
 8003066:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d006      	beq.n	8003082 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003074:	4b23      	ldr	r3, [pc, #140]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	4922      	ldr	r1, [pc, #136]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	60cb      	str	r3, [r1, #12]
 8003080:	e006      	b.n	8003090 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003082:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 8003084:	68da      	ldr	r2, [r3, #12]
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	43db      	mvns	r3, r3
 800308a:	491e      	ldr	r1, [pc, #120]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 800308c:	4013      	ands	r3, r2
 800308e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d006      	beq.n	80030aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800309c:	4b19      	ldr	r3, [pc, #100]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4918      	ldr	r1, [pc, #96]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e006      	b.n	80030b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030aa:	4b16      	ldr	r3, [pc, #88]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	4914      	ldr	r1, [pc, #80]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d021      	beq.n	8003108 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c4:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	490e      	ldr	r1, [pc, #56]	@ (8003104 <HAL_GPIO_Init+0x2d0>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e021      	b.n	8003116 <HAL_GPIO_Init+0x2e2>
 80030d2:	bf00      	nop
 80030d4:	10320000 	.word	0x10320000
 80030d8:	10310000 	.word	0x10310000
 80030dc:	10220000 	.word	0x10220000
 80030e0:	10210000 	.word	0x10210000
 80030e4:	10120000 	.word	0x10120000
 80030e8:	10110000 	.word	0x10110000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40010000 	.word	0x40010000
 80030f4:	40010800 	.word	0x40010800
 80030f8:	40010c00 	.word	0x40010c00
 80030fc:	40011000 	.word	0x40011000
 8003100:	40011400 	.word	0x40011400
 8003104:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_GPIO_Init+0x304>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	43db      	mvns	r3, r3
 8003110:	4909      	ldr	r1, [pc, #36]	@ (8003138 <HAL_GPIO_Init+0x304>)
 8003112:	4013      	ands	r3, r2
 8003114:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003118:	3301      	adds	r3, #1
 800311a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	fa22 f303 	lsr.w	r3, r2, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	f47f ae8e 	bne.w	8002e48 <HAL_GPIO_Init+0x14>
  }
}
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	372c      	adds	r7, #44	@ 0x2c
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr
 8003138:	40010400 	.word	0x40010400

0800313c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	460b      	mov	r3, r1
 8003146:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	887b      	ldrh	r3, [r7, #2]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
 8003158:	e001      	b.n	800315e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800315e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
 8003172:	460b      	mov	r3, r1
 8003174:	807b      	strh	r3, [r7, #2]
 8003176:	4613      	mov	r3, r2
 8003178:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317a:	787b      	ldrb	r3, [r7, #1]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003180:	887a      	ldrh	r2, [r7, #2]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003186:	e003      	b.n	8003190 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	041a      	lsls	r2, r3, #16
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr
	...

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e12b      	b.n	8003406 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe ff88 	bl	80020d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	@ 0x24
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003200:	f001 fd7c 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8003204:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	4a81      	ldr	r2, [pc, #516]	@ (8003410 <HAL_I2C_Init+0x274>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d807      	bhi.n	8003220 <HAL_I2C_Init+0x84>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a80      	ldr	r2, [pc, #512]	@ (8003414 <HAL_I2C_Init+0x278>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e006      	b.n	800322e <HAL_I2C_Init+0x92>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4a7d      	ldr	r2, [pc, #500]	@ (8003418 <HAL_I2C_Init+0x27c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	bf94      	ite	ls
 8003228:	2301      	movls	r3, #1
 800322a:	2300      	movhi	r3, #0
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0e7      	b.n	8003406 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a78      	ldr	r2, [pc, #480]	@ (800341c <HAL_I2C_Init+0x280>)
 800323a:	fba2 2303 	umull	r2, r3, r2, r3
 800323e:	0c9b      	lsrs	r3, r3, #18
 8003240:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6a1b      	ldr	r3, [r3, #32]
 800325c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4a6a      	ldr	r2, [pc, #424]	@ (8003410 <HAL_I2C_Init+0x274>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d802      	bhi.n	8003270 <HAL_I2C_Init+0xd4>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	3301      	adds	r3, #1
 800326e:	e009      	b.n	8003284 <HAL_I2C_Init+0xe8>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003276:	fb02 f303 	mul.w	r3, r2, r3
 800327a:	4a69      	ldr	r2, [pc, #420]	@ (8003420 <HAL_I2C_Init+0x284>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	099b      	lsrs	r3, r3, #6
 8003282:	3301      	adds	r3, #1
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	430b      	orrs	r3, r1
 800328a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003296:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	495c      	ldr	r1, [pc, #368]	@ (8003410 <HAL_I2C_Init+0x274>)
 80032a0:	428b      	cmp	r3, r1
 80032a2:	d819      	bhi.n	80032d8 <HAL_I2C_Init+0x13c>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e59      	subs	r1, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b2:	1c59      	adds	r1, r3, #1
 80032b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032b8:	400b      	ands	r3, r1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_I2C_Init+0x138>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1e59      	subs	r1, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032cc:	3301      	adds	r3, #1
 80032ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d2:	e051      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 80032d4:	2304      	movs	r3, #4
 80032d6:	e04f      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d111      	bne.n	8003304 <HAL_I2C_Init+0x168>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	1e58      	subs	r0, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6859      	ldr	r1, [r3, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	440b      	add	r3, r1
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	3301      	adds	r3, #1
 80032f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf0c      	ite	eq
 80032fc:	2301      	moveq	r3, #1
 80032fe:	2300      	movne	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e012      	b.n	800332a <HAL_I2C_Init+0x18e>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1e58      	subs	r0, r3, #1
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6859      	ldr	r1, [r3, #4]
 800330c:	460b      	mov	r3, r1
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	0099      	lsls	r1, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Init+0x196>
 800332e:	2301      	movs	r3, #1
 8003330:	e022      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10e      	bne.n	8003358 <HAL_I2C_Init+0x1bc>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1e58      	subs	r0, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6859      	ldr	r1, [r3, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	440b      	add	r3, r1
 8003348:	fbb0 f3f3 	udiv	r3, r0, r3
 800334c:	3301      	adds	r3, #1
 800334e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003356:	e00f      	b.n	8003378 <HAL_I2C_Init+0x1dc>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1e58      	subs	r0, r3, #1
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	0099      	lsls	r1, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	fbb0 f3f3 	udiv	r3, r0, r3
 800336e:	3301      	adds	r3, #1
 8003370:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003374:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	6809      	ldr	r1, [r1, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69da      	ldr	r2, [r3, #28]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	431a      	orrs	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	430a      	orrs	r2, r1
 800339a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80033a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6911      	ldr	r1, [r2, #16]
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	68d2      	ldr	r2, [r2, #12]
 80033b2:	4311      	orrs	r1, r2
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	430a      	orrs	r2, r1
 80033d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0201 	orr.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	000186a0 	.word	0x000186a0
 8003414:	001e847f 	.word	0x001e847f
 8003418:	003d08ff 	.word	0x003d08ff
 800341c:	431bde83 	.word	0x431bde83
 8003420:	10624dd3 	.word	0x10624dd3

08003424 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b088      	sub	sp, #32
 8003428:	af02      	add	r7, sp, #8
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	607a      	str	r2, [r7, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	460b      	mov	r3, r1
 8003432:	817b      	strh	r3, [r7, #10]
 8003434:	4613      	mov	r3, r2
 8003436:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003438:	f7ff fa5e 	bl	80028f8 <HAL_GetTick>
 800343c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b20      	cmp	r3, #32
 8003448:	f040 80e0 	bne.w	800360c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2319      	movs	r3, #25
 8003452:	2201      	movs	r2, #1
 8003454:	4970      	ldr	r1, [pc, #448]	@ (8003618 <HAL_I2C_Master_Transmit+0x1f4>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fe50 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
 8003464:	e0d3      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x50>
 8003470:	2302      	movs	r3, #2
 8003472:	e0cc      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b01      	cmp	r3, #1
 8003488:	d007      	beq.n	800349a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f042 0201 	orr.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2221      	movs	r2, #33	@ 0x21
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2210      	movs	r2, #16
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	893a      	ldrh	r2, [r7, #8]
 80034ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a50      	ldr	r2, [pc, #320]	@ (800361c <HAL_I2C_Master_Transmit+0x1f8>)
 80034da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034dc:	8979      	ldrh	r1, [r7, #10]
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6a3a      	ldr	r2, [r7, #32]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f000 fc0a 	bl	8003cfc <I2C_MasterRequestWrite>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e08d      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003508:	e066      	b.n	80035d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	6a39      	ldr	r1, [r7, #32]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 ff0e 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00d      	beq.n	8003536 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	2b04      	cmp	r3, #4
 8003520:	d107      	bne.n	8003532 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003530:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e06b      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	b29a      	uxth	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800355e:	3b01      	subs	r3, #1
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11b      	bne.n	80035ac <HAL_I2C_Master_Transmit+0x188>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003578:	2b00      	cmp	r3, #0
 800357a:	d017      	beq.n	80035ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 ff05 	bl	80043c0 <I2C_WaitOnBTFFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00d      	beq.n	80035d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e01a      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d194      	bne.n	800350a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003608:	2300      	movs	r3, #0
 800360a:	e000      	b.n	800360e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800360c:	2302      	movs	r3, #2
  }
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	00100002 	.word	0x00100002
 800361c:	ffff0000 	.word	0xffff0000

08003620 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800363a:	f7ff f95d 	bl	80028f8 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	f040 80d9 	bne.w	8003800 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	2319      	movs	r3, #25
 8003654:	2201      	movs	r2, #1
 8003656:	496d      	ldr	r1, [pc, #436]	@ (800380c <HAL_I2C_Mem_Write+0x1ec>)
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fd4f 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	e0cc      	b.n	8003802 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800366e:	2b01      	cmp	r3, #1
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Mem_Write+0x56>
 8003672:	2302      	movs	r3, #2
 8003674:	e0c5      	b.n	8003802 <HAL_I2C_Mem_Write+0x1e2>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b01      	cmp	r3, #1
 800368a:	d007      	beq.n	800369c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f042 0201 	orr.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2221      	movs	r2, #33	@ 0x21
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2240      	movs	r2, #64	@ 0x40
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a3a      	ldr	r2, [r7, #32]
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a4d      	ldr	r2, [pc, #308]	@ (8003810 <HAL_I2C_Mem_Write+0x1f0>)
 80036dc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036de:	88f8      	ldrh	r0, [r7, #6]
 80036e0:	893a      	ldrh	r2, [r7, #8]
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	4603      	mov	r3, r0
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fb86 	bl	8003e00 <I2C_RequestMemoryWrite>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d052      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e081      	b.n	8003802 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fe14 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00d      	beq.n	800372a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b04      	cmp	r3, #4
 8003714:	d107      	bne.n	8003726 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003724:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e06b      	b.n	8003802 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b04      	cmp	r3, #4
 8003766:	d11b      	bne.n	80037a0 <HAL_I2C_Mem_Write+0x180>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376c:	2b00      	cmp	r3, #0
 800376e:	d017      	beq.n	80037a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003774:	781a      	ldrb	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800378a:	3b01      	subs	r3, #1
 800378c:	b29a      	uxth	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1aa      	bne.n	80036fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fe07 	bl	80043c0 <I2C_WaitOnBTFFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00d      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e016      	b.n	8003802 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003800:	2302      	movs	r3, #2
  }
}
 8003802:	4618      	mov	r0, r3
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	00100002 	.word	0x00100002
 8003810:	ffff0000 	.word	0xffff0000

08003814 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	@ 0x30
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	817b      	strh	r3, [r7, #10]
 8003826:	460b      	mov	r3, r1
 8003828:	813b      	strh	r3, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003832:	f7ff f861 	bl	80028f8 <HAL_GetTick>
 8003836:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b20      	cmp	r3, #32
 8003842:	f040 8250 	bne.w	8003ce6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	2319      	movs	r3, #25
 800384c:	2201      	movs	r2, #1
 800384e:	4982      	ldr	r1, [pc, #520]	@ (8003a58 <HAL_I2C_Mem_Read+0x244>)
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fc53 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
 800385e:	e243      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_I2C_Mem_Read+0x5a>
 800386a:	2302      	movs	r3, #2
 800386c:	e23c      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d007      	beq.n	8003894 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2222      	movs	r2, #34	@ 0x22
 80038a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2240      	movs	r2, #64	@ 0x40
 80038b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a62      	ldr	r2, [pc, #392]	@ (8003a5c <HAL_I2C_Mem_Read+0x248>)
 80038d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038d6:	88f8      	ldrh	r0, [r7, #6]
 80038d8:	893a      	ldrh	r2, [r7, #8]
 80038da:	8979      	ldrh	r1, [r7, #10]
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	4603      	mov	r3, r0
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fb20 	bl	8003f2c <I2C_RequestMemoryRead>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e1f8      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d113      	bne.n	8003926 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	61fb      	str	r3, [r7, #28]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61fb      	str	r3, [r7, #28]
 8003912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e1cc      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	2b01      	cmp	r3, #1
 800392c:	d11e      	bne.n	800396c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800393c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800393e:	b672      	cpsid	i
}
 8003940:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003942:	2300      	movs	r3, #0
 8003944:	61bb      	str	r3, [r7, #24]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	61bb      	str	r3, [r7, #24]
 8003956:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003966:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003968:	b662      	cpsie	i
}
 800396a:	e035      	b.n	80039d8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	2b02      	cmp	r3, #2
 8003972:	d11e      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003982:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003984:	b672      	cpsid	i
}
 8003986:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039ae:	b662      	cpsie	i
}
 80039b0:	e012      	b.n	80039d8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039c0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80039d8:	e172      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039de:	2b03      	cmp	r3, #3
 80039e0:	f200 811f 	bhi.w	8003c22 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d123      	bne.n	8003a34 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 fd2d 	bl	8004450 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e173      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	691a      	ldr	r2, [r3, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a32:	e145      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d152      	bne.n	8003ae2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	2200      	movs	r2, #0
 8003a44:	4906      	ldr	r1, [pc, #24]	@ (8003a60 <HAL_I2C_Mem_Read+0x24c>)
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fb58 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d008      	beq.n	8003a64 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e148      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
 8003a56:	bf00      	nop
 8003a58:	00100002 	.word	0x00100002
 8003a5c:	ffff0000 	.word	0xffff0000
 8003a60:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
}
 8003a66:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a82:	b2d2      	uxtb	r2, r2
 8003a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003aaa:	b662      	cpsie	i
}
 8003aac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ae0:	e0ee      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4981      	ldr	r1, [pc, #516]	@ (8003cf0 <HAL_I2C_Mem_Read+0x4dc>)
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fb05 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d001      	beq.n	8003afc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0f5      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b0a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0c:	b672      	cpsid	i
}
 8003b0e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	691a      	ldr	r2, [r3, #16]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	b2d2      	uxtb	r2, r2
 8003b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b22:	1c5a      	adds	r2, r3, #1
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003b42:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf4 <HAL_I2C_Mem_Read+0x4e0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	08db      	lsrs	r3, r3, #3
 8003b48:	4a6b      	ldr	r2, [pc, #428]	@ (8003cf8 <HAL_I2C_Mem_Read+0x4e4>)
 8003b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4e:	0a1a      	lsrs	r2, r3, #8
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	00da      	lsls	r2, r3, #3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d118      	bne.n	8003b9a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b82:	f043 0220 	orr.w	r2, r3, #32
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b8a:	b662      	cpsie	i
}
 8003b8c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0a6      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d1d9      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	3b01      	subs	r3, #1
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003bea:	b662      	cpsie	i
}
 8003bec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	691a      	ldr	r2, [r3, #16]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf8:	b2d2      	uxtb	r2, r2
 8003bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c20:	e04e      	b.n	8003cc0 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fc12 	bl	8004450 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e058      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c40:	b2d2      	uxtb	r2, r2
 8003c42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f003 0304 	and.w	r3, r3, #4
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d124      	bne.n	8003cc0 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7a:	2b03      	cmp	r3, #3
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c8c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	691a      	ldr	r2, [r3, #16]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f ae88 	bne.w	80039da <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e000      	b.n	8003ce8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
  }
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3728      	adds	r7, #40	@ 0x28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	00010004 	.word	0x00010004
 8003cf4:	20000030 	.word	0x20000030
 8003cf8:	14f8b589 	.word	0x14f8b589

08003cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b088      	sub	sp, #32
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	607a      	str	r2, [r7, #4]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d006      	beq.n	8003d26 <I2C_MasterRequestWrite+0x2a>
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d003      	beq.n	8003d26 <I2C_MasterRequestWrite+0x2a>
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d24:	d108      	bne.n	8003d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	e00b      	b.n	8003d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	2b12      	cmp	r3, #18
 8003d3e:	d107      	bne.n	8003d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f9cd 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00d      	beq.n	8003d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d76:	d103      	bne.n	8003d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e035      	b.n	8003df0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d8c:	d108      	bne.n	8003da0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d8e:	897b      	ldrh	r3, [r7, #10]
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d9c:	611a      	str	r2, [r3, #16]
 8003d9e:	e01b      	b.n	8003dd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003da0:	897b      	ldrh	r3, [r7, #10]
 8003da2:	11db      	asrs	r3, r3, #7
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	f003 0306 	and.w	r3, r3, #6
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	f063 030f 	orn	r3, r3, #15
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	490e      	ldr	r1, [pc, #56]	@ (8003df8 <I2C_MasterRequestWrite+0xfc>)
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 fa16 	bl	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e010      	b.n	8003df0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003dce:	897b      	ldrh	r3, [r7, #10]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	4907      	ldr	r1, [pc, #28]	@ (8003dfc <I2C_MasterRequestWrite+0x100>)
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fa06 	bl	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	00010008 	.word	0x00010008
 8003dfc:	00010002 	.word	0x00010002

08003e00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	4608      	mov	r0, r1
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	817b      	strh	r3, [r7, #10]
 8003e12:	460b      	mov	r3, r1
 8003e14:	813b      	strh	r3, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f960 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00d      	beq.n	8003e5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e50:	d103      	bne.n	8003e5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e05f      	b.n	8003f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e5e:	897b      	ldrh	r3, [r7, #10]
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	461a      	mov	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	6a3a      	ldr	r2, [r7, #32]
 8003e72:	492d      	ldr	r1, [pc, #180]	@ (8003f28 <I2C_RequestMemoryWrite+0x128>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f9bb 	bl	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e04c      	b.n	8003f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e84:	2300      	movs	r3, #0
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	6a39      	ldr	r1, [r7, #32]
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 fa46 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00d      	beq.n	8003ec6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d107      	bne.n	8003ec2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e02b      	b.n	8003f1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d105      	bne.n	8003ed8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ecc:	893b      	ldrh	r3, [r7, #8]
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	611a      	str	r2, [r3, #16]
 8003ed6:	e021      	b.n	8003f1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ed8:	893b      	ldrh	r3, [r7, #8]
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	b2da      	uxtb	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee8:	6a39      	ldr	r1, [r7, #32]
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fa20 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00d      	beq.n	8003f12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d107      	bne.n	8003f0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e005      	b.n	8003f1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f12:	893b      	ldrh	r3, [r7, #8]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	00010002 	.word	0x00010002

08003f2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b088      	sub	sp, #32
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	4608      	mov	r0, r1
 8003f36:	4611      	mov	r1, r2
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	813b      	strh	r3, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f8c2 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8c:	d103      	bne.n	8003f96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0aa      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	4952      	ldr	r1, [pc, #328]	@ (80040f8 <I2C_RequestMemoryRead+0x1cc>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f91d 	bl	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e097      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f9a8 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e076      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e021      	b.n	8004058 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004014:	893b      	ldrh	r3, [r7, #8]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004024:	6a39      	ldr	r1, [r7, #32]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f982 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b04      	cmp	r3, #4
 8004038:	d107      	bne.n	800404a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e050      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404e:	893b      	ldrh	r3, [r7, #8]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405a:	6a39      	ldr	r1, [r7, #32]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f967 	bl	8004330 <I2C_WaitOnTXEFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00d      	beq.n	8004084 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	2b04      	cmp	r3, #4
 800406e:	d107      	bne.n	8004080 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e035      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004092:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	2200      	movs	r2, #0
 800409c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f82b 	bl	80040fc <I2C_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00d      	beq.n	80040c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ba:	d103      	bne.n	80040c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e013      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040c8:	897b      	ldrh	r3, [r7, #10]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040da:	6a3a      	ldr	r2, [r7, #32]
 80040dc:	4906      	ldr	r1, [pc, #24]	@ (80040f8 <I2C_RequestMemoryRead+0x1cc>)
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	f000 f886 	bl	80041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d001      	beq.n	80040ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3718      	adds	r7, #24
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	00010002 	.word	0x00010002

080040fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410c:	e048      	b.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d044      	beq.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004116:	f7fe fbef 	bl	80028f8 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d302      	bcc.n	800412c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d139      	bne.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	0c1b      	lsrs	r3, r3, #16
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d10d      	bne.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	e00c      	b.n	800416c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	43da      	mvns	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	4013      	ands	r3, r2
 800415e:	b29b      	uxth	r3, r3
 8004160:	2b00      	cmp	r3, #0
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	429a      	cmp	r2, r3
 8004170:	d116      	bne.n	80041a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e023      	b.n	80041e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d10d      	bne.n	80041c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	e00c      	b.n	80041e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	699b      	ldr	r3, [r3, #24]
 80041cc:	43da      	mvns	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	4013      	ands	r3, r2
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	bf0c      	ite	eq
 80041d8:	2301      	moveq	r3, #1
 80041da:	2300      	movne	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	79fb      	ldrb	r3, [r7, #7]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d093      	beq.n	800410e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041fe:	e071      	b.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800420e:	d123      	bne.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004228:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004244:	f043 0204 	orr.w	r2, r3, #4
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e067      	b.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d041      	beq.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004260:	f7fe fb4a 	bl	80028f8 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d136      	bne.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	0c1b      	lsrs	r3, r3, #16
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d10c      	bne.n	800429a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	43da      	mvns	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e00b      	b.n	80042b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	43da      	mvns	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4013      	ands	r3, r2
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d016      	beq.n	80042e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f043 0220 	orr.w	r2, r3, #32
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e021      	b.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d10c      	bne.n	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	43da      	mvns	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	4013      	ands	r3, r2
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	bf14      	ite	ne
 8004300:	2301      	movne	r3, #1
 8004302:	2300      	moveq	r3, #0
 8004304:	b2db      	uxtb	r3, r3
 8004306:	e00b      	b.n	8004320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf14      	ite	ne
 800431a:	2301      	movne	r3, #1
 800431c:	2300      	moveq	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	f47f af6d 	bne.w	8004200 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800433c:	e034      	b.n	80043a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f8e3 	bl	800450a <I2C_IsAcknowledgeFailed>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e034      	b.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d028      	beq.n	80043a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004356:	f7fe facf 	bl	80028f8 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	429a      	cmp	r2, r3
 8004364:	d302      	bcc.n	800436c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11d      	bne.n	80043a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004376:	2b80      	cmp	r3, #128	@ 0x80
 8004378:	d016      	beq.n	80043a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e007      	b.n	80043b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b2:	2b80      	cmp	r3, #128	@ 0x80
 80043b4:	d1c3      	bne.n	800433e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043cc:	e034      	b.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f89b 	bl	800450a <I2C_IsAcknowledgeFailed>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e034      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d028      	beq.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fe fa87 	bl	80028f8 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d11d      	bne.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b04      	cmp	r3, #4
 8004408:	d016      	beq.n	8004438 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e007      	b.n	8004448 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b04      	cmp	r3, #4
 8004444:	d1c3      	bne.n	80043ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800445c:	e049      	b.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b10      	cmp	r3, #16
 800446a:	d119      	bne.n	80044a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0210 	mvn.w	r2, #16
 8004474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e030      	b.n	8004502 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044a0:	f7fe fa2a 	bl	80028f8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68ba      	ldr	r2, [r7, #8]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d11d      	bne.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c0:	2b40      	cmp	r3, #64	@ 0x40
 80044c2:	d016      	beq.n	80044f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e007      	b.n	8004502 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044fc:	2b40      	cmp	r3, #64	@ 0x40
 80044fe:	d1ae      	bne.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004520:	d11b      	bne.n	800455a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800452a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f043 0204 	orr.w	r2, r3, #4
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	bc80      	pop	{r7}
 8004564:	4770      	bx	lr
	...

08004568 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e272      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8087 	beq.w	8004696 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004588:	4b92      	ldr	r3, [pc, #584]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f003 030c 	and.w	r3, r3, #12
 8004590:	2b04      	cmp	r3, #4
 8004592:	d00c      	beq.n	80045ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004594:	4b8f      	ldr	r3, [pc, #572]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	f003 030c 	and.w	r3, r3, #12
 800459c:	2b08      	cmp	r3, #8
 800459e:	d112      	bne.n	80045c6 <HAL_RCC_OscConfig+0x5e>
 80045a0:	4b8c      	ldr	r3, [pc, #560]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ac:	d10b      	bne.n	80045c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ae:	4b89      	ldr	r3, [pc, #548]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d06c      	beq.n	8004694 <HAL_RCC_OscConfig+0x12c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d168      	bne.n	8004694 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e24c      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ce:	d106      	bne.n	80045de <HAL_RCC_OscConfig+0x76>
 80045d0:	4b80      	ldr	r3, [pc, #512]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a7f      	ldr	r2, [pc, #508]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e02e      	b.n	800463c <HAL_RCC_OscConfig+0xd4>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10c      	bne.n	8004600 <HAL_RCC_OscConfig+0x98>
 80045e6:	4b7b      	ldr	r3, [pc, #492]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a7a      	ldr	r2, [pc, #488]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	4b78      	ldr	r3, [pc, #480]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a77      	ldr	r2, [pc, #476]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	e01d      	b.n	800463c <HAL_RCC_OscConfig+0xd4>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004608:	d10c      	bne.n	8004624 <HAL_RCC_OscConfig+0xbc>
 800460a:	4b72      	ldr	r3, [pc, #456]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a71      	ldr	r2, [pc, #452]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	4b6f      	ldr	r3, [pc, #444]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6e      	ldr	r2, [pc, #440]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 800461c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	e00b      	b.n	800463c <HAL_RCC_OscConfig+0xd4>
 8004624:	4b6b      	ldr	r3, [pc, #428]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a6a      	ldr	r2, [pc, #424]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 800462a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	4b68      	ldr	r3, [pc, #416]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a67      	ldr	r2, [pc, #412]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800463a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe f958 	bl	80028f8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800464c:	f7fe f954 	bl	80028f8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b64      	cmp	r3, #100	@ 0x64
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e200      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800465e:	4b5d      	ldr	r3, [pc, #372]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0xe4>
 800466a:	e014      	b.n	8004696 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800466c:	f7fe f944 	bl	80028f8 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004674:	f7fe f940 	bl	80028f8 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	@ 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1ec      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004686:	4b53      	ldr	r3, [pc, #332]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x10c>
 8004692:	e000      	b.n	8004696 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d063      	beq.n	800476a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046a2:	4b4c      	ldr	r3, [pc, #304]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f003 030c 	and.w	r3, r3, #12
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ae:	4b49      	ldr	r3, [pc, #292]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d11c      	bne.n	80046f4 <HAL_RCC_OscConfig+0x18c>
 80046ba:	4b46      	ldr	r3, [pc, #280]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d116      	bne.n	80046f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c6:	4b43      	ldr	r3, [pc, #268]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_RCC_OscConfig+0x176>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e1c0      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046de:	4b3d      	ldr	r3, [pc, #244]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4939      	ldr	r1, [pc, #228]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f2:	e03a      	b.n	800476a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d020      	beq.n	800473e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046fc:	4b36      	ldr	r3, [pc, #216]	@ (80047d8 <HAL_RCC_OscConfig+0x270>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7fe f8f9 	bl	80028f8 <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470a:	f7fe f8f5 	bl	80028f8 <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e1a1      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800471c:	4b2d      	ldr	r3, [pc, #180]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004728:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	00db      	lsls	r3, r3, #3
 8004736:	4927      	ldr	r1, [pc, #156]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004738:	4313      	orrs	r3, r2
 800473a:	600b      	str	r3, [r1, #0]
 800473c:	e015      	b.n	800476a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800473e:	4b26      	ldr	r3, [pc, #152]	@ (80047d8 <HAL_RCC_OscConfig+0x270>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fe f8d8 	bl	80028f8 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800474c:	f7fe f8d4 	bl	80028f8 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e180      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800475e:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d03a      	beq.n	80047ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d019      	beq.n	80047b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800477e:	4b17      	ldr	r3, [pc, #92]	@ (80047dc <HAL_RCC_OscConfig+0x274>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fe f8b8 	bl	80028f8 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800478c:	f7fe f8b4 	bl	80028f8 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e160      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800479e:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <HAL_RCC_OscConfig+0x26c>)
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047aa:	2001      	movs	r0, #1
 80047ac:	f000 face 	bl	8004d4c <RCC_Delay>
 80047b0:	e01c      	b.n	80047ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b2:	4b0a      	ldr	r3, [pc, #40]	@ (80047dc <HAL_RCC_OscConfig+0x274>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b8:	f7fe f89e 	bl	80028f8 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047be:	e00f      	b.n	80047e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fe f89a 	bl	80028f8 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d908      	bls.n	80047e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e146      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
 80047d2:	bf00      	nop
 80047d4:	40021000 	.word	0x40021000
 80047d8:	42420000 	.word	0x42420000
 80047dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e0:	4b92      	ldr	r3, [pc, #584]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e9      	bne.n	80047c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80a6 	beq.w	8004946 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fa:	2300      	movs	r3, #0
 80047fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fe:	4b8b      	ldr	r3, [pc, #556]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	4b88      	ldr	r3, [pc, #544]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	4a87      	ldr	r2, [pc, #540]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004814:	61d3      	str	r3, [r2, #28]
 8004816:	4b85      	ldr	r3, [pc, #532]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b82      	ldr	r3, [pc, #520]	@ (8004a30 <HAL_RCC_OscConfig+0x4c8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d118      	bne.n	8004864 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004832:	4b7f      	ldr	r3, [pc, #508]	@ (8004a30 <HAL_RCC_OscConfig+0x4c8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a7e      	ldr	r2, [pc, #504]	@ (8004a30 <HAL_RCC_OscConfig+0x4c8>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483e:	f7fe f85b 	bl	80028f8 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004846:	f7fe f857 	bl	80028f8 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b64      	cmp	r3, #100	@ 0x64
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e103      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	4b75      	ldr	r3, [pc, #468]	@ (8004a30 <HAL_RCC_OscConfig+0x4c8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x312>
 800486c:	4b6f      	ldr	r3, [pc, #444]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	4a6e      	ldr	r2, [pc, #440]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6213      	str	r3, [r2, #32]
 8004878:	e02d      	b.n	80048d6 <HAL_RCC_OscConfig+0x36e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x334>
 8004882:	4b6a      	ldr	r3, [pc, #424]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4a69      	ldr	r2, [pc, #420]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004888:	f023 0301 	bic.w	r3, r3, #1
 800488c:	6213      	str	r3, [r2, #32]
 800488e:	4b67      	ldr	r3, [pc, #412]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	4a66      	ldr	r2, [pc, #408]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	6213      	str	r3, [r2, #32]
 800489a:	e01c      	b.n	80048d6 <HAL_RCC_OscConfig+0x36e>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b05      	cmp	r3, #5
 80048a2:	d10c      	bne.n	80048be <HAL_RCC_OscConfig+0x356>
 80048a4:	4b61      	ldr	r3, [pc, #388]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	4a60      	ldr	r2, [pc, #384]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048aa:	f043 0304 	orr.w	r3, r3, #4
 80048ae:	6213      	str	r3, [r2, #32]
 80048b0:	4b5e      	ldr	r3, [pc, #376]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	4a5d      	ldr	r2, [pc, #372]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	6213      	str	r3, [r2, #32]
 80048bc:	e00b      	b.n	80048d6 <HAL_RCC_OscConfig+0x36e>
 80048be:	4b5b      	ldr	r3, [pc, #364]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	4a5a      	ldr	r2, [pc, #360]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048c4:	f023 0301 	bic.w	r3, r3, #1
 80048c8:	6213      	str	r3, [r2, #32]
 80048ca:	4b58      	ldr	r3, [pc, #352]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	4a57      	ldr	r2, [pc, #348]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048d0:	f023 0304 	bic.w	r3, r3, #4
 80048d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048de:	f7fe f80b 	bl	80028f8 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e6:	f7fe f807 	bl	80028f8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e0b1      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048fc:	4b4b      	ldr	r3, [pc, #300]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80048fe:	6a1b      	ldr	r3, [r3, #32]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0ee      	beq.n	80048e6 <HAL_RCC_OscConfig+0x37e>
 8004908:	e014      	b.n	8004934 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800490a:	f7fd fff5 	bl	80028f8 <HAL_GetTick>
 800490e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	e00a      	b.n	8004928 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004912:	f7fd fff1 	bl	80028f8 <HAL_GetTick>
 8004916:	4602      	mov	r2, r0
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	1ad3      	subs	r3, r2, r3
 800491c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004920:	4293      	cmp	r3, r2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e09b      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004928:	4b40      	ldr	r3, [pc, #256]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1ee      	bne.n	8004912 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004934:	7dfb      	ldrb	r3, [r7, #23]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d105      	bne.n	8004946 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800493a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 800493c:	69db      	ldr	r3, [r3, #28]
 800493e:	4a3b      	ldr	r2, [pc, #236]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004940:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004944:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 8087 	beq.w	8004a5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004950:	4b36      	ldr	r3, [pc, #216]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f003 030c 	and.w	r3, r3, #12
 8004958:	2b08      	cmp	r3, #8
 800495a:	d061      	beq.n	8004a20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d146      	bne.n	80049f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b33      	ldr	r3, [pc, #204]	@ (8004a34 <HAL_RCC_OscConfig+0x4cc>)
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496a:	f7fd ffc5 	bl	80028f8 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004972:	f7fd ffc1 	bl	80028f8 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e06d      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004984:	4b29      	ldr	r3, [pc, #164]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004998:	d108      	bne.n	80049ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800499a:	4b24      	ldr	r3, [pc, #144]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	4921      	ldr	r1, [pc, #132]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049ac:	4b1f      	ldr	r3, [pc, #124]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a19      	ldr	r1, [r3, #32]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	430b      	orrs	r3, r1
 80049be:	491b      	ldr	r1, [pc, #108]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a34 <HAL_RCC_OscConfig+0x4cc>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ca:	f7fd ff95 	bl	80028f8 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049d2:	f7fd ff91 	bl	80028f8 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e03d      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049e4:	4b11      	ldr	r3, [pc, #68]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x46a>
 80049f0:	e035      	b.n	8004a5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <HAL_RCC_OscConfig+0x4cc>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f8:	f7fd ff7e 	bl	80028f8 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fd ff7a 	bl	80028f8 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e026      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_RCC_OscConfig+0x4c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f0      	bne.n	8004a00 <HAL_RCC_OscConfig+0x498>
 8004a1e:	e01e      	b.n	8004a5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d107      	bne.n	8004a38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e019      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40007000 	.word	0x40007000
 8004a34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a38:	4b0b      	ldr	r3, [pc, #44]	@ (8004a68 <HAL_RCC_OscConfig+0x500>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000

08004a6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0d0      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a80:	4b6a      	ldr	r3, [pc, #424]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0307 	and.w	r3, r3, #7
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d910      	bls.n	8004ab0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a8e:	4b67      	ldr	r3, [pc, #412]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 0207 	bic.w	r2, r3, #7
 8004a96:	4965      	ldr	r1, [pc, #404]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a9e:	4b63      	ldr	r3, [pc, #396]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d001      	beq.n	8004ab0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e0b8      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d020      	beq.n	8004afe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0304 	and.w	r3, r3, #4
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ac8:	4b59      	ldr	r3, [pc, #356]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a58      	ldr	r2, [pc, #352]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004ad2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d005      	beq.n	8004aec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ae0:	4b53      	ldr	r3, [pc, #332]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	4a52      	ldr	r2, [pc, #328]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004aea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b50      	ldr	r3, [pc, #320]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	494d      	ldr	r1, [pc, #308]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d040      	beq.n	8004b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b47      	ldr	r3, [pc, #284]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d115      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07f      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2a:	4b41      	ldr	r3, [pc, #260]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d109      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e073      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3a:	4b3d      	ldr	r3, [pc, #244]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e06b      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b4a:	4b39      	ldr	r3, [pc, #228]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f023 0203 	bic.w	r2, r3, #3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	4936      	ldr	r1, [pc, #216]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b5c:	f7fd fecc 	bl	80028f8 <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	e00a      	b.n	8004b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b64:	f7fd fec8 	bl	80028f8 <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e053      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f003 020c 	and.w	r2, r3, #12
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d1eb      	bne.n	8004b64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8c:	4b27      	ldr	r3, [pc, #156]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d210      	bcs.n	8004bbc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9a:	4b24      	ldr	r3, [pc, #144]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f023 0207 	bic.w	r2, r3, #7
 8004ba2:	4922      	ldr	r1, [pc, #136]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004baa:	4b20      	ldr	r3, [pc, #128]	@ (8004c2c <HAL_RCC_ClockConfig+0x1c0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d001      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e032      	b.n	8004c22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bc8:	4b19      	ldr	r3, [pc, #100]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	4916      	ldr	r1, [pc, #88]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0308 	and.w	r3, r3, #8
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d009      	beq.n	8004bfa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004be6:	4b12      	ldr	r3, [pc, #72]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	490e      	ldr	r1, [pc, #56]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bfa:	f000 f821 	bl	8004c40 <HAL_RCC_GetSysClockFreq>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	4b0b      	ldr	r3, [pc, #44]	@ (8004c30 <HAL_RCC_ClockConfig+0x1c4>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	490a      	ldr	r1, [pc, #40]	@ (8004c34 <HAL_RCC_ClockConfig+0x1c8>)
 8004c0c:	5ccb      	ldrb	r3, [r1, r3]
 8004c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c12:	4a09      	ldr	r2, [pc, #36]	@ (8004c38 <HAL_RCC_ClockConfig+0x1cc>)
 8004c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c16:	4b09      	ldr	r3, [pc, #36]	@ (8004c3c <HAL_RCC_ClockConfig+0x1d0>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd fe2a 	bl	8002874 <HAL_InitTick>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40022000 	.word	0x40022000
 8004c30:	40021000 	.word	0x40021000
 8004c34:	0800b300 	.word	0x0800b300
 8004c38:	20000030 	.word	0x20000030
 8004c3c:	20000034 	.word	0x20000034

08004c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d002      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x30>
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d003      	beq.n	8004c76 <HAL_RCC_GetSysClockFreq+0x36>
 8004c6e:	e027      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c70:	4b19      	ldr	r3, [pc, #100]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c72:	613b      	str	r3, [r7, #16]
      break;
 8004c74:	e027      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	0c9b      	lsrs	r3, r3, #18
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	4a17      	ldr	r2, [pc, #92]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c80:	5cd3      	ldrb	r3, [r2, r3]
 8004c82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c8e:	4b11      	ldr	r3, [pc, #68]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	0c5b      	lsrs	r3, r3, #17
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	4a11      	ldr	r2, [pc, #68]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c9a:	5cd3      	ldrb	r3, [r2, r3]
 8004c9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ca2:	fb03 f202 	mul.w	r2, r3, r2
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
 8004cae:	e004      	b.n	8004cba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	613b      	str	r3, [r7, #16]
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cc2:	613b      	str	r3, [r7, #16]
      break;
 8004cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc6:	693b      	ldr	r3, [r7, #16]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bc80      	pop	{r7}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	007a1200 	.word	0x007a1200
 8004cdc:	0800b318 	.word	0x0800b318
 8004ce0:	0800b328 	.word	0x0800b328
 8004ce4:	003d0900 	.word	0x003d0900

08004ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cec:	4b02      	ldr	r3, [pc, #8]	@ (8004cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cee:	681b      	ldr	r3, [r3, #0]
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr
 8004cf8:	20000030 	.word	0x20000030

08004cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d00:	f7ff fff2 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d04:	4602      	mov	r2, r0
 8004d06:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	0a1b      	lsrs	r3, r3, #8
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	4903      	ldr	r1, [pc, #12]	@ (8004d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d12:	5ccb      	ldrb	r3, [r1, r3]
 8004d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	0800b310 	.word	0x0800b310

08004d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d28:	f7ff ffde 	bl	8004ce8 <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b05      	ldr	r3, [pc, #20]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	0adb      	lsrs	r3, r3, #11
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4903      	ldr	r1, [pc, #12]	@ (8004d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000
 8004d48:	0800b310 	.word	0x0800b310

08004d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d54:	4b0a      	ldr	r3, [pc, #40]	@ (8004d80 <RCC_Delay+0x34>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a0a      	ldr	r2, [pc, #40]	@ (8004d84 <RCC_Delay+0x38>)
 8004d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5e:	0a5b      	lsrs	r3, r3, #9
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	fb02 f303 	mul.w	r3, r2, r3
 8004d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d68:	bf00      	nop
  }
  while (Delay --);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	60fa      	str	r2, [r7, #12]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f9      	bne.n	8004d68 <RCC_Delay+0x1c>
}
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	20000030 	.word	0x20000030
 8004d84:	10624dd3 	.word	0x10624dd3

08004d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e041      	b.n	8004e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d106      	bne.n	8004db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fd f9d0 	bl	8002154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	4610      	mov	r0, r2
 8004dc8:	f000 fc4e 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d001      	beq.n	8004e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e03a      	b.n	8004eb6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68da      	ldr	r2, [r3, #12]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f042 0201 	orr.w	r2, r2, #1
 8004e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <HAL_TIM_Base_Start_IT+0x98>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d00e      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x58>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e6a:	d009      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x58>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a14      	ldr	r2, [pc, #80]	@ (8004ec4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d004      	beq.n	8004e80 <HAL_TIM_Base_Start_IT+0x58>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a13      	ldr	r2, [pc, #76]	@ (8004ec8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d111      	bne.n	8004ea4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b06      	cmp	r3, #6
 8004e90:	d010      	beq.n	8004eb4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea2:	e007      	b.n	8004eb4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f042 0201 	orr.w	r2, r2, #1
 8004eb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	40012c00 	.word	0x40012c00
 8004ec4:	40000400 	.word	0x40000400
 8004ec8:	40000800 	.word	0x40000800

08004ecc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68da      	ldr	r2, [r3, #12]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0201 	bic.w	r2, r2, #1
 8004ee2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a1a      	ldr	r2, [r3, #32]
 8004eea:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004eee:	4013      	ands	r3, r2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10f      	bne.n	8004f14 <HAL_TIM_Base_Stop_IT+0x48>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a1a      	ldr	r2, [r3, #32]
 8004efa:	f240 4344 	movw	r3, #1092	@ 0x444
 8004efe:	4013      	ands	r3, r2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_Base_Stop_IT+0x48>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	370c      	adds	r7, #12
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bc80      	pop	{r7}
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e041      	b.n	8004fbe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d106      	bne.n	8004f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f839 	bl	8004fc6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3304      	adds	r3, #4
 8004f64:	4619      	mov	r1, r3
 8004f66:	4610      	mov	r0, r2
 8004f68:	f000 fb7e 	bl	8005668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bc80      	pop	{r7}
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d109      	bne.n	8004ffc <HAL_TIM_PWM_Start+0x24>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	e022      	b.n	8005042 <HAL_TIM_PWM_Start+0x6a>
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d109      	bne.n	8005016 <HAL_TIM_PWM_Start+0x3e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b01      	cmp	r3, #1
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e015      	b.n	8005042 <HAL_TIM_PWM_Start+0x6a>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d109      	bne.n	8005030 <HAL_TIM_PWM_Start+0x58>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	e008      	b.n	8005042 <HAL_TIM_PWM_Start+0x6a>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e05e      	b.n	8005108 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <HAL_TIM_PWM_Start+0x82>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005058:	e013      	b.n	8005082 <HAL_TIM_PWM_Start+0xaa>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b04      	cmp	r3, #4
 800505e:	d104      	bne.n	800506a <HAL_TIM_PWM_Start+0x92>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005068:	e00b      	b.n	8005082 <HAL_TIM_PWM_Start+0xaa>
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b08      	cmp	r3, #8
 800506e:	d104      	bne.n	800507a <HAL_TIM_PWM_Start+0xa2>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005078:	e003      	b.n	8005082 <HAL_TIM_PWM_Start+0xaa>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2201      	movs	r2, #1
 8005088:	6839      	ldr	r1, [r7, #0]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fd78 	bl	8005b80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a1e      	ldr	r2, [pc, #120]	@ (8005110 <HAL_TIM_PWM_Start+0x138>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d107      	bne.n	80050aa <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a18      	ldr	r2, [pc, #96]	@ (8005110 <HAL_TIM_PWM_Start+0x138>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d00e      	beq.n	80050d2 <HAL_TIM_PWM_Start+0xfa>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050bc:	d009      	beq.n	80050d2 <HAL_TIM_PWM_Start+0xfa>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a14      	ldr	r2, [pc, #80]	@ (8005114 <HAL_TIM_PWM_Start+0x13c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d004      	beq.n	80050d2 <HAL_TIM_PWM_Start+0xfa>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a12      	ldr	r2, [pc, #72]	@ (8005118 <HAL_TIM_PWM_Start+0x140>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d111      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	689b      	ldr	r3, [r3, #8]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2b06      	cmp	r3, #6
 80050e2:	d010      	beq.n	8005106 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	e007      	b.n	8005106 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40012c00 	.word	0x40012c00
 8005114:	40000400 	.word	0x40000400
 8005118:	40000800 	.word	0x40000800

0800511c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d020      	beq.n	8005180 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d01b      	beq.n	8005180 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0202 	mvn.w	r2, #2
 8005150:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa63 	bl	8005632 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa56 	bl	8005620 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fa65 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d020      	beq.n	80051cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d01b      	beq.n	80051cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f06f 0204 	mvn.w	r2, #4
 800519c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa3d 	bl	8005632 <HAL_TIM_IC_CaptureCallback>
 80051b8:	e005      	b.n	80051c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fa30 	bl	8005620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa3f 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d020      	beq.n	8005218 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d01b      	beq.n	8005218 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0208 	mvn.w	r2, #8
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2204      	movs	r2, #4
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa17 	bl	8005632 <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa0a 	bl	8005620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fa19 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	d020      	beq.n	8005264 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01b      	beq.n	8005264 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0210 	mvn.w	r2, #16
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2208      	movs	r2, #8
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9f1 	bl	8005632 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9e4 	bl	8005620 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9f3 	bl	8005644 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00c      	beq.n	8005288 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f06f 0201 	mvn.w	r2, #1
 8005280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f9c3 	bl	800560e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00c      	beq.n	80052ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fd46 	bl	8005d38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00c      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f9c3 	bl	8005656 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f003 0320 	and.w	r3, r3, #32
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00c      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f06f 0220 	mvn.w	r2, #32
 80052ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 fd19 	bl	8005d26 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005312:	2b01      	cmp	r3, #1
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005316:	2302      	movs	r3, #2
 8005318:	e0ae      	b.n	8005478 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2201      	movs	r2, #1
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	f200 809f 	bhi.w	8005468 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800532a:	a201      	add	r2, pc, #4	@ (adr r2, 8005330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800532c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005330:	08005365 	.word	0x08005365
 8005334:	08005469 	.word	0x08005469
 8005338:	08005469 	.word	0x08005469
 800533c:	08005469 	.word	0x08005469
 8005340:	080053a5 	.word	0x080053a5
 8005344:	08005469 	.word	0x08005469
 8005348:	08005469 	.word	0x08005469
 800534c:	08005469 	.word	0x08005469
 8005350:	080053e7 	.word	0x080053e7
 8005354:	08005469 	.word	0x08005469
 8005358:	08005469 	.word	0x08005469
 800535c:	08005469 	.word	0x08005469
 8005360:	08005427 	.word	0x08005427
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68b9      	ldr	r1, [r7, #8]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f9ea 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0208 	orr.w	r2, r2, #8
 800537e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0204 	bic.w	r2, r2, #4
 800538e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6999      	ldr	r1, [r3, #24]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	691a      	ldr	r2, [r3, #16]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	619a      	str	r2, [r3, #24]
      break;
 80053a2:	e064      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa30 	bl	8005810 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	021a      	lsls	r2, r3, #8
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	430a      	orrs	r2, r1
 80053e2:	619a      	str	r2, [r3, #24]
      break;
 80053e4:	e043      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f000 fa79 	bl	80058e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69da      	ldr	r2, [r3, #28]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f042 0208 	orr.w	r2, r2, #8
 8005400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0204 	bic.w	r2, r2, #4
 8005410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69d9      	ldr	r1, [r3, #28]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	691a      	ldr	r2, [r3, #16]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
      break;
 8005424:	e023      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fac3 	bl	80059b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	021a      	lsls	r2, r3, #8
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	61da      	str	r2, [r3, #28]
      break;
 8005466:	e002      	b.n	800546e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005476:	7dfb      	ldrb	r3, [r7, #23]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005494:	2b01      	cmp	r3, #1
 8005496:	d101      	bne.n	800549c <HAL_TIM_ConfigClockSource+0x1c>
 8005498:	2302      	movs	r3, #2
 800549a:	e0b4      	b.n	8005606 <HAL_TIM_ConfigClockSource+0x186>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80054ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054d4:	d03e      	beq.n	8005554 <HAL_TIM_ConfigClockSource+0xd4>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054da:	f200 8087 	bhi.w	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054e2:	f000 8086 	beq.w	80055f2 <HAL_TIM_ConfigClockSource+0x172>
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054ea:	d87f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b70      	cmp	r3, #112	@ 0x70
 80054ee:	d01a      	beq.n	8005526 <HAL_TIM_ConfigClockSource+0xa6>
 80054f0:	2b70      	cmp	r3, #112	@ 0x70
 80054f2:	d87b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b60      	cmp	r3, #96	@ 0x60
 80054f6:	d050      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x11a>
 80054f8:	2b60      	cmp	r3, #96	@ 0x60
 80054fa:	d877      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b50      	cmp	r3, #80	@ 0x50
 80054fe:	d03c      	beq.n	800557a <HAL_TIM_ConfigClockSource+0xfa>
 8005500:	2b50      	cmp	r3, #80	@ 0x50
 8005502:	d873      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b40      	cmp	r3, #64	@ 0x40
 8005506:	d058      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x13a>
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	d86f      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b30      	cmp	r3, #48	@ 0x30
 800550e:	d064      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b30      	cmp	r3, #48	@ 0x30
 8005512:	d86b      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b20      	cmp	r3, #32
 8005516:	d060      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b20      	cmp	r3, #32
 800551a:	d867      	bhi.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d05c      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005520:	2b10      	cmp	r3, #16
 8005522:	d05a      	beq.n	80055da <HAL_TIM_ConfigClockSource+0x15a>
 8005524:	e062      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005536:	f000 fb04 	bl	8005b42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005548:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	609a      	str	r2, [r3, #8]
      break;
 8005552:	e04f      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005564:	f000 faed 	bl	8005b42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005576:	609a      	str	r2, [r3, #8]
      break;
 8005578:	e03c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005586:	461a      	mov	r2, r3
 8005588:	f000 fa64 	bl	8005a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2150      	movs	r1, #80	@ 0x50
 8005592:	4618      	mov	r0, r3
 8005594:	f000 fabb 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 8005598:	e02c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 fa82 	bl	8005ab0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2160      	movs	r1, #96	@ 0x60
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 faab 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 80055b8:	e01c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c6:	461a      	mov	r2, r3
 80055c8:	f000 fa44 	bl	8005a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2140      	movs	r1, #64	@ 0x40
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fa9b 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 80055d8:	e00c      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4619      	mov	r1, r3
 80055e4:	4610      	mov	r0, r2
 80055e6:	f000 fa92 	bl	8005b0e <TIM_ITRx_SetConfig>
      break;
 80055ea:	e003      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	73fb      	strb	r3, [r7, #15]
      break;
 80055f0:	e000      	b.n	80055f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005604:	7bfb      	ldrb	r3, [r7, #15]
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	bc80      	pop	{r7}
 800561e:	4770      	bx	lr

08005620 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005628:	bf00      	nop
 800562a:	370c      	adds	r7, #12
 800562c:	46bd      	mov	sp, r7
 800562e:	bc80      	pop	{r7}
 8005630:	4770      	bx	lr

08005632 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800563a:	bf00      	nop
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	bc80      	pop	{r7}
 8005642:	4770      	bx	lr

08005644 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	bc80      	pop	{r7}
 8005654:	4770      	bx	lr

08005656 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005656:	b480      	push	{r7}
 8005658:	b083      	sub	sp, #12
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	bc80      	pop	{r7}
 8005666:	4770      	bx	lr

08005668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a2f      	ldr	r2, [pc, #188]	@ (8005738 <TIM_Base_SetConfig+0xd0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_Base_SetConfig+0x30>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005686:	d007      	beq.n	8005698 <TIM_Base_SetConfig+0x30>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <TIM_Base_SetConfig+0xd4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0x30>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2b      	ldr	r2, [pc, #172]	@ (8005740 <TIM_Base_SetConfig+0xd8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800569e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a22      	ldr	r2, [pc, #136]	@ (8005738 <TIM_Base_SetConfig+0xd0>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00b      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b8:	d007      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1f      	ldr	r2, [pc, #124]	@ (800573c <TIM_Base_SetConfig+0xd4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d003      	beq.n	80056ca <TIM_Base_SetConfig+0x62>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005740 <TIM_Base_SetConfig+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d108      	bne.n	80056dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a0d      	ldr	r2, [pc, #52]	@ (8005738 <TIM_Base_SetConfig+0xd0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d103      	bne.n	8005710 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f023 0201 	bic.w	r2, r3, #1
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]
  }
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr
 8005738:	40012c00 	.word	0x40012c00
 800573c:	40000400 	.word	0x40000400
 8005740:	40000800 	.word	0x40000800

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0201 	bic.w	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a1c      	ldr	r2, [pc, #112]	@ (800580c <TIM_OC1_SetConfig+0xc8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10c      	bne.n	80057ba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0308 	bic.w	r3, r3, #8
 80057a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	697a      	ldr	r2, [r7, #20]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 0304 	bic.w	r3, r3, #4
 80057b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a13      	ldr	r2, [pc, #76]	@ (800580c <TIM_OC1_SetConfig+0xc8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d111      	bne.n	80057e6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	621a      	str	r2, [r3, #32]
}
 8005800:	bf00      	nop
 8005802:	371c      	adds	r7, #28
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40012c00 	.word	0x40012c00

08005810 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	f023 0210 	bic.w	r2, r3, #16
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800583e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	021b      	lsls	r3, r3, #8
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	4313      	orrs	r3, r2
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f023 0320 	bic.w	r3, r3, #32
 800585a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	697a      	ldr	r2, [r7, #20]
 8005864:	4313      	orrs	r3, r2
 8005866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a1d      	ldr	r2, [pc, #116]	@ (80058e0 <TIM_OC2_SetConfig+0xd0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d10d      	bne.n	800588c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005876:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	697a      	ldr	r2, [r7, #20]
 8005880:	4313      	orrs	r3, r2
 8005882:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800588a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a14      	ldr	r2, [pc, #80]	@ (80058e0 <TIM_OC2_SetConfig+0xd0>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d113      	bne.n	80058bc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800589a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00

080058e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0303 	bic.w	r3, r3, #3
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800592c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	021b      	lsls	r3, r3, #8
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1d      	ldr	r2, [pc, #116]	@ (80059b4 <TIM_OC3_SetConfig+0xd0>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10d      	bne.n	800595e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005948:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	021b      	lsls	r3, r3, #8
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800595c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a14      	ldr	r2, [pc, #80]	@ (80059b4 <TIM_OC3_SetConfig+0xd0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d113      	bne.n	800598e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800596c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	011b      	lsls	r3, r3, #4
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	011b      	lsls	r3, r3, #4
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	4313      	orrs	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	621a      	str	r2, [r3, #32]
}
 80059a8:	bf00      	nop
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	40012c00 	.word	0x40012c00

080059b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	68fa      	ldr	r2, [r7, #12]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	031b      	lsls	r3, r3, #12
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a0f      	ldr	r2, [pc, #60]	@ (8005a50 <TIM_OC4_SetConfig+0x98>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d109      	bne.n	8005a2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	695b      	ldr	r3, [r3, #20]
 8005a24:	019b      	lsls	r3, r3, #6
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	621a      	str	r2, [r3, #32]
}
 8005a46:	bf00      	nop
 8005a48:	371c      	adds	r7, #28
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bc80      	pop	{r7}
 8005a4e:	4770      	bx	lr
 8005a50:	40012c00 	.word	0x40012c00

08005a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b087      	sub	sp, #28
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0201 	bic.w	r2, r3, #1
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 030a 	bic.w	r3, r3, #10
 8005a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	693a      	ldr	r2, [r7, #16]
 8005a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	621a      	str	r2, [r3, #32]
}
 8005aa6:	bf00      	nop
 8005aa8:	371c      	adds	r7, #28
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bc80      	pop	{r7}
 8005aae:	4770      	bx	lr

08005ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f023 0210 	bic.w	r2, r3, #16
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	699b      	ldr	r3, [r3, #24]
 8005ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	031b      	lsls	r3, r3, #12
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bc80      	pop	{r7}
 8005b0c:	4770      	bx	lr

08005b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b085      	sub	sp, #20
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b26:	683a      	ldr	r2, [r7, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f043 0307 	orr.w	r3, r3, #7
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	3714      	adds	r7, #20
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bc80      	pop	{r7}
 8005b40:	4770      	bx	lr

08005b42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b087      	sub	sp, #28
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	607a      	str	r2, [r7, #4]
 8005b4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	021a      	lsls	r2, r3, #8
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	609a      	str	r2, [r3, #8]
}
 8005b76:	bf00      	nop
 8005b78:	371c      	adds	r7, #28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bc80      	pop	{r7}
 8005b7e:	4770      	bx	lr

08005b80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2201      	movs	r2, #1
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	43db      	mvns	r3, r3
 8005ba2:	401a      	ands	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6a1a      	ldr	r2, [r3, #32]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	431a      	orrs	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bc80      	pop	{r7}
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d101      	bne.n	8005be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bdc:	2302      	movs	r3, #2
 8005bde:	e046      	b.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2202      	movs	r2, #2
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a16      	ldr	r2, [pc, #88]	@ (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d00e      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a12      	ldr	r2, [pc, #72]	@ (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a10      	ldr	r2, [pc, #64]	@ (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d10c      	bne.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bc80      	pop	{r7}
 8005c76:	4770      	bx	lr
 8005c78:	40012c00 	.word	0x40012c00
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800

08005c84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e03d      	b.n	8005d1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	4313      	orrs	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr

08005d26 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bc80      	pop	{r7}
 8005d48:	4770      	bx	lr

08005d4a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e042      	b.n	8005de2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fc fa5b 	bl	800222c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2224      	movs	r2, #36	@ 0x24
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d8c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fdb8 	bl	8006904 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005da2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	695a      	ldr	r2, [r3, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005db2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68da      	ldr	r2, [r3, #12]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dc2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2220      	movs	r2, #32
 8005dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b08a      	sub	sp, #40	@ 0x28
 8005dee:	af02      	add	r7, sp, #8
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	603b      	str	r3, [r7, #0]
 8005df6:	4613      	mov	r3, r2
 8005df8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d175      	bne.n	8005ef6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <HAL_UART_Transmit+0x2c>
 8005e10:	88fb      	ldrh	r3, [r7, #6]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d101      	bne.n	8005e1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e06e      	b.n	8005ef8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2221      	movs	r2, #33	@ 0x21
 8005e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e28:	f7fc fd66 	bl	80028f8 <HAL_GetTick>
 8005e2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e42:	d108      	bne.n	8005e56 <HAL_UART_Transmit+0x6c>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d104      	bne.n	8005e56 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e003      	b.n	8005e5e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e5e:	e02e      	b.n	8005ebe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2200      	movs	r2, #0
 8005e68:	2180      	movs	r1, #128	@ 0x80
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f000 fb1d 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d005      	beq.n	8005e82 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e03a      	b.n	8005ef8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10b      	bne.n	8005ea0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e96:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	3302      	adds	r3, #2
 8005e9c:	61bb      	str	r3, [r7, #24]
 8005e9e:	e007      	b.n	8005eb0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	781a      	ldrb	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1cb      	bne.n	8005e60 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2140      	movs	r1, #64	@ 0x40
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 fae9 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e006      	b.n	8005ef8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	e000      	b.n	8005ef8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
  }
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b20      	cmp	r3, #32
 8005f18:	d112      	bne.n	8005f40 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d002      	beq.n	8005f26 <HAL_UART_Receive_IT+0x26>
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d101      	bne.n	8005f2a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e00b      	b.n	8005f42 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	461a      	mov	r2, r3
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fb10 	bl	800655c <UART_Start_Receive_IT>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	e000      	b.n	8005f42 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f40:	2302      	movs	r3, #2
  }
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b0ba      	sub	sp, #232	@ 0xe8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10f      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d009      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x66>
 8005f9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fbec 	bl	8006788 <UART_Receive_IT>
      return;
 8005fb0:	e25b      	b.n	800646a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005fb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80de 	beq.w	8006178 <HAL_UART_IRQHandler+0x22c>
 8005fbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d106      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fcc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 80d1 	beq.w	8006178 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00b      	beq.n	8005ffa <HAL_UART_IRQHandler+0xae>
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d005      	beq.n	8005ffa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ff2:	f043 0201 	orr.w	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffe:	f003 0304 	and.w	r3, r3, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <HAL_UART_IRQHandler+0xd2>
 8006006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d005      	beq.n	800601e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006016:	f043 0202 	orr.w	r2, r3, #2
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006022:	f003 0302 	and.w	r3, r3, #2
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00b      	beq.n	8006042 <HAL_UART_IRQHandler+0xf6>
 800602a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800603a:	f043 0204 	orr.w	r2, r3, #4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d011      	beq.n	8006072 <HAL_UART_IRQHandler+0x126>
 800604e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006052:	f003 0320 	and.w	r3, r3, #32
 8006056:	2b00      	cmp	r3, #0
 8006058:	d105      	bne.n	8006066 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800605a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	f043 0208 	orr.w	r2, r3, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 81f2 	beq.w	8006460 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800607c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006080:	f003 0320 	and.w	r3, r3, #32
 8006084:	2b00      	cmp	r3, #0
 8006086:	d008      	beq.n	800609a <HAL_UART_IRQHandler+0x14e>
 8006088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800608c:	f003 0320 	and.w	r3, r3, #32
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 fb77 	bl	8006788 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	f003 0308 	and.w	r3, r3, #8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d103      	bne.n	80060c6 <HAL_UART_IRQHandler+0x17a>
 80060be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d04f      	beq.n	8006166 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 fa81 	bl	80065ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d041      	beq.n	800615e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060e8:	e853 3f00 	ldrex	r3, [r3]
 80060ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006106:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800610a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800610e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800611e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1d9      	bne.n	80060da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d013      	beq.n	8006156 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006132:	4a7e      	ldr	r2, [pc, #504]	@ (800632c <HAL_UART_IRQHandler+0x3e0>)
 8006134:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800613a:	4618      	mov	r0, r3
 800613c:	f7fc fe02 	bl	8002d44 <HAL_DMA_Abort_IT>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d016      	beq.n	8006174 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	e00e      	b.n	8006174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f993 	bl	8006482 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	e00a      	b.n	8006174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f98f 	bl	8006482 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006164:	e006      	b.n	8006174 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f98b 	bl	8006482 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006172:	e175      	b.n	8006460 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006174:	bf00      	nop
    return;
 8006176:	e173      	b.n	8006460 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617c:	2b01      	cmp	r3, #1
 800617e:	f040 814f 	bne.w	8006420 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8148 	beq.w	8006420 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006194:	f003 0310 	and.w	r3, r3, #16
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 8141 	beq.w	8006420 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800619e:	2300      	movs	r3, #0
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 80b6 	beq.w	8006330 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8145 	beq.w	8006464 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061e2:	429a      	cmp	r2, r3
 80061e4:	f080 813e 	bcs.w	8006464 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	f000 8088 	beq.w	800630c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	330c      	adds	r3, #12
 8006202:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800620a:	e853 3f00 	ldrex	r3, [r3]
 800620e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006212:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006216:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800621a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006228:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800622c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006234:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006238:	e841 2300 	strex	r3, r2, [r1]
 800623c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006240:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1d9      	bne.n	80061fc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006258:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800625a:	f023 0301 	bic.w	r3, r3, #1
 800625e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	3314      	adds	r3, #20
 8006268:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800626c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006270:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006272:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006274:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800627e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e1      	bne.n	8006248 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3314      	adds	r3, #20
 800628a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006296:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800629a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3314      	adds	r3, #20
 80062a4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062a8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ac:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e3      	bne.n	8006284 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	330c      	adds	r3, #12
 80062d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062dc:	f023 0310 	bic.w	r3, r3, #16
 80062e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	330c      	adds	r3, #12
 80062ea:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80062ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80062f0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e3      	bne.n	80062ca <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006306:	4618      	mov	r0, r3
 8006308:	f7fc fce1 	bl	8002cce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800631a:	b29b      	uxth	r3, r3
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	b29b      	uxth	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f8b6 	bl	8006494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006328:	e09c      	b.n	8006464 <HAL_UART_IRQHandler+0x518>
 800632a:	bf00      	nop
 800632c:	08006693 	.word	0x08006693
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006338:	b29b      	uxth	r3, r3
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 808e 	beq.w	8006468 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800634c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006350:	2b00      	cmp	r3, #0
 8006352:	f000 8089 	beq.w	8006468 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006360:	e853 3f00 	ldrex	r3, [r3]
 8006364:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006368:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800636c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	330c      	adds	r3, #12
 8006376:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800637a:	647a      	str	r2, [r7, #68]	@ 0x44
 800637c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e3      	bne.n	8006356 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3314      	adds	r3, #20
 8006394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	623b      	str	r3, [r7, #32]
   return(result);
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3314      	adds	r3, #20
 80063ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80063b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2220      	movs	r2, #32
 80063ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	e853 3f00 	ldrex	r3, [r3]
 80063e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0310 	bic.w	r3, r3, #16
 80063ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	330c      	adds	r3, #12
 80063f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80063f8:	61fa      	str	r2, [r7, #28]
 80063fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fc:	69b9      	ldr	r1, [r7, #24]
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	e841 2300 	strex	r3, r2, [r1]
 8006404:	617b      	str	r3, [r7, #20]
   return(result);
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1e3      	bne.n	80063d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006412:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f83b 	bl	8006494 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800641e:	e023      	b.n	8006468 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006428:	2b00      	cmp	r3, #0
 800642a:	d009      	beq.n	8006440 <HAL_UART_IRQHandler+0x4f4>
 800642c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006430:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f93e 	bl	80066ba <UART_Transmit_IT>
    return;
 800643e:	e014      	b.n	800646a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006440:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <HAL_UART_IRQHandler+0x51e>
 800644c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006454:	2b00      	cmp	r3, #0
 8006456:	d008      	beq.n	800646a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f97d 	bl	8006758 <UART_EndTransmit_IT>
    return;
 800645e:	e004      	b.n	800646a <HAL_UART_IRQHandler+0x51e>
    return;
 8006460:	bf00      	nop
 8006462:	e002      	b.n	800646a <HAL_UART_IRQHandler+0x51e>
      return;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_UART_IRQHandler+0x51e>
      return;
 8006468:	bf00      	nop
  }
}
 800646a:	37e8      	adds	r7, #232	@ 0xe8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr

08006482 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006482:	b480      	push	{r7}
 8006484:	b083      	sub	sp, #12
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800648a:	bf00      	nop
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr

08006494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bc80      	pop	{r7}
 80064a8:	4770      	bx	lr

080064aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ba:	e03b      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d037      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c4:	f7fc fa18 	bl	80028f8 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <UART_WaitOnFlagUntilTimeout+0x30>
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e03a      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d023      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b80      	cmp	r3, #128	@ 0x80
 80064f0:	d020      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b40      	cmp	r3, #64	@ 0x40
 80064f6:	d01d      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b08      	cmp	r3, #8
 8006504:	d116      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f856 	bl	80065ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2208      	movs	r2, #8
 8006526:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e00f      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	429a      	cmp	r2, r3
 8006550:	d0b4      	beq.n	80064bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	4613      	mov	r3, r2
 8006568:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	88fa      	ldrh	r2, [r7, #6]
 8006574:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	88fa      	ldrh	r2, [r7, #6]
 800657a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2222      	movs	r2, #34	@ 0x22
 8006586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d007      	beq.n	80065a2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065a0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695a      	ldr	r2, [r3, #20]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0201 	orr.w	r2, r2, #1
 80065b0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0220 	orr.w	r2, r2, #32
 80065c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b095      	sub	sp, #84	@ 0x54
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	330c      	adds	r3, #12
 80065dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065e0:	e853 3f00 	ldrex	r3, [r3]
 80065e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80065f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065fe:	e841 2300 	strex	r3, r2, [r1]
 8006602:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1e5      	bne.n	80065d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	3314      	adds	r3, #20
 8006610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	61fb      	str	r3, [r7, #28]
   return(result);
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f023 0301 	bic.w	r3, r3, #1
 8006620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800662a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800662c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006630:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e5      	bne.n	800660a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006642:	2b01      	cmp	r3, #1
 8006644:	d119      	bne.n	800667a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	e853 3f00 	ldrex	r3, [r3]
 8006654:	60bb      	str	r3, [r7, #8]
   return(result);
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f023 0310 	bic.w	r3, r3, #16
 800665c:	647b      	str	r3, [r7, #68]	@ 0x44
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006666:	61ba      	str	r2, [r7, #24]
 8006668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666a:	6979      	ldr	r1, [r7, #20]
 800666c:	69ba      	ldr	r2, [r7, #24]
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	613b      	str	r3, [r7, #16]
   return(result);
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d1e5      	bne.n	8006646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006688:	bf00      	nop
 800668a:	3754      	adds	r7, #84	@ 0x54
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b084      	sub	sp, #16
 8006696:	af00      	add	r7, sp, #0
 8006698:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800669e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f7ff fee8 	bl	8006482 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066b2:	bf00      	nop
 80066b4:	3710      	adds	r7, #16
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b21      	cmp	r3, #33	@ 0x21
 80066cc:	d13e      	bne.n	800674c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066d6:	d114      	bne.n	8006702 <UART_Transmit_IT+0x48>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d110      	bne.n	8006702 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	1c9a      	adds	r2, r3, #2
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	621a      	str	r2, [r3, #32]
 8006700:	e008      	b.n	8006714 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6211      	str	r1, [r2, #32]
 800670c:	781a      	ldrb	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29b      	uxth	r3, r3
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4619      	mov	r1, r3
 8006722:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10f      	bne.n	8006748 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006736:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006746:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	e000      	b.n	800674e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800674c:	2302      	movs	r3, #2
  }
}
 800674e:	4618      	mov	r0, r3
 8006750:	3714      	adds	r7, #20
 8006752:	46bd      	mov	sp, r7
 8006754:	bc80      	pop	{r7}
 8006756:	4770      	bx	lr

08006758 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800676e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2220      	movs	r2, #32
 8006774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f7ff fe79 	bl	8006470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3708      	adds	r7, #8
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08c      	sub	sp, #48	@ 0x30
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b22      	cmp	r3, #34	@ 0x22
 800679a:	f040 80ae 	bne.w	80068fa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067a6:	d117      	bne.n	80067d8 <UART_Receive_IT+0x50>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d113      	bne.n	80067d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	1c9a      	adds	r2, r3, #2
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80067d6:	e026      	b.n	8006826 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ea:	d007      	beq.n	80067fc <UART_Receive_IT+0x74>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d10a      	bne.n	800680a <UART_Receive_IT+0x82>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d106      	bne.n	800680a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e008      	b.n	800681c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	b2db      	uxtb	r3, r3
 8006812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006816:	b2da      	uxtb	r2, r3
 8006818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800681a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29b      	uxth	r3, r3
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	4619      	mov	r1, r3
 8006834:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006836:	2b00      	cmp	r3, #0
 8006838:	d15d      	bne.n	80068f6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0220 	bic.w	r2, r2, #32
 8006848:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006858:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	695a      	ldr	r2, [r3, #20]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800687c:	2b01      	cmp	r3, #1
 800687e:	d135      	bne.n	80068ec <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	613b      	str	r3, [r7, #16]
   return(result);
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f023 0310 	bic.w	r3, r3, #16
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a6:	623a      	str	r2, [r7, #32]
 80068a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	69f9      	ldr	r1, [r7, #28]
 80068ac:	6a3a      	ldr	r2, [r7, #32]
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	61bb      	str	r3, [r7, #24]
   return(result);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e5      	bne.n	8006886 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0310 	and.w	r3, r3, #16
 80068c4:	2b10      	cmp	r3, #16
 80068c6:	d10a      	bne.n	80068de <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068c8:	2300      	movs	r3, #0
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fdd5 	bl	8006494 <HAL_UARTEx_RxEventCallback>
 80068ea:	e002      	b.n	80068f2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7fb f9c1 	bl	8001c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	e002      	b.n	80068fc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	e000      	b.n	80068fc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068fa:	2302      	movs	r3, #2
  }
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3730      	adds	r7, #48	@ 0x30
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	430a      	orrs	r2, r1
 8006920:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	4313      	orrs	r3, r2
 8006932:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800693e:	f023 030c 	bic.w	r3, r3, #12
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6812      	ldr	r2, [r2, #0]
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	430b      	orrs	r3, r1
 800694a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	430a      	orrs	r2, r1
 8006960:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a2c      	ldr	r2, [pc, #176]	@ (8006a18 <UART_SetConfig+0x114>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d103      	bne.n	8006974 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800696c:	f7fe f9da 	bl	8004d24 <HAL_RCC_GetPCLK2Freq>
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	e002      	b.n	800697a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006974:	f7fe f9c2 	bl	8004cfc <HAL_RCC_GetPCLK1Freq>
 8006978:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009a      	lsls	r2, r3, #2
 8006984:	441a      	add	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	4a22      	ldr	r2, [pc, #136]	@ (8006a1c <UART_SetConfig+0x118>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	0119      	lsls	r1, r3, #4
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4613      	mov	r3, r2
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	009a      	lsls	r2, r3, #2
 80069a4:	441a      	add	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80069b0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a1c <UART_SetConfig+0x118>)
 80069b2:	fba3 0302 	umull	r0, r3, r3, r2
 80069b6:	095b      	lsrs	r3, r3, #5
 80069b8:	2064      	movs	r0, #100	@ 0x64
 80069ba:	fb00 f303 	mul.w	r3, r0, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	3332      	adds	r3, #50	@ 0x32
 80069c4:	4a15      	ldr	r2, [pc, #84]	@ (8006a1c <UART_SetConfig+0x118>)
 80069c6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069d0:	4419      	add	r1, r3
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	4613      	mov	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4413      	add	r3, r2
 80069da:	009a      	lsls	r2, r3, #2
 80069dc:	441a      	add	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80069e8:	4b0c      	ldr	r3, [pc, #48]	@ (8006a1c <UART_SetConfig+0x118>)
 80069ea:	fba3 0302 	umull	r0, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	2064      	movs	r0, #100	@ 0x64
 80069f2:	fb00 f303 	mul.w	r3, r0, r3
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	3332      	adds	r3, #50	@ 0x32
 80069fc:	4a07      	ldr	r2, [pc, #28]	@ (8006a1c <UART_SetConfig+0x118>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	f003 020f 	and.w	r2, r3, #15
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	440a      	add	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a10:	bf00      	nop
 8006a12:	3710      	adds	r7, #16
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40013800 	.word	0x40013800
 8006a1c:	51eb851f 	.word	0x51eb851f

08006a20 <_strtol_l.constprop.0>:
 8006a20:	2b24      	cmp	r3, #36	@ 0x24
 8006a22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a26:	4686      	mov	lr, r0
 8006a28:	4690      	mov	r8, r2
 8006a2a:	d801      	bhi.n	8006a30 <_strtol_l.constprop.0+0x10>
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d106      	bne.n	8006a3e <_strtol_l.constprop.0+0x1e>
 8006a30:	f001 f868 	bl	8007b04 <__errno>
 8006a34:	2316      	movs	r3, #22
 8006a36:	6003      	str	r3, [r0, #0]
 8006a38:	2000      	movs	r0, #0
 8006a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3e:	460d      	mov	r5, r1
 8006a40:	4833      	ldr	r0, [pc, #204]	@ (8006b10 <_strtol_l.constprop.0+0xf0>)
 8006a42:	462a      	mov	r2, r5
 8006a44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006a48:	5d06      	ldrb	r6, [r0, r4]
 8006a4a:	f016 0608 	ands.w	r6, r6, #8
 8006a4e:	d1f8      	bne.n	8006a42 <_strtol_l.constprop.0+0x22>
 8006a50:	2c2d      	cmp	r4, #45	@ 0x2d
 8006a52:	d12d      	bne.n	8006ab0 <_strtol_l.constprop.0+0x90>
 8006a54:	2601      	movs	r6, #1
 8006a56:	782c      	ldrb	r4, [r5, #0]
 8006a58:	1c95      	adds	r5, r2, #2
 8006a5a:	f033 0210 	bics.w	r2, r3, #16
 8006a5e:	d109      	bne.n	8006a74 <_strtol_l.constprop.0+0x54>
 8006a60:	2c30      	cmp	r4, #48	@ 0x30
 8006a62:	d12a      	bne.n	8006aba <_strtol_l.constprop.0+0x9a>
 8006a64:	782a      	ldrb	r2, [r5, #0]
 8006a66:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006a6a:	2a58      	cmp	r2, #88	@ 0x58
 8006a6c:	d125      	bne.n	8006aba <_strtol_l.constprop.0+0x9a>
 8006a6e:	2310      	movs	r3, #16
 8006a70:	786c      	ldrb	r4, [r5, #1]
 8006a72:	3502      	adds	r5, #2
 8006a74:	2200      	movs	r2, #0
 8006a76:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006a7a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006a7e:	fbbc f9f3 	udiv	r9, ip, r3
 8006a82:	4610      	mov	r0, r2
 8006a84:	fb03 ca19 	mls	sl, r3, r9, ip
 8006a88:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006a8c:	2f09      	cmp	r7, #9
 8006a8e:	d81b      	bhi.n	8006ac8 <_strtol_l.constprop.0+0xa8>
 8006a90:	463c      	mov	r4, r7
 8006a92:	42a3      	cmp	r3, r4
 8006a94:	dd27      	ble.n	8006ae6 <_strtol_l.constprop.0+0xc6>
 8006a96:	1c57      	adds	r7, r2, #1
 8006a98:	d007      	beq.n	8006aaa <_strtol_l.constprop.0+0x8a>
 8006a9a:	4581      	cmp	r9, r0
 8006a9c:	d320      	bcc.n	8006ae0 <_strtol_l.constprop.0+0xc0>
 8006a9e:	d101      	bne.n	8006aa4 <_strtol_l.constprop.0+0x84>
 8006aa0:	45a2      	cmp	sl, r4
 8006aa2:	db1d      	blt.n	8006ae0 <_strtol_l.constprop.0+0xc0>
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	fb00 4003 	mla	r0, r0, r3, r4
 8006aaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006aae:	e7eb      	b.n	8006a88 <_strtol_l.constprop.0+0x68>
 8006ab0:	2c2b      	cmp	r4, #43	@ 0x2b
 8006ab2:	bf04      	itt	eq
 8006ab4:	782c      	ldrbeq	r4, [r5, #0]
 8006ab6:	1c95      	addeq	r5, r2, #2
 8006ab8:	e7cf      	b.n	8006a5a <_strtol_l.constprop.0+0x3a>
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d1da      	bne.n	8006a74 <_strtol_l.constprop.0+0x54>
 8006abe:	2c30      	cmp	r4, #48	@ 0x30
 8006ac0:	bf0c      	ite	eq
 8006ac2:	2308      	moveq	r3, #8
 8006ac4:	230a      	movne	r3, #10
 8006ac6:	e7d5      	b.n	8006a74 <_strtol_l.constprop.0+0x54>
 8006ac8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006acc:	2f19      	cmp	r7, #25
 8006ace:	d801      	bhi.n	8006ad4 <_strtol_l.constprop.0+0xb4>
 8006ad0:	3c37      	subs	r4, #55	@ 0x37
 8006ad2:	e7de      	b.n	8006a92 <_strtol_l.constprop.0+0x72>
 8006ad4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006ad8:	2f19      	cmp	r7, #25
 8006ada:	d804      	bhi.n	8006ae6 <_strtol_l.constprop.0+0xc6>
 8006adc:	3c57      	subs	r4, #87	@ 0x57
 8006ade:	e7d8      	b.n	8006a92 <_strtol_l.constprop.0+0x72>
 8006ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae4:	e7e1      	b.n	8006aaa <_strtol_l.constprop.0+0x8a>
 8006ae6:	1c53      	adds	r3, r2, #1
 8006ae8:	d108      	bne.n	8006afc <_strtol_l.constprop.0+0xdc>
 8006aea:	2322      	movs	r3, #34	@ 0x22
 8006aec:	4660      	mov	r0, ip
 8006aee:	f8ce 3000 	str.w	r3, [lr]
 8006af2:	f1b8 0f00 	cmp.w	r8, #0
 8006af6:	d0a0      	beq.n	8006a3a <_strtol_l.constprop.0+0x1a>
 8006af8:	1e69      	subs	r1, r5, #1
 8006afa:	e006      	b.n	8006b0a <_strtol_l.constprop.0+0xea>
 8006afc:	b106      	cbz	r6, 8006b00 <_strtol_l.constprop.0+0xe0>
 8006afe:	4240      	negs	r0, r0
 8006b00:	f1b8 0f00 	cmp.w	r8, #0
 8006b04:	d099      	beq.n	8006a3a <_strtol_l.constprop.0+0x1a>
 8006b06:	2a00      	cmp	r2, #0
 8006b08:	d1f6      	bne.n	8006af8 <_strtol_l.constprop.0+0xd8>
 8006b0a:	f8c8 1000 	str.w	r1, [r8]
 8006b0e:	e794      	b.n	8006a3a <_strtol_l.constprop.0+0x1a>
 8006b10:	0800b32b 	.word	0x0800b32b

08006b14 <_strtol_r>:
 8006b14:	f7ff bf84 	b.w	8006a20 <_strtol_l.constprop.0>

08006b18 <__cvt>:
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b1e:	461d      	mov	r5, r3
 8006b20:	bfbb      	ittet	lt
 8006b22:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006b26:	461d      	movlt	r5, r3
 8006b28:	2300      	movge	r3, #0
 8006b2a:	232d      	movlt	r3, #45	@ 0x2d
 8006b2c:	b088      	sub	sp, #32
 8006b2e:	4614      	mov	r4, r2
 8006b30:	bfb8      	it	lt
 8006b32:	4614      	movlt	r4, r2
 8006b34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006b36:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006b38:	7013      	strb	r3, [r2, #0]
 8006b3a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b3c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006b40:	f023 0820 	bic.w	r8, r3, #32
 8006b44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b48:	d005      	beq.n	8006b56 <__cvt+0x3e>
 8006b4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006b4e:	d100      	bne.n	8006b52 <__cvt+0x3a>
 8006b50:	3601      	adds	r6, #1
 8006b52:	2302      	movs	r3, #2
 8006b54:	e000      	b.n	8006b58 <__cvt+0x40>
 8006b56:	2303      	movs	r3, #3
 8006b58:	aa07      	add	r2, sp, #28
 8006b5a:	9204      	str	r2, [sp, #16]
 8006b5c:	aa06      	add	r2, sp, #24
 8006b5e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b62:	e9cd 3600 	strd	r3, r6, [sp]
 8006b66:	4622      	mov	r2, r4
 8006b68:	462b      	mov	r3, r5
 8006b6a:	f001 f895 	bl	8007c98 <_dtoa_r>
 8006b6e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b72:	4607      	mov	r7, r0
 8006b74:	d119      	bne.n	8006baa <__cvt+0x92>
 8006b76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b78:	07db      	lsls	r3, r3, #31
 8006b7a:	d50e      	bpl.n	8006b9a <__cvt+0x82>
 8006b7c:	eb00 0906 	add.w	r9, r0, r6
 8006b80:	2200      	movs	r2, #0
 8006b82:	2300      	movs	r3, #0
 8006b84:	4620      	mov	r0, r4
 8006b86:	4629      	mov	r1, r5
 8006b88:	f7f9 ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8006b8c:	b108      	cbz	r0, 8006b92 <__cvt+0x7a>
 8006b8e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b92:	2230      	movs	r2, #48	@ 0x30
 8006b94:	9b07      	ldr	r3, [sp, #28]
 8006b96:	454b      	cmp	r3, r9
 8006b98:	d31e      	bcc.n	8006bd8 <__cvt+0xc0>
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006ba0:	1bdb      	subs	r3, r3, r7
 8006ba2:	6013      	str	r3, [r2, #0]
 8006ba4:	b008      	add	sp, #32
 8006ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006baa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006bae:	eb00 0906 	add.w	r9, r0, r6
 8006bb2:	d1e5      	bne.n	8006b80 <__cvt+0x68>
 8006bb4:	7803      	ldrb	r3, [r0, #0]
 8006bb6:	2b30      	cmp	r3, #48	@ 0x30
 8006bb8:	d10a      	bne.n	8006bd0 <__cvt+0xb8>
 8006bba:	2200      	movs	r2, #0
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f7f9 fef1 	bl	80009a8 <__aeabi_dcmpeq>
 8006bc6:	b918      	cbnz	r0, 8006bd0 <__cvt+0xb8>
 8006bc8:	f1c6 0601 	rsb	r6, r6, #1
 8006bcc:	f8ca 6000 	str.w	r6, [sl]
 8006bd0:	f8da 3000 	ldr.w	r3, [sl]
 8006bd4:	4499      	add	r9, r3
 8006bd6:	e7d3      	b.n	8006b80 <__cvt+0x68>
 8006bd8:	1c59      	adds	r1, r3, #1
 8006bda:	9107      	str	r1, [sp, #28]
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e7d9      	b.n	8006b94 <__cvt+0x7c>

08006be0 <__exponent>:
 8006be0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006be2:	2900      	cmp	r1, #0
 8006be4:	bfb6      	itet	lt
 8006be6:	232d      	movlt	r3, #45	@ 0x2d
 8006be8:	232b      	movge	r3, #43	@ 0x2b
 8006bea:	4249      	neglt	r1, r1
 8006bec:	2909      	cmp	r1, #9
 8006bee:	7002      	strb	r2, [r0, #0]
 8006bf0:	7043      	strb	r3, [r0, #1]
 8006bf2:	dd29      	ble.n	8006c48 <__exponent+0x68>
 8006bf4:	f10d 0307 	add.w	r3, sp, #7
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	270a      	movs	r7, #10
 8006bfc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006c00:	461a      	mov	r2, r3
 8006c02:	fb07 1416 	mls	r4, r7, r6, r1
 8006c06:	3430      	adds	r4, #48	@ 0x30
 8006c08:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006c0c:	460c      	mov	r4, r1
 8006c0e:	2c63      	cmp	r4, #99	@ 0x63
 8006c10:	4631      	mov	r1, r6
 8006c12:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c16:	dcf1      	bgt.n	8006bfc <__exponent+0x1c>
 8006c18:	3130      	adds	r1, #48	@ 0x30
 8006c1a:	1e94      	subs	r4, r2, #2
 8006c1c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006c20:	4623      	mov	r3, r4
 8006c22:	1c41      	adds	r1, r0, #1
 8006c24:	42ab      	cmp	r3, r5
 8006c26:	d30a      	bcc.n	8006c3e <__exponent+0x5e>
 8006c28:	f10d 0309 	add.w	r3, sp, #9
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	42ac      	cmp	r4, r5
 8006c30:	bf88      	it	hi
 8006c32:	2300      	movhi	r3, #0
 8006c34:	3302      	adds	r3, #2
 8006c36:	4403      	add	r3, r0
 8006c38:	1a18      	subs	r0, r3, r0
 8006c3a:	b003      	add	sp, #12
 8006c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c3e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006c42:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006c46:	e7ed      	b.n	8006c24 <__exponent+0x44>
 8006c48:	2330      	movs	r3, #48	@ 0x30
 8006c4a:	3130      	adds	r1, #48	@ 0x30
 8006c4c:	7083      	strb	r3, [r0, #2]
 8006c4e:	70c1      	strb	r1, [r0, #3]
 8006c50:	1d03      	adds	r3, r0, #4
 8006c52:	e7f1      	b.n	8006c38 <__exponent+0x58>

08006c54 <_printf_float>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	b091      	sub	sp, #68	@ 0x44
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006c60:	4616      	mov	r6, r2
 8006c62:	461f      	mov	r7, r3
 8006c64:	4605      	mov	r5, r0
 8006c66:	f000 ff03 	bl	8007a70 <_localeconv_r>
 8006c6a:	6803      	ldr	r3, [r0, #0]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	9308      	str	r3, [sp, #32]
 8006c70:	f7f9 fa6e 	bl	8000150 <strlen>
 8006c74:	2300      	movs	r3, #0
 8006c76:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c78:	f8d8 3000 	ldr.w	r3, [r8]
 8006c7c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c7e:	3307      	adds	r3, #7
 8006c80:	f023 0307 	bic.w	r3, r3, #7
 8006c84:	f103 0208 	add.w	r2, r3, #8
 8006c88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c8c:	f8d4 b000 	ldr.w	fp, [r4]
 8006c90:	f8c8 2000 	str.w	r2, [r8]
 8006c94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c98:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c9e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006caa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006cae:	4b9c      	ldr	r3, [pc, #624]	@ (8006f20 <_printf_float+0x2cc>)
 8006cb0:	f7f9 feac 	bl	8000a0c <__aeabi_dcmpun>
 8006cb4:	bb70      	cbnz	r0, 8006d14 <_printf_float+0xc0>
 8006cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbe:	4b98      	ldr	r3, [pc, #608]	@ (8006f20 <_printf_float+0x2cc>)
 8006cc0:	f7f9 fe86 	bl	80009d0 <__aeabi_dcmple>
 8006cc4:	bb30      	cbnz	r0, 8006d14 <_printf_float+0xc0>
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	4640      	mov	r0, r8
 8006ccc:	4649      	mov	r1, r9
 8006cce:	f7f9 fe75 	bl	80009bc <__aeabi_dcmplt>
 8006cd2:	b110      	cbz	r0, 8006cda <_printf_float+0x86>
 8006cd4:	232d      	movs	r3, #45	@ 0x2d
 8006cd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cda:	4a92      	ldr	r2, [pc, #584]	@ (8006f24 <_printf_float+0x2d0>)
 8006cdc:	4b92      	ldr	r3, [pc, #584]	@ (8006f28 <_printf_float+0x2d4>)
 8006cde:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006ce2:	bf94      	ite	ls
 8006ce4:	4690      	movls	r8, r2
 8006ce6:	4698      	movhi	r8, r3
 8006ce8:	2303      	movs	r3, #3
 8006cea:	f04f 0900 	mov.w	r9, #0
 8006cee:	6123      	str	r3, [r4, #16]
 8006cf0:	f02b 0304 	bic.w	r3, fp, #4
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	4633      	mov	r3, r6
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	9700      	str	r7, [sp, #0]
 8006cfe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006d00:	f000 f9d4 	bl	80070ac <_printf_common>
 8006d04:	3001      	adds	r0, #1
 8006d06:	f040 8090 	bne.w	8006e2a <_printf_float+0x1d6>
 8006d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0e:	b011      	add	sp, #68	@ 0x44
 8006d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d14:	4642      	mov	r2, r8
 8006d16:	464b      	mov	r3, r9
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	f7f9 fe76 	bl	8000a0c <__aeabi_dcmpun>
 8006d20:	b148      	cbz	r0, 8006d36 <_printf_float+0xe2>
 8006d22:	464b      	mov	r3, r9
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bfb8      	it	lt
 8006d28:	232d      	movlt	r3, #45	@ 0x2d
 8006d2a:	4a80      	ldr	r2, [pc, #512]	@ (8006f2c <_printf_float+0x2d8>)
 8006d2c:	bfb8      	it	lt
 8006d2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006d32:	4b7f      	ldr	r3, [pc, #508]	@ (8006f30 <_printf_float+0x2dc>)
 8006d34:	e7d3      	b.n	8006cde <_printf_float+0x8a>
 8006d36:	6863      	ldr	r3, [r4, #4]
 8006d38:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	d13f      	bne.n	8006dc0 <_printf_float+0x16c>
 8006d40:	2306      	movs	r3, #6
 8006d42:	6063      	str	r3, [r4, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	9206      	str	r2, [sp, #24]
 8006d4e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006d50:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006d54:	aa0d      	add	r2, sp, #52	@ 0x34
 8006d56:	9203      	str	r2, [sp, #12]
 8006d58:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006d5c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d60:	6863      	ldr	r3, [r4, #4]
 8006d62:	4642      	mov	r2, r8
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	4628      	mov	r0, r5
 8006d68:	464b      	mov	r3, r9
 8006d6a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d6c:	f7ff fed4 	bl	8006b18 <__cvt>
 8006d70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d72:	4680      	mov	r8, r0
 8006d74:	2947      	cmp	r1, #71	@ 0x47
 8006d76:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d78:	d128      	bne.n	8006dcc <_printf_float+0x178>
 8006d7a:	1cc8      	adds	r0, r1, #3
 8006d7c:	db02      	blt.n	8006d84 <_printf_float+0x130>
 8006d7e:	6863      	ldr	r3, [r4, #4]
 8006d80:	4299      	cmp	r1, r3
 8006d82:	dd40      	ble.n	8006e06 <_printf_float+0x1b2>
 8006d84:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d88:	fa5f fa8a 	uxtb.w	sl, sl
 8006d8c:	4652      	mov	r2, sl
 8006d8e:	3901      	subs	r1, #1
 8006d90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d94:	910d      	str	r1, [sp, #52]	@ 0x34
 8006d96:	f7ff ff23 	bl	8006be0 <__exponent>
 8006d9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d9c:	4681      	mov	r9, r0
 8006d9e:	1813      	adds	r3, r2, r0
 8006da0:	2a01      	cmp	r2, #1
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	dc02      	bgt.n	8006dac <_printf_float+0x158>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	07d2      	lsls	r2, r2, #31
 8006daa:	d501      	bpl.n	8006db0 <_printf_float+0x15c>
 8006dac:	3301      	adds	r3, #1
 8006dae:	6123      	str	r3, [r4, #16]
 8006db0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d09e      	beq.n	8006cf6 <_printf_float+0xa2>
 8006db8:	232d      	movs	r3, #45	@ 0x2d
 8006dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dbe:	e79a      	b.n	8006cf6 <_printf_float+0xa2>
 8006dc0:	2947      	cmp	r1, #71	@ 0x47
 8006dc2:	d1bf      	bne.n	8006d44 <_printf_float+0xf0>
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1bd      	bne.n	8006d44 <_printf_float+0xf0>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e7ba      	b.n	8006d42 <_printf_float+0xee>
 8006dcc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dd0:	d9dc      	bls.n	8006d8c <_printf_float+0x138>
 8006dd2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006dd6:	d118      	bne.n	8006e0a <_printf_float+0x1b6>
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	dd0b      	ble.n	8006df6 <_printf_float+0x1a2>
 8006dde:	6121      	str	r1, [r4, #16]
 8006de0:	b913      	cbnz	r3, 8006de8 <_printf_float+0x194>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	07d0      	lsls	r0, r2, #31
 8006de6:	d502      	bpl.n	8006dee <_printf_float+0x19a>
 8006de8:	3301      	adds	r3, #1
 8006dea:	440b      	add	r3, r1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	f04f 0900 	mov.w	r9, #0
 8006df2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006df4:	e7dc      	b.n	8006db0 <_printf_float+0x15c>
 8006df6:	b913      	cbnz	r3, 8006dfe <_printf_float+0x1aa>
 8006df8:	6822      	ldr	r2, [r4, #0]
 8006dfa:	07d2      	lsls	r2, r2, #31
 8006dfc:	d501      	bpl.n	8006e02 <_printf_float+0x1ae>
 8006dfe:	3302      	adds	r3, #2
 8006e00:	e7f4      	b.n	8006dec <_printf_float+0x198>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7f2      	b.n	8006dec <_printf_float+0x198>
 8006e06:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006e0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	db05      	blt.n	8006e1c <_printf_float+0x1c8>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	6121      	str	r1, [r4, #16]
 8006e14:	07d8      	lsls	r0, r3, #31
 8006e16:	d5ea      	bpl.n	8006dee <_printf_float+0x19a>
 8006e18:	1c4b      	adds	r3, r1, #1
 8006e1a:	e7e7      	b.n	8006dec <_printf_float+0x198>
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	bfcc      	ite	gt
 8006e20:	2201      	movgt	r2, #1
 8006e22:	f1c1 0202 	rsble	r2, r1, #2
 8006e26:	4413      	add	r3, r2
 8006e28:	e7e0      	b.n	8006dec <_printf_float+0x198>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	055a      	lsls	r2, r3, #21
 8006e2e:	d407      	bmi.n	8006e40 <_printf_float+0x1ec>
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	4642      	mov	r2, r8
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	47b8      	blx	r7
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d12b      	bne.n	8006e96 <_printf_float+0x242>
 8006e3e:	e764      	b.n	8006d0a <_printf_float+0xb6>
 8006e40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006e44:	f240 80dc 	bls.w	8007000 <_printf_float+0x3ac>
 8006e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f7f9 fdaa 	bl	80009a8 <__aeabi_dcmpeq>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d033      	beq.n	8006ec0 <_printf_float+0x26c>
 8006e58:	2301      	movs	r3, #1
 8006e5a:	4631      	mov	r1, r6
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	4a35      	ldr	r2, [pc, #212]	@ (8006f34 <_printf_float+0x2e0>)
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f af51 	beq.w	8006d0a <_printf_float+0xb6>
 8006e68:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006e6c:	4543      	cmp	r3, r8
 8006e6e:	db02      	blt.n	8006e76 <_printf_float+0x222>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	07d8      	lsls	r0, r3, #31
 8006e74:	d50f      	bpl.n	8006e96 <_printf_float+0x242>
 8006e76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b8      	blx	r7
 8006e80:	3001      	adds	r0, #1
 8006e82:	f43f af42 	beq.w	8006d0a <_printf_float+0xb6>
 8006e86:	f04f 0900 	mov.w	r9, #0
 8006e8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e8e:	f104 0a1a 	add.w	sl, r4, #26
 8006e92:	45c8      	cmp	r8, r9
 8006e94:	dc09      	bgt.n	8006eaa <_printf_float+0x256>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	079b      	lsls	r3, r3, #30
 8006e9a:	f100 8102 	bmi.w	80070a2 <_printf_float+0x44e>
 8006e9e:	68e0      	ldr	r0, [r4, #12]
 8006ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ea2:	4298      	cmp	r0, r3
 8006ea4:	bfb8      	it	lt
 8006ea6:	4618      	movlt	r0, r3
 8006ea8:	e731      	b.n	8006d0e <_printf_float+0xba>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	4652      	mov	r2, sl
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f af28 	beq.w	8006d0a <_printf_float+0xb6>
 8006eba:	f109 0901 	add.w	r9, r9, #1
 8006ebe:	e7e8      	b.n	8006e92 <_printf_float+0x23e>
 8006ec0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	dc38      	bgt.n	8006f38 <_printf_float+0x2e4>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	4a19      	ldr	r2, [pc, #100]	@ (8006f34 <_printf_float+0x2e0>)
 8006ece:	47b8      	blx	r7
 8006ed0:	3001      	adds	r0, #1
 8006ed2:	f43f af1a 	beq.w	8006d0a <_printf_float+0xb6>
 8006ed6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006eda:	ea59 0303 	orrs.w	r3, r9, r3
 8006ede:	d102      	bne.n	8006ee6 <_printf_float+0x292>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07d9      	lsls	r1, r3, #31
 8006ee4:	d5d7      	bpl.n	8006e96 <_printf_float+0x242>
 8006ee6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006eea:	4631      	mov	r1, r6
 8006eec:	4628      	mov	r0, r5
 8006eee:	47b8      	blx	r7
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	f43f af0a 	beq.w	8006d0a <_printf_float+0xb6>
 8006ef6:	f04f 0a00 	mov.w	sl, #0
 8006efa:	f104 0b1a 	add.w	fp, r4, #26
 8006efe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f00:	425b      	negs	r3, r3
 8006f02:	4553      	cmp	r3, sl
 8006f04:	dc01      	bgt.n	8006f0a <_printf_float+0x2b6>
 8006f06:	464b      	mov	r3, r9
 8006f08:	e793      	b.n	8006e32 <_printf_float+0x1de>
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	465a      	mov	r2, fp
 8006f0e:	4631      	mov	r1, r6
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b8      	blx	r7
 8006f14:	3001      	adds	r0, #1
 8006f16:	f43f aef8 	beq.w	8006d0a <_printf_float+0xb6>
 8006f1a:	f10a 0a01 	add.w	sl, sl, #1
 8006f1e:	e7ee      	b.n	8006efe <_printf_float+0x2aa>
 8006f20:	7fefffff 	.word	0x7fefffff
 8006f24:	0800b42b 	.word	0x0800b42b
 8006f28:	0800b42f 	.word	0x0800b42f
 8006f2c:	0800b433 	.word	0x0800b433
 8006f30:	0800b437 	.word	0x0800b437
 8006f34:	0800b43b 	.word	0x0800b43b
 8006f38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f3a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006f3e:	4553      	cmp	r3, sl
 8006f40:	bfa8      	it	ge
 8006f42:	4653      	movge	r3, sl
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	4699      	mov	r9, r3
 8006f48:	dc36      	bgt.n	8006fb8 <_printf_float+0x364>
 8006f4a:	f04f 0b00 	mov.w	fp, #0
 8006f4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f52:	f104 021a 	add.w	r2, r4, #26
 8006f56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f58:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f5a:	eba3 0309 	sub.w	r3, r3, r9
 8006f5e:	455b      	cmp	r3, fp
 8006f60:	dc31      	bgt.n	8006fc6 <_printf_float+0x372>
 8006f62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f64:	459a      	cmp	sl, r3
 8006f66:	dc3a      	bgt.n	8006fde <_printf_float+0x38a>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	07da      	lsls	r2, r3, #31
 8006f6c:	d437      	bmi.n	8006fde <_printf_float+0x38a>
 8006f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f70:	ebaa 0903 	sub.w	r9, sl, r3
 8006f74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f76:	ebaa 0303 	sub.w	r3, sl, r3
 8006f7a:	4599      	cmp	r9, r3
 8006f7c:	bfa8      	it	ge
 8006f7e:	4699      	movge	r9, r3
 8006f80:	f1b9 0f00 	cmp.w	r9, #0
 8006f84:	dc33      	bgt.n	8006fee <_printf_float+0x39a>
 8006f86:	f04f 0800 	mov.w	r8, #0
 8006f8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f8e:	f104 0b1a 	add.w	fp, r4, #26
 8006f92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f94:	ebaa 0303 	sub.w	r3, sl, r3
 8006f98:	eba3 0309 	sub.w	r3, r3, r9
 8006f9c:	4543      	cmp	r3, r8
 8006f9e:	f77f af7a 	ble.w	8006e96 <_printf_float+0x242>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	465a      	mov	r2, fp
 8006fa6:	4631      	mov	r1, r6
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b8      	blx	r7
 8006fac:	3001      	adds	r0, #1
 8006fae:	f43f aeac 	beq.w	8006d0a <_printf_float+0xb6>
 8006fb2:	f108 0801 	add.w	r8, r8, #1
 8006fb6:	e7ec      	b.n	8006f92 <_printf_float+0x33e>
 8006fb8:	4642      	mov	r2, r8
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d1c2      	bne.n	8006f4a <_printf_float+0x2f6>
 8006fc4:	e6a1      	b.n	8006d0a <_printf_float+0xb6>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	4631      	mov	r1, r6
 8006fca:	4628      	mov	r0, r5
 8006fcc:	920a      	str	r2, [sp, #40]	@ 0x28
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae9a 	beq.w	8006d0a <_printf_float+0xb6>
 8006fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006fd8:	f10b 0b01 	add.w	fp, fp, #1
 8006fdc:	e7bb      	b.n	8006f56 <_printf_float+0x302>
 8006fde:	4631      	mov	r1, r6
 8006fe0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	47b8      	blx	r7
 8006fe8:	3001      	adds	r0, #1
 8006fea:	d1c0      	bne.n	8006f6e <_printf_float+0x31a>
 8006fec:	e68d      	b.n	8006d0a <_printf_float+0xb6>
 8006fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	4442      	add	r2, r8
 8006ff8:	47b8      	blx	r7
 8006ffa:	3001      	adds	r0, #1
 8006ffc:	d1c3      	bne.n	8006f86 <_printf_float+0x332>
 8006ffe:	e684      	b.n	8006d0a <_printf_float+0xb6>
 8007000:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007004:	f1ba 0f01 	cmp.w	sl, #1
 8007008:	dc01      	bgt.n	800700e <_printf_float+0x3ba>
 800700a:	07db      	lsls	r3, r3, #31
 800700c:	d536      	bpl.n	800707c <_printf_float+0x428>
 800700e:	2301      	movs	r3, #1
 8007010:	4642      	mov	r2, r8
 8007012:	4631      	mov	r1, r6
 8007014:	4628      	mov	r0, r5
 8007016:	47b8      	blx	r7
 8007018:	3001      	adds	r0, #1
 800701a:	f43f ae76 	beq.w	8006d0a <_printf_float+0xb6>
 800701e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007022:	4631      	mov	r1, r6
 8007024:	4628      	mov	r0, r5
 8007026:	47b8      	blx	r7
 8007028:	3001      	adds	r0, #1
 800702a:	f43f ae6e 	beq.w	8006d0a <_printf_float+0xb6>
 800702e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007032:	2200      	movs	r2, #0
 8007034:	2300      	movs	r3, #0
 8007036:	f10a 3aff 	add.w	sl, sl, #4294967295
 800703a:	f7f9 fcb5 	bl	80009a8 <__aeabi_dcmpeq>
 800703e:	b9c0      	cbnz	r0, 8007072 <_printf_float+0x41e>
 8007040:	4653      	mov	r3, sl
 8007042:	f108 0201 	add.w	r2, r8, #1
 8007046:	4631      	mov	r1, r6
 8007048:	4628      	mov	r0, r5
 800704a:	47b8      	blx	r7
 800704c:	3001      	adds	r0, #1
 800704e:	d10c      	bne.n	800706a <_printf_float+0x416>
 8007050:	e65b      	b.n	8006d0a <_printf_float+0xb6>
 8007052:	2301      	movs	r3, #1
 8007054:	465a      	mov	r2, fp
 8007056:	4631      	mov	r1, r6
 8007058:	4628      	mov	r0, r5
 800705a:	47b8      	blx	r7
 800705c:	3001      	adds	r0, #1
 800705e:	f43f ae54 	beq.w	8006d0a <_printf_float+0xb6>
 8007062:	f108 0801 	add.w	r8, r8, #1
 8007066:	45d0      	cmp	r8, sl
 8007068:	dbf3      	blt.n	8007052 <_printf_float+0x3fe>
 800706a:	464b      	mov	r3, r9
 800706c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007070:	e6e0      	b.n	8006e34 <_printf_float+0x1e0>
 8007072:	f04f 0800 	mov.w	r8, #0
 8007076:	f104 0b1a 	add.w	fp, r4, #26
 800707a:	e7f4      	b.n	8007066 <_printf_float+0x412>
 800707c:	2301      	movs	r3, #1
 800707e:	4642      	mov	r2, r8
 8007080:	e7e1      	b.n	8007046 <_printf_float+0x3f2>
 8007082:	2301      	movs	r3, #1
 8007084:	464a      	mov	r2, r9
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f ae3c 	beq.w	8006d0a <_printf_float+0xb6>
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	68e3      	ldr	r3, [r4, #12]
 8007098:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800709a:	1a5b      	subs	r3, r3, r1
 800709c:	4543      	cmp	r3, r8
 800709e:	dcf0      	bgt.n	8007082 <_printf_float+0x42e>
 80070a0:	e6fd      	b.n	8006e9e <_printf_float+0x24a>
 80070a2:	f04f 0800 	mov.w	r8, #0
 80070a6:	f104 0919 	add.w	r9, r4, #25
 80070aa:	e7f4      	b.n	8007096 <_printf_float+0x442>

080070ac <_printf_common>:
 80070ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b0:	4616      	mov	r6, r2
 80070b2:	4698      	mov	r8, r3
 80070b4:	688a      	ldr	r2, [r1, #8]
 80070b6:	690b      	ldr	r3, [r1, #16]
 80070b8:	4607      	mov	r7, r0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	bfb8      	it	lt
 80070be:	4613      	movlt	r3, r2
 80070c0:	6033      	str	r3, [r6, #0]
 80070c2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80070c6:	460c      	mov	r4, r1
 80070c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80070cc:	b10a      	cbz	r2, 80070d2 <_printf_common+0x26>
 80070ce:	3301      	adds	r3, #1
 80070d0:	6033      	str	r3, [r6, #0]
 80070d2:	6823      	ldr	r3, [r4, #0]
 80070d4:	0699      	lsls	r1, r3, #26
 80070d6:	bf42      	ittt	mi
 80070d8:	6833      	ldrmi	r3, [r6, #0]
 80070da:	3302      	addmi	r3, #2
 80070dc:	6033      	strmi	r3, [r6, #0]
 80070de:	6825      	ldr	r5, [r4, #0]
 80070e0:	f015 0506 	ands.w	r5, r5, #6
 80070e4:	d106      	bne.n	80070f4 <_printf_common+0x48>
 80070e6:	f104 0a19 	add.w	sl, r4, #25
 80070ea:	68e3      	ldr	r3, [r4, #12]
 80070ec:	6832      	ldr	r2, [r6, #0]
 80070ee:	1a9b      	subs	r3, r3, r2
 80070f0:	42ab      	cmp	r3, r5
 80070f2:	dc2b      	bgt.n	800714c <_printf_common+0xa0>
 80070f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070f8:	6822      	ldr	r2, [r4, #0]
 80070fa:	3b00      	subs	r3, #0
 80070fc:	bf18      	it	ne
 80070fe:	2301      	movne	r3, #1
 8007100:	0692      	lsls	r2, r2, #26
 8007102:	d430      	bmi.n	8007166 <_printf_common+0xba>
 8007104:	4641      	mov	r1, r8
 8007106:	4638      	mov	r0, r7
 8007108:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800710c:	47c8      	blx	r9
 800710e:	3001      	adds	r0, #1
 8007110:	d023      	beq.n	800715a <_printf_common+0xae>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	6922      	ldr	r2, [r4, #16]
 8007116:	f003 0306 	and.w	r3, r3, #6
 800711a:	2b04      	cmp	r3, #4
 800711c:	bf14      	ite	ne
 800711e:	2500      	movne	r5, #0
 8007120:	6833      	ldreq	r3, [r6, #0]
 8007122:	f04f 0600 	mov.w	r6, #0
 8007126:	bf08      	it	eq
 8007128:	68e5      	ldreq	r5, [r4, #12]
 800712a:	f104 041a 	add.w	r4, r4, #26
 800712e:	bf08      	it	eq
 8007130:	1aed      	subeq	r5, r5, r3
 8007132:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007136:	bf08      	it	eq
 8007138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800713c:	4293      	cmp	r3, r2
 800713e:	bfc4      	itt	gt
 8007140:	1a9b      	subgt	r3, r3, r2
 8007142:	18ed      	addgt	r5, r5, r3
 8007144:	42b5      	cmp	r5, r6
 8007146:	d11a      	bne.n	800717e <_printf_common+0xd2>
 8007148:	2000      	movs	r0, #0
 800714a:	e008      	b.n	800715e <_printf_common+0xb2>
 800714c:	2301      	movs	r3, #1
 800714e:	4652      	mov	r2, sl
 8007150:	4641      	mov	r1, r8
 8007152:	4638      	mov	r0, r7
 8007154:	47c8      	blx	r9
 8007156:	3001      	adds	r0, #1
 8007158:	d103      	bne.n	8007162 <_printf_common+0xb6>
 800715a:	f04f 30ff 	mov.w	r0, #4294967295
 800715e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007162:	3501      	adds	r5, #1
 8007164:	e7c1      	b.n	80070ea <_printf_common+0x3e>
 8007166:	2030      	movs	r0, #48	@ 0x30
 8007168:	18e1      	adds	r1, r4, r3
 800716a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800716e:	1c5a      	adds	r2, r3, #1
 8007170:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007174:	4422      	add	r2, r4
 8007176:	3302      	adds	r3, #2
 8007178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800717c:	e7c2      	b.n	8007104 <_printf_common+0x58>
 800717e:	2301      	movs	r3, #1
 8007180:	4622      	mov	r2, r4
 8007182:	4641      	mov	r1, r8
 8007184:	4638      	mov	r0, r7
 8007186:	47c8      	blx	r9
 8007188:	3001      	adds	r0, #1
 800718a:	d0e6      	beq.n	800715a <_printf_common+0xae>
 800718c:	3601      	adds	r6, #1
 800718e:	e7d9      	b.n	8007144 <_printf_common+0x98>

08007190 <_printf_i>:
 8007190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	7e0f      	ldrb	r7, [r1, #24]
 8007196:	4691      	mov	r9, r2
 8007198:	2f78      	cmp	r7, #120	@ 0x78
 800719a:	4680      	mov	r8, r0
 800719c:	460c      	mov	r4, r1
 800719e:	469a      	mov	sl, r3
 80071a0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80071a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80071a6:	d807      	bhi.n	80071b8 <_printf_i+0x28>
 80071a8:	2f62      	cmp	r7, #98	@ 0x62
 80071aa:	d80a      	bhi.n	80071c2 <_printf_i+0x32>
 80071ac:	2f00      	cmp	r7, #0
 80071ae:	f000 80d3 	beq.w	8007358 <_printf_i+0x1c8>
 80071b2:	2f58      	cmp	r7, #88	@ 0x58
 80071b4:	f000 80ba 	beq.w	800732c <_printf_i+0x19c>
 80071b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80071c0:	e03a      	b.n	8007238 <_printf_i+0xa8>
 80071c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80071c6:	2b15      	cmp	r3, #21
 80071c8:	d8f6      	bhi.n	80071b8 <_printf_i+0x28>
 80071ca:	a101      	add	r1, pc, #4	@ (adr r1, 80071d0 <_printf_i+0x40>)
 80071cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071d0:	08007229 	.word	0x08007229
 80071d4:	0800723d 	.word	0x0800723d
 80071d8:	080071b9 	.word	0x080071b9
 80071dc:	080071b9 	.word	0x080071b9
 80071e0:	080071b9 	.word	0x080071b9
 80071e4:	080071b9 	.word	0x080071b9
 80071e8:	0800723d 	.word	0x0800723d
 80071ec:	080071b9 	.word	0x080071b9
 80071f0:	080071b9 	.word	0x080071b9
 80071f4:	080071b9 	.word	0x080071b9
 80071f8:	080071b9 	.word	0x080071b9
 80071fc:	0800733f 	.word	0x0800733f
 8007200:	08007267 	.word	0x08007267
 8007204:	080072f9 	.word	0x080072f9
 8007208:	080071b9 	.word	0x080071b9
 800720c:	080071b9 	.word	0x080071b9
 8007210:	08007361 	.word	0x08007361
 8007214:	080071b9 	.word	0x080071b9
 8007218:	08007267 	.word	0x08007267
 800721c:	080071b9 	.word	0x080071b9
 8007220:	080071b9 	.word	0x080071b9
 8007224:	08007301 	.word	0x08007301
 8007228:	6833      	ldr	r3, [r6, #0]
 800722a:	1d1a      	adds	r2, r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6032      	str	r2, [r6, #0]
 8007230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007234:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007238:	2301      	movs	r3, #1
 800723a:	e09e      	b.n	800737a <_printf_i+0x1ea>
 800723c:	6833      	ldr	r3, [r6, #0]
 800723e:	6820      	ldr	r0, [r4, #0]
 8007240:	1d19      	adds	r1, r3, #4
 8007242:	6031      	str	r1, [r6, #0]
 8007244:	0606      	lsls	r6, r0, #24
 8007246:	d501      	bpl.n	800724c <_printf_i+0xbc>
 8007248:	681d      	ldr	r5, [r3, #0]
 800724a:	e003      	b.n	8007254 <_printf_i+0xc4>
 800724c:	0645      	lsls	r5, r0, #25
 800724e:	d5fb      	bpl.n	8007248 <_printf_i+0xb8>
 8007250:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007254:	2d00      	cmp	r5, #0
 8007256:	da03      	bge.n	8007260 <_printf_i+0xd0>
 8007258:	232d      	movs	r3, #45	@ 0x2d
 800725a:	426d      	negs	r5, r5
 800725c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007260:	230a      	movs	r3, #10
 8007262:	4859      	ldr	r0, [pc, #356]	@ (80073c8 <_printf_i+0x238>)
 8007264:	e011      	b.n	800728a <_printf_i+0xfa>
 8007266:	6821      	ldr	r1, [r4, #0]
 8007268:	6833      	ldr	r3, [r6, #0]
 800726a:	0608      	lsls	r0, r1, #24
 800726c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007270:	d402      	bmi.n	8007278 <_printf_i+0xe8>
 8007272:	0649      	lsls	r1, r1, #25
 8007274:	bf48      	it	mi
 8007276:	b2ad      	uxthmi	r5, r5
 8007278:	2f6f      	cmp	r7, #111	@ 0x6f
 800727a:	6033      	str	r3, [r6, #0]
 800727c:	bf14      	ite	ne
 800727e:	230a      	movne	r3, #10
 8007280:	2308      	moveq	r3, #8
 8007282:	4851      	ldr	r0, [pc, #324]	@ (80073c8 <_printf_i+0x238>)
 8007284:	2100      	movs	r1, #0
 8007286:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800728a:	6866      	ldr	r6, [r4, #4]
 800728c:	2e00      	cmp	r6, #0
 800728e:	bfa8      	it	ge
 8007290:	6821      	ldrge	r1, [r4, #0]
 8007292:	60a6      	str	r6, [r4, #8]
 8007294:	bfa4      	itt	ge
 8007296:	f021 0104 	bicge.w	r1, r1, #4
 800729a:	6021      	strge	r1, [r4, #0]
 800729c:	b90d      	cbnz	r5, 80072a2 <_printf_i+0x112>
 800729e:	2e00      	cmp	r6, #0
 80072a0:	d04b      	beq.n	800733a <_printf_i+0x1aa>
 80072a2:	4616      	mov	r6, r2
 80072a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80072a8:	fb03 5711 	mls	r7, r3, r1, r5
 80072ac:	5dc7      	ldrb	r7, [r0, r7]
 80072ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072b2:	462f      	mov	r7, r5
 80072b4:	42bb      	cmp	r3, r7
 80072b6:	460d      	mov	r5, r1
 80072b8:	d9f4      	bls.n	80072a4 <_printf_i+0x114>
 80072ba:	2b08      	cmp	r3, #8
 80072bc:	d10b      	bne.n	80072d6 <_printf_i+0x146>
 80072be:	6823      	ldr	r3, [r4, #0]
 80072c0:	07df      	lsls	r7, r3, #31
 80072c2:	d508      	bpl.n	80072d6 <_printf_i+0x146>
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	6861      	ldr	r1, [r4, #4]
 80072c8:	4299      	cmp	r1, r3
 80072ca:	bfde      	ittt	le
 80072cc:	2330      	movle	r3, #48	@ 0x30
 80072ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80072d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80072d6:	1b92      	subs	r2, r2, r6
 80072d8:	6122      	str	r2, [r4, #16]
 80072da:	464b      	mov	r3, r9
 80072dc:	4621      	mov	r1, r4
 80072de:	4640      	mov	r0, r8
 80072e0:	f8cd a000 	str.w	sl, [sp]
 80072e4:	aa03      	add	r2, sp, #12
 80072e6:	f7ff fee1 	bl	80070ac <_printf_common>
 80072ea:	3001      	adds	r0, #1
 80072ec:	d14a      	bne.n	8007384 <_printf_i+0x1f4>
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295
 80072f2:	b004      	add	sp, #16
 80072f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	f043 0320 	orr.w	r3, r3, #32
 80072fe:	6023      	str	r3, [r4, #0]
 8007300:	2778      	movs	r7, #120	@ 0x78
 8007302:	4832      	ldr	r0, [pc, #200]	@ (80073cc <_printf_i+0x23c>)
 8007304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	6831      	ldr	r1, [r6, #0]
 800730c:	061f      	lsls	r7, r3, #24
 800730e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007312:	d402      	bmi.n	800731a <_printf_i+0x18a>
 8007314:	065f      	lsls	r7, r3, #25
 8007316:	bf48      	it	mi
 8007318:	b2ad      	uxthmi	r5, r5
 800731a:	6031      	str	r1, [r6, #0]
 800731c:	07d9      	lsls	r1, r3, #31
 800731e:	bf44      	itt	mi
 8007320:	f043 0320 	orrmi.w	r3, r3, #32
 8007324:	6023      	strmi	r3, [r4, #0]
 8007326:	b11d      	cbz	r5, 8007330 <_printf_i+0x1a0>
 8007328:	2310      	movs	r3, #16
 800732a:	e7ab      	b.n	8007284 <_printf_i+0xf4>
 800732c:	4826      	ldr	r0, [pc, #152]	@ (80073c8 <_printf_i+0x238>)
 800732e:	e7e9      	b.n	8007304 <_printf_i+0x174>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	f023 0320 	bic.w	r3, r3, #32
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	e7f6      	b.n	8007328 <_printf_i+0x198>
 800733a:	4616      	mov	r6, r2
 800733c:	e7bd      	b.n	80072ba <_printf_i+0x12a>
 800733e:	6833      	ldr	r3, [r6, #0]
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	1d18      	adds	r0, r3, #4
 8007344:	6961      	ldr	r1, [r4, #20]
 8007346:	6030      	str	r0, [r6, #0]
 8007348:	062e      	lsls	r6, r5, #24
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	d501      	bpl.n	8007352 <_printf_i+0x1c2>
 800734e:	6019      	str	r1, [r3, #0]
 8007350:	e002      	b.n	8007358 <_printf_i+0x1c8>
 8007352:	0668      	lsls	r0, r5, #25
 8007354:	d5fb      	bpl.n	800734e <_printf_i+0x1be>
 8007356:	8019      	strh	r1, [r3, #0]
 8007358:	2300      	movs	r3, #0
 800735a:	4616      	mov	r6, r2
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	e7bc      	b.n	80072da <_printf_i+0x14a>
 8007360:	6833      	ldr	r3, [r6, #0]
 8007362:	2100      	movs	r1, #0
 8007364:	1d1a      	adds	r2, r3, #4
 8007366:	6032      	str	r2, [r6, #0]
 8007368:	681e      	ldr	r6, [r3, #0]
 800736a:	6862      	ldr	r2, [r4, #4]
 800736c:	4630      	mov	r0, r6
 800736e:	f000 fbf6 	bl	8007b5e <memchr>
 8007372:	b108      	cbz	r0, 8007378 <_printf_i+0x1e8>
 8007374:	1b80      	subs	r0, r0, r6
 8007376:	6060      	str	r0, [r4, #4]
 8007378:	6863      	ldr	r3, [r4, #4]
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	2300      	movs	r3, #0
 800737e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007382:	e7aa      	b.n	80072da <_printf_i+0x14a>
 8007384:	4632      	mov	r2, r6
 8007386:	4649      	mov	r1, r9
 8007388:	4640      	mov	r0, r8
 800738a:	6923      	ldr	r3, [r4, #16]
 800738c:	47d0      	blx	sl
 800738e:	3001      	adds	r0, #1
 8007390:	d0ad      	beq.n	80072ee <_printf_i+0x15e>
 8007392:	6823      	ldr	r3, [r4, #0]
 8007394:	079b      	lsls	r3, r3, #30
 8007396:	d413      	bmi.n	80073c0 <_printf_i+0x230>
 8007398:	68e0      	ldr	r0, [r4, #12]
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	4298      	cmp	r0, r3
 800739e:	bfb8      	it	lt
 80073a0:	4618      	movlt	r0, r3
 80073a2:	e7a6      	b.n	80072f2 <_printf_i+0x162>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4632      	mov	r2, r6
 80073a8:	4649      	mov	r1, r9
 80073aa:	4640      	mov	r0, r8
 80073ac:	47d0      	blx	sl
 80073ae:	3001      	adds	r0, #1
 80073b0:	d09d      	beq.n	80072ee <_printf_i+0x15e>
 80073b2:	3501      	adds	r5, #1
 80073b4:	68e3      	ldr	r3, [r4, #12]
 80073b6:	9903      	ldr	r1, [sp, #12]
 80073b8:	1a5b      	subs	r3, r3, r1
 80073ba:	42ab      	cmp	r3, r5
 80073bc:	dcf2      	bgt.n	80073a4 <_printf_i+0x214>
 80073be:	e7eb      	b.n	8007398 <_printf_i+0x208>
 80073c0:	2500      	movs	r5, #0
 80073c2:	f104 0619 	add.w	r6, r4, #25
 80073c6:	e7f5      	b.n	80073b4 <_printf_i+0x224>
 80073c8:	0800b43d 	.word	0x0800b43d
 80073cc:	0800b44e 	.word	0x0800b44e

080073d0 <_scanf_float>:
 80073d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	b087      	sub	sp, #28
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	688b      	ldr	r3, [r1, #8]
 80073da:	4617      	mov	r7, r2
 80073dc:	1e5a      	subs	r2, r3, #1
 80073de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80073e2:	bf82      	ittt	hi
 80073e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80073e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80073ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80073f0:	460a      	mov	r2, r1
 80073f2:	f04f 0500 	mov.w	r5, #0
 80073f6:	bf88      	it	hi
 80073f8:	608b      	strhi	r3, [r1, #8]
 80073fa:	680b      	ldr	r3, [r1, #0]
 80073fc:	4680      	mov	r8, r0
 80073fe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007402:	f842 3b1c 	str.w	r3, [r2], #28
 8007406:	460c      	mov	r4, r1
 8007408:	bf98      	it	ls
 800740a:	f04f 0b00 	movls.w	fp, #0
 800740e:	4616      	mov	r6, r2
 8007410:	46aa      	mov	sl, r5
 8007412:	46a9      	mov	r9, r5
 8007414:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007418:	9201      	str	r2, [sp, #4]
 800741a:	9502      	str	r5, [sp, #8]
 800741c:	68a2      	ldr	r2, [r4, #8]
 800741e:	b152      	cbz	r2, 8007436 <_scanf_float+0x66>
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b4e      	cmp	r3, #78	@ 0x4e
 8007426:	d865      	bhi.n	80074f4 <_scanf_float+0x124>
 8007428:	2b40      	cmp	r3, #64	@ 0x40
 800742a:	d83d      	bhi.n	80074a8 <_scanf_float+0xd8>
 800742c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007430:	b2c8      	uxtb	r0, r1
 8007432:	280e      	cmp	r0, #14
 8007434:	d93b      	bls.n	80074ae <_scanf_float+0xde>
 8007436:	f1b9 0f00 	cmp.w	r9, #0
 800743a:	d003      	beq.n	8007444 <_scanf_float+0x74>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007448:	f1ba 0f01 	cmp.w	sl, #1
 800744c:	f200 8118 	bhi.w	8007680 <_scanf_float+0x2b0>
 8007450:	9b01      	ldr	r3, [sp, #4]
 8007452:	429e      	cmp	r6, r3
 8007454:	f200 8109 	bhi.w	800766a <_scanf_float+0x29a>
 8007458:	2001      	movs	r0, #1
 800745a:	b007      	add	sp, #28
 800745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007460:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007464:	2a0d      	cmp	r2, #13
 8007466:	d8e6      	bhi.n	8007436 <_scanf_float+0x66>
 8007468:	a101      	add	r1, pc, #4	@ (adr r1, 8007470 <_scanf_float+0xa0>)
 800746a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800746e:	bf00      	nop
 8007470:	080075b7 	.word	0x080075b7
 8007474:	08007437 	.word	0x08007437
 8007478:	08007437 	.word	0x08007437
 800747c:	08007437 	.word	0x08007437
 8007480:	08007617 	.word	0x08007617
 8007484:	080075ef 	.word	0x080075ef
 8007488:	08007437 	.word	0x08007437
 800748c:	08007437 	.word	0x08007437
 8007490:	080075c5 	.word	0x080075c5
 8007494:	08007437 	.word	0x08007437
 8007498:	08007437 	.word	0x08007437
 800749c:	08007437 	.word	0x08007437
 80074a0:	08007437 	.word	0x08007437
 80074a4:	0800757d 	.word	0x0800757d
 80074a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80074ac:	e7da      	b.n	8007464 <_scanf_float+0x94>
 80074ae:	290e      	cmp	r1, #14
 80074b0:	d8c1      	bhi.n	8007436 <_scanf_float+0x66>
 80074b2:	a001      	add	r0, pc, #4	@ (adr r0, 80074b8 <_scanf_float+0xe8>)
 80074b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80074b8:	0800756d 	.word	0x0800756d
 80074bc:	08007437 	.word	0x08007437
 80074c0:	0800756d 	.word	0x0800756d
 80074c4:	08007603 	.word	0x08007603
 80074c8:	08007437 	.word	0x08007437
 80074cc:	08007515 	.word	0x08007515
 80074d0:	08007553 	.word	0x08007553
 80074d4:	08007553 	.word	0x08007553
 80074d8:	08007553 	.word	0x08007553
 80074dc:	08007553 	.word	0x08007553
 80074e0:	08007553 	.word	0x08007553
 80074e4:	08007553 	.word	0x08007553
 80074e8:	08007553 	.word	0x08007553
 80074ec:	08007553 	.word	0x08007553
 80074f0:	08007553 	.word	0x08007553
 80074f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80074f6:	d809      	bhi.n	800750c <_scanf_float+0x13c>
 80074f8:	2b60      	cmp	r3, #96	@ 0x60
 80074fa:	d8b1      	bhi.n	8007460 <_scanf_float+0x90>
 80074fc:	2b54      	cmp	r3, #84	@ 0x54
 80074fe:	d07b      	beq.n	80075f8 <_scanf_float+0x228>
 8007500:	2b59      	cmp	r3, #89	@ 0x59
 8007502:	d198      	bne.n	8007436 <_scanf_float+0x66>
 8007504:	2d07      	cmp	r5, #7
 8007506:	d196      	bne.n	8007436 <_scanf_float+0x66>
 8007508:	2508      	movs	r5, #8
 800750a:	e02c      	b.n	8007566 <_scanf_float+0x196>
 800750c:	2b74      	cmp	r3, #116	@ 0x74
 800750e:	d073      	beq.n	80075f8 <_scanf_float+0x228>
 8007510:	2b79      	cmp	r3, #121	@ 0x79
 8007512:	e7f6      	b.n	8007502 <_scanf_float+0x132>
 8007514:	6821      	ldr	r1, [r4, #0]
 8007516:	05c8      	lsls	r0, r1, #23
 8007518:	d51b      	bpl.n	8007552 <_scanf_float+0x182>
 800751a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800751e:	6021      	str	r1, [r4, #0]
 8007520:	f109 0901 	add.w	r9, r9, #1
 8007524:	f1bb 0f00 	cmp.w	fp, #0
 8007528:	d003      	beq.n	8007532 <_scanf_float+0x162>
 800752a:	3201      	adds	r2, #1
 800752c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007530:	60a2      	str	r2, [r4, #8]
 8007532:	68a3      	ldr	r3, [r4, #8]
 8007534:	3b01      	subs	r3, #1
 8007536:	60a3      	str	r3, [r4, #8]
 8007538:	6923      	ldr	r3, [r4, #16]
 800753a:	3301      	adds	r3, #1
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	3b01      	subs	r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	f340 8087 	ble.w	8007658 <_scanf_float+0x288>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	e764      	b.n	800741c <_scanf_float+0x4c>
 8007552:	eb1a 0105 	adds.w	r1, sl, r5
 8007556:	f47f af6e 	bne.w	8007436 <_scanf_float+0x66>
 800755a:	460d      	mov	r5, r1
 800755c:	468a      	mov	sl, r1
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007564:	6022      	str	r2, [r4, #0]
 8007566:	f806 3b01 	strb.w	r3, [r6], #1
 800756a:	e7e2      	b.n	8007532 <_scanf_float+0x162>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	0610      	lsls	r0, r2, #24
 8007570:	f57f af61 	bpl.w	8007436 <_scanf_float+0x66>
 8007574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007578:	6022      	str	r2, [r4, #0]
 800757a:	e7f4      	b.n	8007566 <_scanf_float+0x196>
 800757c:	f1ba 0f00 	cmp.w	sl, #0
 8007580:	d10e      	bne.n	80075a0 <_scanf_float+0x1d0>
 8007582:	f1b9 0f00 	cmp.w	r9, #0
 8007586:	d10e      	bne.n	80075a6 <_scanf_float+0x1d6>
 8007588:	6822      	ldr	r2, [r4, #0]
 800758a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800758e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007592:	d108      	bne.n	80075a6 <_scanf_float+0x1d6>
 8007594:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007598:	f04f 0a01 	mov.w	sl, #1
 800759c:	6022      	str	r2, [r4, #0]
 800759e:	e7e2      	b.n	8007566 <_scanf_float+0x196>
 80075a0:	f1ba 0f02 	cmp.w	sl, #2
 80075a4:	d055      	beq.n	8007652 <_scanf_float+0x282>
 80075a6:	2d01      	cmp	r5, #1
 80075a8:	d002      	beq.n	80075b0 <_scanf_float+0x1e0>
 80075aa:	2d04      	cmp	r5, #4
 80075ac:	f47f af43 	bne.w	8007436 <_scanf_float+0x66>
 80075b0:	3501      	adds	r5, #1
 80075b2:	b2ed      	uxtb	r5, r5
 80075b4:	e7d7      	b.n	8007566 <_scanf_float+0x196>
 80075b6:	f1ba 0f01 	cmp.w	sl, #1
 80075ba:	f47f af3c 	bne.w	8007436 <_scanf_float+0x66>
 80075be:	f04f 0a02 	mov.w	sl, #2
 80075c2:	e7d0      	b.n	8007566 <_scanf_float+0x196>
 80075c4:	b97d      	cbnz	r5, 80075e6 <_scanf_float+0x216>
 80075c6:	f1b9 0f00 	cmp.w	r9, #0
 80075ca:	f47f af37 	bne.w	800743c <_scanf_float+0x6c>
 80075ce:	6822      	ldr	r2, [r4, #0]
 80075d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80075d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80075d8:	f040 8103 	bne.w	80077e2 <_scanf_float+0x412>
 80075dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80075e0:	2501      	movs	r5, #1
 80075e2:	6022      	str	r2, [r4, #0]
 80075e4:	e7bf      	b.n	8007566 <_scanf_float+0x196>
 80075e6:	2d03      	cmp	r5, #3
 80075e8:	d0e2      	beq.n	80075b0 <_scanf_float+0x1e0>
 80075ea:	2d05      	cmp	r5, #5
 80075ec:	e7de      	b.n	80075ac <_scanf_float+0x1dc>
 80075ee:	2d02      	cmp	r5, #2
 80075f0:	f47f af21 	bne.w	8007436 <_scanf_float+0x66>
 80075f4:	2503      	movs	r5, #3
 80075f6:	e7b6      	b.n	8007566 <_scanf_float+0x196>
 80075f8:	2d06      	cmp	r5, #6
 80075fa:	f47f af1c 	bne.w	8007436 <_scanf_float+0x66>
 80075fe:	2507      	movs	r5, #7
 8007600:	e7b1      	b.n	8007566 <_scanf_float+0x196>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	0591      	lsls	r1, r2, #22
 8007606:	f57f af16 	bpl.w	8007436 <_scanf_float+0x66>
 800760a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800760e:	6022      	str	r2, [r4, #0]
 8007610:	f8cd 9008 	str.w	r9, [sp, #8]
 8007614:	e7a7      	b.n	8007566 <_scanf_float+0x196>
 8007616:	6822      	ldr	r2, [r4, #0]
 8007618:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800761c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007620:	d006      	beq.n	8007630 <_scanf_float+0x260>
 8007622:	0550      	lsls	r0, r2, #21
 8007624:	f57f af07 	bpl.w	8007436 <_scanf_float+0x66>
 8007628:	f1b9 0f00 	cmp.w	r9, #0
 800762c:	f000 80d9 	beq.w	80077e2 <_scanf_float+0x412>
 8007630:	0591      	lsls	r1, r2, #22
 8007632:	bf58      	it	pl
 8007634:	9902      	ldrpl	r1, [sp, #8]
 8007636:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800763a:	bf58      	it	pl
 800763c:	eba9 0101 	subpl.w	r1, r9, r1
 8007640:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007644:	f04f 0900 	mov.w	r9, #0
 8007648:	bf58      	it	pl
 800764a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800764e:	6022      	str	r2, [r4, #0]
 8007650:	e789      	b.n	8007566 <_scanf_float+0x196>
 8007652:	f04f 0a03 	mov.w	sl, #3
 8007656:	e786      	b.n	8007566 <_scanf_float+0x196>
 8007658:	4639      	mov	r1, r7
 800765a:	4640      	mov	r0, r8
 800765c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007660:	4798      	blx	r3
 8007662:	2800      	cmp	r0, #0
 8007664:	f43f aeda 	beq.w	800741c <_scanf_float+0x4c>
 8007668:	e6e5      	b.n	8007436 <_scanf_float+0x66>
 800766a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800766e:	463a      	mov	r2, r7
 8007670:	4640      	mov	r0, r8
 8007672:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007676:	4798      	blx	r3
 8007678:	6923      	ldr	r3, [r4, #16]
 800767a:	3b01      	subs	r3, #1
 800767c:	6123      	str	r3, [r4, #16]
 800767e:	e6e7      	b.n	8007450 <_scanf_float+0x80>
 8007680:	1e6b      	subs	r3, r5, #1
 8007682:	2b06      	cmp	r3, #6
 8007684:	d824      	bhi.n	80076d0 <_scanf_float+0x300>
 8007686:	2d02      	cmp	r5, #2
 8007688:	d836      	bhi.n	80076f8 <_scanf_float+0x328>
 800768a:	9b01      	ldr	r3, [sp, #4]
 800768c:	429e      	cmp	r6, r3
 800768e:	f67f aee3 	bls.w	8007458 <_scanf_float+0x88>
 8007692:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007696:	463a      	mov	r2, r7
 8007698:	4640      	mov	r0, r8
 800769a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800769e:	4798      	blx	r3
 80076a0:	6923      	ldr	r3, [r4, #16]
 80076a2:	3b01      	subs	r3, #1
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	e7f0      	b.n	800768a <_scanf_float+0x2ba>
 80076a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076ac:	463a      	mov	r2, r7
 80076ae:	4640      	mov	r0, r8
 80076b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80076b4:	4798      	blx	r3
 80076b6:	6923      	ldr	r3, [r4, #16]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	6123      	str	r3, [r4, #16]
 80076bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076c0:	fa5f fa8a 	uxtb.w	sl, sl
 80076c4:	f1ba 0f02 	cmp.w	sl, #2
 80076c8:	d1ee      	bne.n	80076a8 <_scanf_float+0x2d8>
 80076ca:	3d03      	subs	r5, #3
 80076cc:	b2ed      	uxtb	r5, r5
 80076ce:	1b76      	subs	r6, r6, r5
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	05da      	lsls	r2, r3, #23
 80076d4:	d530      	bpl.n	8007738 <_scanf_float+0x368>
 80076d6:	055b      	lsls	r3, r3, #21
 80076d8:	d511      	bpl.n	80076fe <_scanf_float+0x32e>
 80076da:	9b01      	ldr	r3, [sp, #4]
 80076dc:	429e      	cmp	r6, r3
 80076de:	f67f aebb 	bls.w	8007458 <_scanf_float+0x88>
 80076e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80076e6:	463a      	mov	r2, r7
 80076e8:	4640      	mov	r0, r8
 80076ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80076ee:	4798      	blx	r3
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	3b01      	subs	r3, #1
 80076f4:	6123      	str	r3, [r4, #16]
 80076f6:	e7f0      	b.n	80076da <_scanf_float+0x30a>
 80076f8:	46aa      	mov	sl, r5
 80076fa:	46b3      	mov	fp, r6
 80076fc:	e7de      	b.n	80076bc <_scanf_float+0x2ec>
 80076fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	2965      	cmp	r1, #101	@ 0x65
 8007706:	f103 33ff 	add.w	r3, r3, #4294967295
 800770a:	f106 35ff 	add.w	r5, r6, #4294967295
 800770e:	6123      	str	r3, [r4, #16]
 8007710:	d00c      	beq.n	800772c <_scanf_float+0x35c>
 8007712:	2945      	cmp	r1, #69	@ 0x45
 8007714:	d00a      	beq.n	800772c <_scanf_float+0x35c>
 8007716:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800771a:	463a      	mov	r2, r7
 800771c:	4640      	mov	r0, r8
 800771e:	4798      	blx	r3
 8007720:	6923      	ldr	r3, [r4, #16]
 8007722:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007726:	3b01      	subs	r3, #1
 8007728:	1eb5      	subs	r5, r6, #2
 800772a:	6123      	str	r3, [r4, #16]
 800772c:	463a      	mov	r2, r7
 800772e:	4640      	mov	r0, r8
 8007730:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007734:	4798      	blx	r3
 8007736:	462e      	mov	r6, r5
 8007738:	6822      	ldr	r2, [r4, #0]
 800773a:	f012 0210 	ands.w	r2, r2, #16
 800773e:	d001      	beq.n	8007744 <_scanf_float+0x374>
 8007740:	2000      	movs	r0, #0
 8007742:	e68a      	b.n	800745a <_scanf_float+0x8a>
 8007744:	7032      	strb	r2, [r6, #0]
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800774c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007750:	d11c      	bne.n	800778c <_scanf_float+0x3bc>
 8007752:	9b02      	ldr	r3, [sp, #8]
 8007754:	454b      	cmp	r3, r9
 8007756:	eba3 0209 	sub.w	r2, r3, r9
 800775a:	d123      	bne.n	80077a4 <_scanf_float+0x3d4>
 800775c:	2200      	movs	r2, #0
 800775e:	4640      	mov	r0, r8
 8007760:	9901      	ldr	r1, [sp, #4]
 8007762:	f002 fc01 	bl	8009f68 <_strtod_r>
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	6825      	ldr	r5, [r4, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f015 0f02 	tst.w	r5, #2
 8007770:	4606      	mov	r6, r0
 8007772:	460f      	mov	r7, r1
 8007774:	f103 0204 	add.w	r2, r3, #4
 8007778:	d01f      	beq.n	80077ba <_scanf_float+0x3ea>
 800777a:	9903      	ldr	r1, [sp, #12]
 800777c:	600a      	str	r2, [r1, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	e9c3 6700 	strd	r6, r7, [r3]
 8007784:	68e3      	ldr	r3, [r4, #12]
 8007786:	3301      	adds	r3, #1
 8007788:	60e3      	str	r3, [r4, #12]
 800778a:	e7d9      	b.n	8007740 <_scanf_float+0x370>
 800778c:	9b04      	ldr	r3, [sp, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d0e4      	beq.n	800775c <_scanf_float+0x38c>
 8007792:	9905      	ldr	r1, [sp, #20]
 8007794:	230a      	movs	r3, #10
 8007796:	4640      	mov	r0, r8
 8007798:	3101      	adds	r1, #1
 800779a:	f7ff f9bb 	bl	8006b14 <_strtol_r>
 800779e:	9b04      	ldr	r3, [sp, #16]
 80077a0:	9e05      	ldr	r6, [sp, #20]
 80077a2:	1ac2      	subs	r2, r0, r3
 80077a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80077a8:	429e      	cmp	r6, r3
 80077aa:	bf28      	it	cs
 80077ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80077b0:	4630      	mov	r0, r6
 80077b2:	490d      	ldr	r1, [pc, #52]	@ (80077e8 <_scanf_float+0x418>)
 80077b4:	f000 f8de 	bl	8007974 <siprintf>
 80077b8:	e7d0      	b.n	800775c <_scanf_float+0x38c>
 80077ba:	076d      	lsls	r5, r5, #29
 80077bc:	d4dd      	bmi.n	800777a <_scanf_float+0x3aa>
 80077be:	9d03      	ldr	r5, [sp, #12]
 80077c0:	602a      	str	r2, [r5, #0]
 80077c2:	681d      	ldr	r5, [r3, #0]
 80077c4:	4602      	mov	r2, r0
 80077c6:	460b      	mov	r3, r1
 80077c8:	f7f9 f920 	bl	8000a0c <__aeabi_dcmpun>
 80077cc:	b120      	cbz	r0, 80077d8 <_scanf_float+0x408>
 80077ce:	4807      	ldr	r0, [pc, #28]	@ (80077ec <_scanf_float+0x41c>)
 80077d0:	f000 f9d4 	bl	8007b7c <nanf>
 80077d4:	6028      	str	r0, [r5, #0]
 80077d6:	e7d5      	b.n	8007784 <_scanf_float+0x3b4>
 80077d8:	4630      	mov	r0, r6
 80077da:	4639      	mov	r1, r7
 80077dc:	f7f9 f974 	bl	8000ac8 <__aeabi_d2f>
 80077e0:	e7f8      	b.n	80077d4 <_scanf_float+0x404>
 80077e2:	f04f 0900 	mov.w	r9, #0
 80077e6:	e62d      	b.n	8007444 <_scanf_float+0x74>
 80077e8:	0800b45f 	.word	0x0800b45f
 80077ec:	0800b6f4 	.word	0x0800b6f4

080077f0 <std>:
 80077f0:	2300      	movs	r3, #0
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	e9c0 3300 	strd	r3, r3, [r0]
 80077fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077fe:	6083      	str	r3, [r0, #8]
 8007800:	8181      	strh	r1, [r0, #12]
 8007802:	6643      	str	r3, [r0, #100]	@ 0x64
 8007804:	81c2      	strh	r2, [r0, #14]
 8007806:	6183      	str	r3, [r0, #24]
 8007808:	4619      	mov	r1, r3
 800780a:	2208      	movs	r2, #8
 800780c:	305c      	adds	r0, #92	@ 0x5c
 800780e:	f000 f914 	bl	8007a3a <memset>
 8007812:	4b0d      	ldr	r3, [pc, #52]	@ (8007848 <std+0x58>)
 8007814:	6224      	str	r4, [r4, #32]
 8007816:	6263      	str	r3, [r4, #36]	@ 0x24
 8007818:	4b0c      	ldr	r3, [pc, #48]	@ (800784c <std+0x5c>)
 800781a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800781c:	4b0c      	ldr	r3, [pc, #48]	@ (8007850 <std+0x60>)
 800781e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007820:	4b0c      	ldr	r3, [pc, #48]	@ (8007854 <std+0x64>)
 8007822:	6323      	str	r3, [r4, #48]	@ 0x30
 8007824:	4b0c      	ldr	r3, [pc, #48]	@ (8007858 <std+0x68>)
 8007826:	429c      	cmp	r4, r3
 8007828:	d006      	beq.n	8007838 <std+0x48>
 800782a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800782e:	4294      	cmp	r4, r2
 8007830:	d002      	beq.n	8007838 <std+0x48>
 8007832:	33d0      	adds	r3, #208	@ 0xd0
 8007834:	429c      	cmp	r4, r3
 8007836:	d105      	bne.n	8007844 <std+0x54>
 8007838:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007840:	f000 b98a 	b.w	8007b58 <__retarget_lock_init_recursive>
 8007844:	bd10      	pop	{r4, pc}
 8007846:	bf00      	nop
 8007848:	080079b5 	.word	0x080079b5
 800784c:	080079d7 	.word	0x080079d7
 8007850:	08007a0f 	.word	0x08007a0f
 8007854:	08007a33 	.word	0x08007a33
 8007858:	200008ec 	.word	0x200008ec

0800785c <stdio_exit_handler>:
 800785c:	4a02      	ldr	r2, [pc, #8]	@ (8007868 <stdio_exit_handler+0xc>)
 800785e:	4903      	ldr	r1, [pc, #12]	@ (800786c <stdio_exit_handler+0x10>)
 8007860:	4803      	ldr	r0, [pc, #12]	@ (8007870 <stdio_exit_handler+0x14>)
 8007862:	f000 b869 	b.w	8007938 <_fwalk_sglue>
 8007866:	bf00      	nop
 8007868:	2000003c 	.word	0x2000003c
 800786c:	0800a325 	.word	0x0800a325
 8007870:	2000004c 	.word	0x2000004c

08007874 <cleanup_stdio>:
 8007874:	6841      	ldr	r1, [r0, #4]
 8007876:	4b0c      	ldr	r3, [pc, #48]	@ (80078a8 <cleanup_stdio+0x34>)
 8007878:	b510      	push	{r4, lr}
 800787a:	4299      	cmp	r1, r3
 800787c:	4604      	mov	r4, r0
 800787e:	d001      	beq.n	8007884 <cleanup_stdio+0x10>
 8007880:	f002 fd50 	bl	800a324 <_fflush_r>
 8007884:	68a1      	ldr	r1, [r4, #8]
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <cleanup_stdio+0x38>)
 8007888:	4299      	cmp	r1, r3
 800788a:	d002      	beq.n	8007892 <cleanup_stdio+0x1e>
 800788c:	4620      	mov	r0, r4
 800788e:	f002 fd49 	bl	800a324 <_fflush_r>
 8007892:	68e1      	ldr	r1, [r4, #12]
 8007894:	4b06      	ldr	r3, [pc, #24]	@ (80078b0 <cleanup_stdio+0x3c>)
 8007896:	4299      	cmp	r1, r3
 8007898:	d004      	beq.n	80078a4 <cleanup_stdio+0x30>
 800789a:	4620      	mov	r0, r4
 800789c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a0:	f002 bd40 	b.w	800a324 <_fflush_r>
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	200008ec 	.word	0x200008ec
 80078ac:	20000954 	.word	0x20000954
 80078b0:	200009bc 	.word	0x200009bc

080078b4 <global_stdio_init.part.0>:
 80078b4:	b510      	push	{r4, lr}
 80078b6:	4b0b      	ldr	r3, [pc, #44]	@ (80078e4 <global_stdio_init.part.0+0x30>)
 80078b8:	4c0b      	ldr	r4, [pc, #44]	@ (80078e8 <global_stdio_init.part.0+0x34>)
 80078ba:	4a0c      	ldr	r2, [pc, #48]	@ (80078ec <global_stdio_init.part.0+0x38>)
 80078bc:	4620      	mov	r0, r4
 80078be:	601a      	str	r2, [r3, #0]
 80078c0:	2104      	movs	r1, #4
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7ff ff94 	bl	80077f0 <std>
 80078c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078cc:	2201      	movs	r2, #1
 80078ce:	2109      	movs	r1, #9
 80078d0:	f7ff ff8e 	bl	80077f0 <std>
 80078d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80078d8:	2202      	movs	r2, #2
 80078da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078de:	2112      	movs	r1, #18
 80078e0:	f7ff bf86 	b.w	80077f0 <std>
 80078e4:	20000a24 	.word	0x20000a24
 80078e8:	200008ec 	.word	0x200008ec
 80078ec:	0800785d 	.word	0x0800785d

080078f0 <__sfp_lock_acquire>:
 80078f0:	4801      	ldr	r0, [pc, #4]	@ (80078f8 <__sfp_lock_acquire+0x8>)
 80078f2:	f000 b932 	b.w	8007b5a <__retarget_lock_acquire_recursive>
 80078f6:	bf00      	nop
 80078f8:	20000a2d 	.word	0x20000a2d

080078fc <__sfp_lock_release>:
 80078fc:	4801      	ldr	r0, [pc, #4]	@ (8007904 <__sfp_lock_release+0x8>)
 80078fe:	f000 b92d 	b.w	8007b5c <__retarget_lock_release_recursive>
 8007902:	bf00      	nop
 8007904:	20000a2d 	.word	0x20000a2d

08007908 <__sinit>:
 8007908:	b510      	push	{r4, lr}
 800790a:	4604      	mov	r4, r0
 800790c:	f7ff fff0 	bl	80078f0 <__sfp_lock_acquire>
 8007910:	6a23      	ldr	r3, [r4, #32]
 8007912:	b11b      	cbz	r3, 800791c <__sinit+0x14>
 8007914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007918:	f7ff bff0 	b.w	80078fc <__sfp_lock_release>
 800791c:	4b04      	ldr	r3, [pc, #16]	@ (8007930 <__sinit+0x28>)
 800791e:	6223      	str	r3, [r4, #32]
 8007920:	4b04      	ldr	r3, [pc, #16]	@ (8007934 <__sinit+0x2c>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d1f5      	bne.n	8007914 <__sinit+0xc>
 8007928:	f7ff ffc4 	bl	80078b4 <global_stdio_init.part.0>
 800792c:	e7f2      	b.n	8007914 <__sinit+0xc>
 800792e:	bf00      	nop
 8007930:	08007875 	.word	0x08007875
 8007934:	20000a24 	.word	0x20000a24

08007938 <_fwalk_sglue>:
 8007938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800793c:	4607      	mov	r7, r0
 800793e:	4688      	mov	r8, r1
 8007940:	4614      	mov	r4, r2
 8007942:	2600      	movs	r6, #0
 8007944:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007948:	f1b9 0901 	subs.w	r9, r9, #1
 800794c:	d505      	bpl.n	800795a <_fwalk_sglue+0x22>
 800794e:	6824      	ldr	r4, [r4, #0]
 8007950:	2c00      	cmp	r4, #0
 8007952:	d1f7      	bne.n	8007944 <_fwalk_sglue+0xc>
 8007954:	4630      	mov	r0, r6
 8007956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800795a:	89ab      	ldrh	r3, [r5, #12]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d907      	bls.n	8007970 <_fwalk_sglue+0x38>
 8007960:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007964:	3301      	adds	r3, #1
 8007966:	d003      	beq.n	8007970 <_fwalk_sglue+0x38>
 8007968:	4629      	mov	r1, r5
 800796a:	4638      	mov	r0, r7
 800796c:	47c0      	blx	r8
 800796e:	4306      	orrs	r6, r0
 8007970:	3568      	adds	r5, #104	@ 0x68
 8007972:	e7e9      	b.n	8007948 <_fwalk_sglue+0x10>

08007974 <siprintf>:
 8007974:	b40e      	push	{r1, r2, r3}
 8007976:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800797a:	b500      	push	{lr}
 800797c:	b09c      	sub	sp, #112	@ 0x70
 800797e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007980:	9002      	str	r0, [sp, #8]
 8007982:	9006      	str	r0, [sp, #24]
 8007984:	9107      	str	r1, [sp, #28]
 8007986:	9104      	str	r1, [sp, #16]
 8007988:	4808      	ldr	r0, [pc, #32]	@ (80079ac <siprintf+0x38>)
 800798a:	4909      	ldr	r1, [pc, #36]	@ (80079b0 <siprintf+0x3c>)
 800798c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007990:	9105      	str	r1, [sp, #20]
 8007992:	6800      	ldr	r0, [r0, #0]
 8007994:	a902      	add	r1, sp, #8
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	f002 fb48 	bl	800a02c <_svfiprintf_r>
 800799c:	2200      	movs	r2, #0
 800799e:	9b02      	ldr	r3, [sp, #8]
 80079a0:	701a      	strb	r2, [r3, #0]
 80079a2:	b01c      	add	sp, #112	@ 0x70
 80079a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079a8:	b003      	add	sp, #12
 80079aa:	4770      	bx	lr
 80079ac:	20000048 	.word	0x20000048
 80079b0:	ffff0208 	.word	0xffff0208

080079b4 <__sread>:
 80079b4:	b510      	push	{r4, lr}
 80079b6:	460c      	mov	r4, r1
 80079b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079bc:	f000 f87e 	bl	8007abc <_read_r>
 80079c0:	2800      	cmp	r0, #0
 80079c2:	bfab      	itete	ge
 80079c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80079c6:	89a3      	ldrhlt	r3, [r4, #12]
 80079c8:	181b      	addge	r3, r3, r0
 80079ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80079ce:	bfac      	ite	ge
 80079d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80079d2:	81a3      	strhlt	r3, [r4, #12]
 80079d4:	bd10      	pop	{r4, pc}

080079d6 <__swrite>:
 80079d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079da:	461f      	mov	r7, r3
 80079dc:	898b      	ldrh	r3, [r1, #12]
 80079de:	4605      	mov	r5, r0
 80079e0:	05db      	lsls	r3, r3, #23
 80079e2:	460c      	mov	r4, r1
 80079e4:	4616      	mov	r6, r2
 80079e6:	d505      	bpl.n	80079f4 <__swrite+0x1e>
 80079e8:	2302      	movs	r3, #2
 80079ea:	2200      	movs	r2, #0
 80079ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f0:	f000 f852 	bl	8007a98 <_lseek_r>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	4632      	mov	r2, r6
 80079f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	4628      	mov	r0, r5
 8007a00:	463b      	mov	r3, r7
 8007a02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0a:	f000 b869 	b.w	8007ae0 <_write_r>

08007a0e <__sseek>:
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	460c      	mov	r4, r1
 8007a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a16:	f000 f83f 	bl	8007a98 <_lseek_r>
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	89a3      	ldrh	r3, [r4, #12]
 8007a1e:	bf15      	itete	ne
 8007a20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a2a:	81a3      	strheq	r3, [r4, #12]
 8007a2c:	bf18      	it	ne
 8007a2e:	81a3      	strhne	r3, [r4, #12]
 8007a30:	bd10      	pop	{r4, pc}

08007a32 <__sclose>:
 8007a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a36:	f000 b81f 	b.w	8007a78 <_close_r>

08007a3a <memset>:
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	4402      	add	r2, r0
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d100      	bne.n	8007a44 <memset+0xa>
 8007a42:	4770      	bx	lr
 8007a44:	f803 1b01 	strb.w	r1, [r3], #1
 8007a48:	e7f9      	b.n	8007a3e <memset+0x4>

08007a4a <strncmp>:
 8007a4a:	b510      	push	{r4, lr}
 8007a4c:	b16a      	cbz	r2, 8007a6a <strncmp+0x20>
 8007a4e:	3901      	subs	r1, #1
 8007a50:	1884      	adds	r4, r0, r2
 8007a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a56:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d103      	bne.n	8007a66 <strncmp+0x1c>
 8007a5e:	42a0      	cmp	r0, r4
 8007a60:	d001      	beq.n	8007a66 <strncmp+0x1c>
 8007a62:	2a00      	cmp	r2, #0
 8007a64:	d1f5      	bne.n	8007a52 <strncmp+0x8>
 8007a66:	1ad0      	subs	r0, r2, r3
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	e7fc      	b.n	8007a68 <strncmp+0x1e>
	...

08007a70 <_localeconv_r>:
 8007a70:	4800      	ldr	r0, [pc, #0]	@ (8007a74 <_localeconv_r+0x4>)
 8007a72:	4770      	bx	lr
 8007a74:	20000188 	.word	0x20000188

08007a78 <_close_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4d05      	ldr	r5, [pc, #20]	@ (8007a94 <_close_r+0x1c>)
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	602b      	str	r3, [r5, #0]
 8007a84:	f7fa fda7 	bl	80025d6 <_close>
 8007a88:	1c43      	adds	r3, r0, #1
 8007a8a:	d102      	bne.n	8007a92 <_close_r+0x1a>
 8007a8c:	682b      	ldr	r3, [r5, #0]
 8007a8e:	b103      	cbz	r3, 8007a92 <_close_r+0x1a>
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	bd38      	pop	{r3, r4, r5, pc}
 8007a94:	20000a28 	.word	0x20000a28

08007a98 <_lseek_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4604      	mov	r4, r0
 8007a9c:	4608      	mov	r0, r1
 8007a9e:	4611      	mov	r1, r2
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	4d05      	ldr	r5, [pc, #20]	@ (8007ab8 <_lseek_r+0x20>)
 8007aa4:	602a      	str	r2, [r5, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f7fa fdb9 	bl	800261e <_lseek>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_lseek_r+0x1e>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_lseek_r+0x1e>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20000a28 	.word	0x20000a28

08007abc <_read_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4604      	mov	r4, r0
 8007ac0:	4608      	mov	r0, r1
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4d05      	ldr	r5, [pc, #20]	@ (8007adc <_read_r+0x20>)
 8007ac8:	602a      	str	r2, [r5, #0]
 8007aca:	461a      	mov	r2, r3
 8007acc:	f7fa fd4a 	bl	8002564 <_read>
 8007ad0:	1c43      	adds	r3, r0, #1
 8007ad2:	d102      	bne.n	8007ada <_read_r+0x1e>
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	b103      	cbz	r3, 8007ada <_read_r+0x1e>
 8007ad8:	6023      	str	r3, [r4, #0]
 8007ada:	bd38      	pop	{r3, r4, r5, pc}
 8007adc:	20000a28 	.word	0x20000a28

08007ae0 <_write_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	4608      	mov	r0, r1
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	2200      	movs	r2, #0
 8007aea:	4d05      	ldr	r5, [pc, #20]	@ (8007b00 <_write_r+0x20>)
 8007aec:	602a      	str	r2, [r5, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	f7fa fd55 	bl	800259e <_write>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_write_r+0x1e>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_write_r+0x1e>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	20000a28 	.word	0x20000a28

08007b04 <__errno>:
 8007b04:	4b01      	ldr	r3, [pc, #4]	@ (8007b0c <__errno+0x8>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20000048 	.word	0x20000048

08007b10 <__libc_init_array>:
 8007b10:	b570      	push	{r4, r5, r6, lr}
 8007b12:	2600      	movs	r6, #0
 8007b14:	4d0c      	ldr	r5, [pc, #48]	@ (8007b48 <__libc_init_array+0x38>)
 8007b16:	4c0d      	ldr	r4, [pc, #52]	@ (8007b4c <__libc_init_array+0x3c>)
 8007b18:	1b64      	subs	r4, r4, r5
 8007b1a:	10a4      	asrs	r4, r4, #2
 8007b1c:	42a6      	cmp	r6, r4
 8007b1e:	d109      	bne.n	8007b34 <__libc_init_array+0x24>
 8007b20:	f003 fbd4 	bl	800b2cc <_init>
 8007b24:	2600      	movs	r6, #0
 8007b26:	4d0a      	ldr	r5, [pc, #40]	@ (8007b50 <__libc_init_array+0x40>)
 8007b28:	4c0a      	ldr	r4, [pc, #40]	@ (8007b54 <__libc_init_array+0x44>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	42a6      	cmp	r6, r4
 8007b30:	d105      	bne.n	8007b3e <__libc_init_array+0x2e>
 8007b32:	bd70      	pop	{r4, r5, r6, pc}
 8007b34:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b38:	4798      	blx	r3
 8007b3a:	3601      	adds	r6, #1
 8007b3c:	e7ee      	b.n	8007b1c <__libc_init_array+0xc>
 8007b3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b42:	4798      	blx	r3
 8007b44:	3601      	adds	r6, #1
 8007b46:	e7f2      	b.n	8007b2e <__libc_init_array+0x1e>
 8007b48:	0800b760 	.word	0x0800b760
 8007b4c:	0800b760 	.word	0x0800b760
 8007b50:	0800b760 	.word	0x0800b760
 8007b54:	0800b764 	.word	0x0800b764

08007b58 <__retarget_lock_init_recursive>:
 8007b58:	4770      	bx	lr

08007b5a <__retarget_lock_acquire_recursive>:
 8007b5a:	4770      	bx	lr

08007b5c <__retarget_lock_release_recursive>:
 8007b5c:	4770      	bx	lr

08007b5e <memchr>:
 8007b5e:	4603      	mov	r3, r0
 8007b60:	b510      	push	{r4, lr}
 8007b62:	b2c9      	uxtb	r1, r1
 8007b64:	4402      	add	r2, r0
 8007b66:	4293      	cmp	r3, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	d101      	bne.n	8007b70 <memchr+0x12>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e003      	b.n	8007b78 <memchr+0x1a>
 8007b70:	7804      	ldrb	r4, [r0, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	428c      	cmp	r4, r1
 8007b76:	d1f6      	bne.n	8007b66 <memchr+0x8>
 8007b78:	bd10      	pop	{r4, pc}
	...

08007b7c <nanf>:
 8007b7c:	4800      	ldr	r0, [pc, #0]	@ (8007b80 <nanf+0x4>)
 8007b7e:	4770      	bx	lr
 8007b80:	7fc00000 	.word	0x7fc00000

08007b84 <quorem>:
 8007b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	6903      	ldr	r3, [r0, #16]
 8007b8a:	690c      	ldr	r4, [r1, #16]
 8007b8c:	4607      	mov	r7, r0
 8007b8e:	42a3      	cmp	r3, r4
 8007b90:	db7e      	blt.n	8007c90 <quorem+0x10c>
 8007b92:	3c01      	subs	r4, #1
 8007b94:	00a3      	lsls	r3, r4, #2
 8007b96:	f100 0514 	add.w	r5, r0, #20
 8007b9a:	f101 0814 	add.w	r8, r1, #20
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ba4:	9301      	str	r3, [sp, #4]
 8007ba6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007baa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bba:	d32e      	bcc.n	8007c1a <quorem+0x96>
 8007bbc:	f04f 0a00 	mov.w	sl, #0
 8007bc0:	46c4      	mov	ip, r8
 8007bc2:	46ae      	mov	lr, r5
 8007bc4:	46d3      	mov	fp, sl
 8007bc6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007bca:	b298      	uxth	r0, r3
 8007bcc:	fb06 a000 	mla	r0, r6, r0, sl
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	0c02      	lsrs	r2, r0, #16
 8007bd4:	fb06 2303 	mla	r3, r6, r3, r2
 8007bd8:	f8de 2000 	ldr.w	r2, [lr]
 8007bdc:	b280      	uxth	r0, r0
 8007bde:	b292      	uxth	r2, r2
 8007be0:	1a12      	subs	r2, r2, r0
 8007be2:	445a      	add	r2, fp
 8007be4:	f8de 0000 	ldr.w	r0, [lr]
 8007be8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007bf2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007bf6:	b292      	uxth	r2, r2
 8007bf8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007bfc:	45e1      	cmp	r9, ip
 8007bfe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c02:	f84e 2b04 	str.w	r2, [lr], #4
 8007c06:	d2de      	bcs.n	8007bc6 <quorem+0x42>
 8007c08:	9b00      	ldr	r3, [sp, #0]
 8007c0a:	58eb      	ldr	r3, [r5, r3]
 8007c0c:	b92b      	cbnz	r3, 8007c1a <quorem+0x96>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	3b04      	subs	r3, #4
 8007c12:	429d      	cmp	r5, r3
 8007c14:	461a      	mov	r2, r3
 8007c16:	d32f      	bcc.n	8007c78 <quorem+0xf4>
 8007c18:	613c      	str	r4, [r7, #16]
 8007c1a:	4638      	mov	r0, r7
 8007c1c:	f001 f9c4 	bl	8008fa8 <__mcmp>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	db25      	blt.n	8007c70 <quorem+0xec>
 8007c24:	4629      	mov	r1, r5
 8007c26:	2000      	movs	r0, #0
 8007c28:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c2c:	f8d1 c000 	ldr.w	ip, [r1]
 8007c30:	fa1f fe82 	uxth.w	lr, r2
 8007c34:	fa1f f38c 	uxth.w	r3, ip
 8007c38:	eba3 030e 	sub.w	r3, r3, lr
 8007c3c:	4403      	add	r3, r0
 8007c3e:	0c12      	lsrs	r2, r2, #16
 8007c40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c4e:	45c1      	cmp	r9, r8
 8007c50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007c54:	f841 3b04 	str.w	r3, [r1], #4
 8007c58:	d2e6      	bcs.n	8007c28 <quorem+0xa4>
 8007c5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c62:	b922      	cbnz	r2, 8007c6e <quorem+0xea>
 8007c64:	3b04      	subs	r3, #4
 8007c66:	429d      	cmp	r5, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	d30b      	bcc.n	8007c84 <quorem+0x100>
 8007c6c:	613c      	str	r4, [r7, #16]
 8007c6e:	3601      	adds	r6, #1
 8007c70:	4630      	mov	r0, r6
 8007c72:	b003      	add	sp, #12
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	6812      	ldr	r2, [r2, #0]
 8007c7a:	3b04      	subs	r3, #4
 8007c7c:	2a00      	cmp	r2, #0
 8007c7e:	d1cb      	bne.n	8007c18 <quorem+0x94>
 8007c80:	3c01      	subs	r4, #1
 8007c82:	e7c6      	b.n	8007c12 <quorem+0x8e>
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	3b04      	subs	r3, #4
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	d1ef      	bne.n	8007c6c <quorem+0xe8>
 8007c8c:	3c01      	subs	r4, #1
 8007c8e:	e7ea      	b.n	8007c66 <quorem+0xe2>
 8007c90:	2000      	movs	r0, #0
 8007c92:	e7ee      	b.n	8007c72 <quorem+0xee>
 8007c94:	0000      	movs	r0, r0
	...

08007c98 <_dtoa_r>:
 8007c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c9c:	4614      	mov	r4, r2
 8007c9e:	461d      	mov	r5, r3
 8007ca0:	69c7      	ldr	r7, [r0, #28]
 8007ca2:	b097      	sub	sp, #92	@ 0x5c
 8007ca4:	4683      	mov	fp, r0
 8007ca6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007caa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007cac:	b97f      	cbnz	r7, 8007cce <_dtoa_r+0x36>
 8007cae:	2010      	movs	r0, #16
 8007cb0:	f000 fe02 	bl	80088b8 <malloc>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	f8cb 001c 	str.w	r0, [fp, #28]
 8007cba:	b920      	cbnz	r0, 8007cc6 <_dtoa_r+0x2e>
 8007cbc:	21ef      	movs	r1, #239	@ 0xef
 8007cbe:	4ba8      	ldr	r3, [pc, #672]	@ (8007f60 <_dtoa_r+0x2c8>)
 8007cc0:	48a8      	ldr	r0, [pc, #672]	@ (8007f64 <_dtoa_r+0x2cc>)
 8007cc2:	f002 fb95 	bl	800a3f0 <__assert_func>
 8007cc6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007cca:	6007      	str	r7, [r0, #0]
 8007ccc:	60c7      	str	r7, [r0, #12]
 8007cce:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cd2:	6819      	ldr	r1, [r3, #0]
 8007cd4:	b159      	cbz	r1, 8007cee <_dtoa_r+0x56>
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4093      	lsls	r3, r2
 8007cdc:	604a      	str	r2, [r1, #4]
 8007cde:	608b      	str	r3, [r1, #8]
 8007ce0:	4658      	mov	r0, fp
 8007ce2:	f000 fedf 	bl	8008aa4 <_Bfree>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	1e2b      	subs	r3, r5, #0
 8007cf0:	bfaf      	iteee	ge
 8007cf2:	2300      	movge	r3, #0
 8007cf4:	2201      	movlt	r2, #1
 8007cf6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007cfa:	9303      	strlt	r3, [sp, #12]
 8007cfc:	bfa8      	it	ge
 8007cfe:	6033      	strge	r3, [r6, #0]
 8007d00:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007d04:	4b98      	ldr	r3, [pc, #608]	@ (8007f68 <_dtoa_r+0x2d0>)
 8007d06:	bfb8      	it	lt
 8007d08:	6032      	strlt	r2, [r6, #0]
 8007d0a:	ea33 0308 	bics.w	r3, r3, r8
 8007d0e:	d112      	bne.n	8007d36 <_dtoa_r+0x9e>
 8007d10:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d16:	6013      	str	r3, [r2, #0]
 8007d18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007d1c:	4323      	orrs	r3, r4
 8007d1e:	f000 8550 	beq.w	80087c2 <_dtoa_r+0xb2a>
 8007d22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d24:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007f6c <_dtoa_r+0x2d4>
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 8552 	beq.w	80087d2 <_dtoa_r+0xb3a>
 8007d2e:	f10a 0303 	add.w	r3, sl, #3
 8007d32:	f000 bd4c 	b.w	80087ce <_dtoa_r+0xb36>
 8007d36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d42:	2200      	movs	r2, #0
 8007d44:	2300      	movs	r3, #0
 8007d46:	f7f8 fe2f 	bl	80009a8 <__aeabi_dcmpeq>
 8007d4a:	4607      	mov	r7, r0
 8007d4c:	b158      	cbz	r0, 8007d66 <_dtoa_r+0xce>
 8007d4e:	2301      	movs	r3, #1
 8007d50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007d56:	b113      	cbz	r3, 8007d5e <_dtoa_r+0xc6>
 8007d58:	4b85      	ldr	r3, [pc, #532]	@ (8007f70 <_dtoa_r+0x2d8>)
 8007d5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007d5c:	6013      	str	r3, [r2, #0]
 8007d5e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007f74 <_dtoa_r+0x2dc>
 8007d62:	f000 bd36 	b.w	80087d2 <_dtoa_r+0xb3a>
 8007d66:	ab14      	add	r3, sp, #80	@ 0x50
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	ab15      	add	r3, sp, #84	@ 0x54
 8007d6c:	9300      	str	r3, [sp, #0]
 8007d6e:	4658      	mov	r0, fp
 8007d70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007d74:	f001 fa30 	bl	80091d8 <__d2b>
 8007d78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007d7c:	4681      	mov	r9, r0
 8007d7e:	2e00      	cmp	r6, #0
 8007d80:	d077      	beq.n	8007e72 <_dtoa_r+0x1da>
 8007d82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007d94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007d98:	9712      	str	r7, [sp, #72]	@ 0x48
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	4b76      	ldr	r3, [pc, #472]	@ (8007f78 <_dtoa_r+0x2e0>)
 8007da0:	f7f8 f9e2 	bl	8000168 <__aeabi_dsub>
 8007da4:	a368      	add	r3, pc, #416	@ (adr r3, 8007f48 <_dtoa_r+0x2b0>)
 8007da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007daa:	f7f8 fb95 	bl	80004d8 <__aeabi_dmul>
 8007dae:	a368      	add	r3, pc, #416	@ (adr r3, 8007f50 <_dtoa_r+0x2b8>)
 8007db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db4:	f7f8 f9da 	bl	800016c <__adddf3>
 8007db8:	4604      	mov	r4, r0
 8007dba:	4630      	mov	r0, r6
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	f7f8 fb21 	bl	8000404 <__aeabi_i2d>
 8007dc2:	a365      	add	r3, pc, #404	@ (adr r3, 8007f58 <_dtoa_r+0x2c0>)
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f7f8 fb86 	bl	80004d8 <__aeabi_dmul>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	f7f8 f9ca 	bl	800016c <__adddf3>
 8007dd8:	4604      	mov	r4, r0
 8007dda:	460d      	mov	r5, r1
 8007ddc:	f7f8 fe2c 	bl	8000a38 <__aeabi_d2iz>
 8007de0:	2200      	movs	r2, #0
 8007de2:	4607      	mov	r7, r0
 8007de4:	2300      	movs	r3, #0
 8007de6:	4620      	mov	r0, r4
 8007de8:	4629      	mov	r1, r5
 8007dea:	f7f8 fde7 	bl	80009bc <__aeabi_dcmplt>
 8007dee:	b140      	cbz	r0, 8007e02 <_dtoa_r+0x16a>
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7f8 fb07 	bl	8000404 <__aeabi_i2d>
 8007df6:	4622      	mov	r2, r4
 8007df8:	462b      	mov	r3, r5
 8007dfa:	f7f8 fdd5 	bl	80009a8 <__aeabi_dcmpeq>
 8007dfe:	b900      	cbnz	r0, 8007e02 <_dtoa_r+0x16a>
 8007e00:	3f01      	subs	r7, #1
 8007e02:	2f16      	cmp	r7, #22
 8007e04:	d853      	bhi.n	8007eae <_dtoa_r+0x216>
 8007e06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8007f7c <_dtoa_r+0x2e4>)
 8007e0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f7f8 fdd2 	bl	80009bc <__aeabi_dcmplt>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d04a      	beq.n	8007eb2 <_dtoa_r+0x21a>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	3f01      	subs	r7, #1
 8007e20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007e24:	1b9b      	subs	r3, r3, r6
 8007e26:	1e5a      	subs	r2, r3, #1
 8007e28:	bf46      	itte	mi
 8007e2a:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e2e:	2300      	movmi	r3, #0
 8007e30:	f04f 0800 	movpl.w	r8, #0
 8007e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e36:	bf48      	it	mi
 8007e38:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007e3a:	2f00      	cmp	r7, #0
 8007e3c:	db3b      	blt.n	8007eb6 <_dtoa_r+0x21e>
 8007e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e40:	970e      	str	r7, [sp, #56]	@ 0x38
 8007e42:	443b      	add	r3, r7
 8007e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e46:	2300      	movs	r3, #0
 8007e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d866      	bhi.n	8007f1e <_dtoa_r+0x286>
 8007e50:	2b05      	cmp	r3, #5
 8007e52:	bfc4      	itt	gt
 8007e54:	3b04      	subgt	r3, #4
 8007e56:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007e58:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e5a:	bfc8      	it	gt
 8007e5c:	2400      	movgt	r4, #0
 8007e5e:	f1a3 0302 	sub.w	r3, r3, #2
 8007e62:	bfd8      	it	le
 8007e64:	2401      	movle	r4, #1
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d864      	bhi.n	8007f34 <_dtoa_r+0x29c>
 8007e6a:	e8df f003 	tbb	[pc, r3]
 8007e6e:	382b      	.short	0x382b
 8007e70:	5636      	.short	0x5636
 8007e72:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007e76:	441e      	add	r6, r3
 8007e78:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	bfc1      	itttt	gt
 8007e80:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007e84:	fa08 f803 	lslgt.w	r8, r8, r3
 8007e88:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007e8c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007e90:	bfd6      	itet	le
 8007e92:	f1c3 0320 	rsble	r3, r3, #32
 8007e96:	ea48 0003 	orrgt.w	r0, r8, r3
 8007e9a:	fa04 f003 	lslle.w	r0, r4, r3
 8007e9e:	f7f8 faa1 	bl	80003e4 <__aeabi_ui2d>
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ea8:	3e01      	subs	r6, #1
 8007eaa:	9212      	str	r2, [sp, #72]	@ 0x48
 8007eac:	e775      	b.n	8007d9a <_dtoa_r+0x102>
 8007eae:	2301      	movs	r3, #1
 8007eb0:	e7b6      	b.n	8007e20 <_dtoa_r+0x188>
 8007eb2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007eb4:	e7b5      	b.n	8007e22 <_dtoa_r+0x18a>
 8007eb6:	427b      	negs	r3, r7
 8007eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eba:	2300      	movs	r3, #0
 8007ebc:	eba8 0807 	sub.w	r8, r8, r7
 8007ec0:	930e      	str	r3, [sp, #56]	@ 0x38
 8007ec2:	e7c2      	b.n	8007e4a <_dtoa_r+0x1b2>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ec8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	dc35      	bgt.n	8007f3a <_dtoa_r+0x2a2>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ed6:	9221      	str	r2, [sp, #132]	@ 0x84
 8007ed8:	e00b      	b.n	8007ef2 <_dtoa_r+0x25a>
 8007eda:	2301      	movs	r3, #1
 8007edc:	e7f3      	b.n	8007ec6 <_dtoa_r+0x22e>
 8007ede:	2300      	movs	r3, #0
 8007ee0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ee2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ee4:	18fb      	adds	r3, r7, r3
 8007ee6:	9308      	str	r3, [sp, #32]
 8007ee8:	3301      	adds	r3, #1
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	9307      	str	r3, [sp, #28]
 8007eee:	bfb8      	it	lt
 8007ef0:	2301      	movlt	r3, #1
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	2204      	movs	r2, #4
 8007ef6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007efa:	f102 0514 	add.w	r5, r2, #20
 8007efe:	429d      	cmp	r5, r3
 8007f00:	d91f      	bls.n	8007f42 <_dtoa_r+0x2aa>
 8007f02:	6041      	str	r1, [r0, #4]
 8007f04:	4658      	mov	r0, fp
 8007f06:	f000 fd8d 	bl	8008a24 <_Balloc>
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d139      	bne.n	8007f84 <_dtoa_r+0x2ec>
 8007f10:	4602      	mov	r2, r0
 8007f12:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f16:	4b1a      	ldr	r3, [pc, #104]	@ (8007f80 <_dtoa_r+0x2e8>)
 8007f18:	e6d2      	b.n	8007cc0 <_dtoa_r+0x28>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e7e0      	b.n	8007ee0 <_dtoa_r+0x248>
 8007f1e:	2401      	movs	r4, #1
 8007f20:	2300      	movs	r3, #0
 8007f22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f24:	9320      	str	r3, [sp, #128]	@ 0x80
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f30:	2312      	movs	r3, #18
 8007f32:	e7d0      	b.n	8007ed6 <_dtoa_r+0x23e>
 8007f34:	2301      	movs	r3, #1
 8007f36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f38:	e7f5      	b.n	8007f26 <_dtoa_r+0x28e>
 8007f3a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007f40:	e7d7      	b.n	8007ef2 <_dtoa_r+0x25a>
 8007f42:	3101      	adds	r1, #1
 8007f44:	0052      	lsls	r2, r2, #1
 8007f46:	e7d8      	b.n	8007efa <_dtoa_r+0x262>
 8007f48:	636f4361 	.word	0x636f4361
 8007f4c:	3fd287a7 	.word	0x3fd287a7
 8007f50:	8b60c8b3 	.word	0x8b60c8b3
 8007f54:	3fc68a28 	.word	0x3fc68a28
 8007f58:	509f79fb 	.word	0x509f79fb
 8007f5c:	3fd34413 	.word	0x3fd34413
 8007f60:	0800b471 	.word	0x0800b471
 8007f64:	0800b488 	.word	0x0800b488
 8007f68:	7ff00000 	.word	0x7ff00000
 8007f6c:	0800b46d 	.word	0x0800b46d
 8007f70:	0800b43c 	.word	0x0800b43c
 8007f74:	0800b43b 	.word	0x0800b43b
 8007f78:	3ff80000 	.word	0x3ff80000
 8007f7c:	0800b580 	.word	0x0800b580
 8007f80:	0800b4e0 	.word	0x0800b4e0
 8007f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f88:	6018      	str	r0, [r3, #0]
 8007f8a:	9b07      	ldr	r3, [sp, #28]
 8007f8c:	2b0e      	cmp	r3, #14
 8007f8e:	f200 80a4 	bhi.w	80080da <_dtoa_r+0x442>
 8007f92:	2c00      	cmp	r4, #0
 8007f94:	f000 80a1 	beq.w	80080da <_dtoa_r+0x442>
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	dd33      	ble.n	8008004 <_dtoa_r+0x36c>
 8007f9c:	4b86      	ldr	r3, [pc, #536]	@ (80081b8 <_dtoa_r+0x520>)
 8007f9e:	f007 020f 	and.w	r2, r7, #15
 8007fa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fa6:	05f8      	lsls	r0, r7, #23
 8007fa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fac:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007fb0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007fb4:	d516      	bpl.n	8007fe4 <_dtoa_r+0x34c>
 8007fb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fba:	4b80      	ldr	r3, [pc, #512]	@ (80081bc <_dtoa_r+0x524>)
 8007fbc:	2603      	movs	r6, #3
 8007fbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fc2:	f7f8 fbb3 	bl	800072c <__aeabi_ddiv>
 8007fc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fca:	f004 040f 	and.w	r4, r4, #15
 8007fce:	4d7b      	ldr	r5, [pc, #492]	@ (80081bc <_dtoa_r+0x524>)
 8007fd0:	b954      	cbnz	r4, 8007fe8 <_dtoa_r+0x350>
 8007fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fda:	f7f8 fba7 	bl	800072c <__aeabi_ddiv>
 8007fde:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fe2:	e028      	b.n	8008036 <_dtoa_r+0x39e>
 8007fe4:	2602      	movs	r6, #2
 8007fe6:	e7f2      	b.n	8007fce <_dtoa_r+0x336>
 8007fe8:	07e1      	lsls	r1, r4, #31
 8007fea:	d508      	bpl.n	8007ffe <_dtoa_r+0x366>
 8007fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ff4:	f7f8 fa70 	bl	80004d8 <__aeabi_dmul>
 8007ff8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ffc:	3601      	adds	r6, #1
 8007ffe:	1064      	asrs	r4, r4, #1
 8008000:	3508      	adds	r5, #8
 8008002:	e7e5      	b.n	8007fd0 <_dtoa_r+0x338>
 8008004:	f000 80d2 	beq.w	80081ac <_dtoa_r+0x514>
 8008008:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800800c:	427c      	negs	r4, r7
 800800e:	4b6a      	ldr	r3, [pc, #424]	@ (80081b8 <_dtoa_r+0x520>)
 8008010:	f004 020f 	and.w	r2, r4, #15
 8008014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f7f8 fa5c 	bl	80004d8 <__aeabi_dmul>
 8008020:	2602      	movs	r6, #2
 8008022:	2300      	movs	r3, #0
 8008024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008028:	4d64      	ldr	r5, [pc, #400]	@ (80081bc <_dtoa_r+0x524>)
 800802a:	1124      	asrs	r4, r4, #4
 800802c:	2c00      	cmp	r4, #0
 800802e:	f040 80b2 	bne.w	8008196 <_dtoa_r+0x4fe>
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1d3      	bne.n	8007fde <_dtoa_r+0x346>
 8008036:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800803a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800803c:	2b00      	cmp	r3, #0
 800803e:	f000 80b7 	beq.w	80081b0 <_dtoa_r+0x518>
 8008042:	2200      	movs	r2, #0
 8008044:	4620      	mov	r0, r4
 8008046:	4629      	mov	r1, r5
 8008048:	4b5d      	ldr	r3, [pc, #372]	@ (80081c0 <_dtoa_r+0x528>)
 800804a:	f7f8 fcb7 	bl	80009bc <__aeabi_dcmplt>
 800804e:	2800      	cmp	r0, #0
 8008050:	f000 80ae 	beq.w	80081b0 <_dtoa_r+0x518>
 8008054:	9b07      	ldr	r3, [sp, #28]
 8008056:	2b00      	cmp	r3, #0
 8008058:	f000 80aa 	beq.w	80081b0 <_dtoa_r+0x518>
 800805c:	9b08      	ldr	r3, [sp, #32]
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd37      	ble.n	80080d2 <_dtoa_r+0x43a>
 8008062:	1e7b      	subs	r3, r7, #1
 8008064:	4620      	mov	r0, r4
 8008066:	9304      	str	r3, [sp, #16]
 8008068:	2200      	movs	r2, #0
 800806a:	4629      	mov	r1, r5
 800806c:	4b55      	ldr	r3, [pc, #340]	@ (80081c4 <_dtoa_r+0x52c>)
 800806e:	f7f8 fa33 	bl	80004d8 <__aeabi_dmul>
 8008072:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008076:	9c08      	ldr	r4, [sp, #32]
 8008078:	3601      	adds	r6, #1
 800807a:	4630      	mov	r0, r6
 800807c:	f7f8 f9c2 	bl	8000404 <__aeabi_i2d>
 8008080:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008084:	f7f8 fa28 	bl	80004d8 <__aeabi_dmul>
 8008088:	2200      	movs	r2, #0
 800808a:	4b4f      	ldr	r3, [pc, #316]	@ (80081c8 <_dtoa_r+0x530>)
 800808c:	f7f8 f86e 	bl	800016c <__adddf3>
 8008090:	4605      	mov	r5, r0
 8008092:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008096:	2c00      	cmp	r4, #0
 8008098:	f040 809a 	bne.w	80081d0 <_dtoa_r+0x538>
 800809c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b4a      	ldr	r3, [pc, #296]	@ (80081cc <_dtoa_r+0x534>)
 80080a4:	f7f8 f860 	bl	8000168 <__aeabi_dsub>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080b0:	462a      	mov	r2, r5
 80080b2:	4633      	mov	r3, r6
 80080b4:	f7f8 fca0 	bl	80009f8 <__aeabi_dcmpgt>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f040 828e 	bne.w	80085da <_dtoa_r+0x942>
 80080be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c2:	462a      	mov	r2, r5
 80080c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80080c8:	f7f8 fc78 	bl	80009bc <__aeabi_dcmplt>
 80080cc:	2800      	cmp	r0, #0
 80080ce:	f040 8127 	bne.w	8008320 <_dtoa_r+0x688>
 80080d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80080d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80080da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80080dc:	2b00      	cmp	r3, #0
 80080de:	f2c0 8163 	blt.w	80083a8 <_dtoa_r+0x710>
 80080e2:	2f0e      	cmp	r7, #14
 80080e4:	f300 8160 	bgt.w	80083a8 <_dtoa_r+0x710>
 80080e8:	4b33      	ldr	r3, [pc, #204]	@ (80081b8 <_dtoa_r+0x520>)
 80080ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80080ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80080f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	da03      	bge.n	8008104 <_dtoa_r+0x46c>
 80080fc:	9b07      	ldr	r3, [sp, #28]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f340 8100 	ble.w	8008304 <_dtoa_r+0x66c>
 8008104:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008108:	4656      	mov	r6, sl
 800810a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 fb0b 	bl	800072c <__aeabi_ddiv>
 8008116:	f7f8 fc8f 	bl	8000a38 <__aeabi_d2iz>
 800811a:	4680      	mov	r8, r0
 800811c:	f7f8 f972 	bl	8000404 <__aeabi_i2d>
 8008120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008124:	f7f8 f9d8 	bl	80004d8 <__aeabi_dmul>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4620      	mov	r0, r4
 800812e:	4629      	mov	r1, r5
 8008130:	f7f8 f81a 	bl	8000168 <__aeabi_dsub>
 8008134:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008138:	9d07      	ldr	r5, [sp, #28]
 800813a:	f806 4b01 	strb.w	r4, [r6], #1
 800813e:	eba6 040a 	sub.w	r4, r6, sl
 8008142:	42a5      	cmp	r5, r4
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	f040 8116 	bne.w	8008378 <_dtoa_r+0x6e0>
 800814c:	f7f8 f80e 	bl	800016c <__adddf3>
 8008150:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	f7f8 fc4e 	bl	80009f8 <__aeabi_dcmpgt>
 800815c:	2800      	cmp	r0, #0
 800815e:	f040 80f8 	bne.w	8008352 <_dtoa_r+0x6ba>
 8008162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fc1d 	bl	80009a8 <__aeabi_dcmpeq>
 800816e:	b118      	cbz	r0, 8008178 <_dtoa_r+0x4e0>
 8008170:	f018 0f01 	tst.w	r8, #1
 8008174:	f040 80ed 	bne.w	8008352 <_dtoa_r+0x6ba>
 8008178:	4649      	mov	r1, r9
 800817a:	4658      	mov	r0, fp
 800817c:	f000 fc92 	bl	8008aa4 <_Bfree>
 8008180:	2300      	movs	r3, #0
 8008182:	7033      	strb	r3, [r6, #0]
 8008184:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008186:	3701      	adds	r7, #1
 8008188:	601f      	str	r7, [r3, #0]
 800818a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 8320 	beq.w	80087d2 <_dtoa_r+0xb3a>
 8008192:	601e      	str	r6, [r3, #0]
 8008194:	e31d      	b.n	80087d2 <_dtoa_r+0xb3a>
 8008196:	07e2      	lsls	r2, r4, #31
 8008198:	d505      	bpl.n	80081a6 <_dtoa_r+0x50e>
 800819a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800819e:	f7f8 f99b 	bl	80004d8 <__aeabi_dmul>
 80081a2:	2301      	movs	r3, #1
 80081a4:	3601      	adds	r6, #1
 80081a6:	1064      	asrs	r4, r4, #1
 80081a8:	3508      	adds	r5, #8
 80081aa:	e73f      	b.n	800802c <_dtoa_r+0x394>
 80081ac:	2602      	movs	r6, #2
 80081ae:	e742      	b.n	8008036 <_dtoa_r+0x39e>
 80081b0:	9c07      	ldr	r4, [sp, #28]
 80081b2:	9704      	str	r7, [sp, #16]
 80081b4:	e761      	b.n	800807a <_dtoa_r+0x3e2>
 80081b6:	bf00      	nop
 80081b8:	0800b580 	.word	0x0800b580
 80081bc:	0800b558 	.word	0x0800b558
 80081c0:	3ff00000 	.word	0x3ff00000
 80081c4:	40240000 	.word	0x40240000
 80081c8:	401c0000 	.word	0x401c0000
 80081cc:	40140000 	.word	0x40140000
 80081d0:	4b70      	ldr	r3, [pc, #448]	@ (8008394 <_dtoa_r+0x6fc>)
 80081d2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80081d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081dc:	4454      	add	r4, sl
 80081de:	2900      	cmp	r1, #0
 80081e0:	d045      	beq.n	800826e <_dtoa_r+0x5d6>
 80081e2:	2000      	movs	r0, #0
 80081e4:	496c      	ldr	r1, [pc, #432]	@ (8008398 <_dtoa_r+0x700>)
 80081e6:	f7f8 faa1 	bl	800072c <__aeabi_ddiv>
 80081ea:	4633      	mov	r3, r6
 80081ec:	462a      	mov	r2, r5
 80081ee:	f7f7 ffbb 	bl	8000168 <__aeabi_dsub>
 80081f2:	4656      	mov	r6, sl
 80081f4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80081f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fc:	f7f8 fc1c 	bl	8000a38 <__aeabi_d2iz>
 8008200:	4605      	mov	r5, r0
 8008202:	f7f8 f8ff 	bl	8000404 <__aeabi_i2d>
 8008206:	4602      	mov	r2, r0
 8008208:	460b      	mov	r3, r1
 800820a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800820e:	f7f7 ffab 	bl	8000168 <__aeabi_dsub>
 8008212:	4602      	mov	r2, r0
 8008214:	460b      	mov	r3, r1
 8008216:	3530      	adds	r5, #48	@ 0x30
 8008218:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800821c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008220:	f806 5b01 	strb.w	r5, [r6], #1
 8008224:	f7f8 fbca 	bl	80009bc <__aeabi_dcmplt>
 8008228:	2800      	cmp	r0, #0
 800822a:	d163      	bne.n	80082f4 <_dtoa_r+0x65c>
 800822c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008230:	2000      	movs	r0, #0
 8008232:	495a      	ldr	r1, [pc, #360]	@ (800839c <_dtoa_r+0x704>)
 8008234:	f7f7 ff98 	bl	8000168 <__aeabi_dsub>
 8008238:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800823c:	f7f8 fbbe 	bl	80009bc <__aeabi_dcmplt>
 8008240:	2800      	cmp	r0, #0
 8008242:	f040 8087 	bne.w	8008354 <_dtoa_r+0x6bc>
 8008246:	42a6      	cmp	r6, r4
 8008248:	f43f af43 	beq.w	80080d2 <_dtoa_r+0x43a>
 800824c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008250:	2200      	movs	r2, #0
 8008252:	4b53      	ldr	r3, [pc, #332]	@ (80083a0 <_dtoa_r+0x708>)
 8008254:	f7f8 f940 	bl	80004d8 <__aeabi_dmul>
 8008258:	2200      	movs	r2, #0
 800825a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800825e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008262:	4b4f      	ldr	r3, [pc, #316]	@ (80083a0 <_dtoa_r+0x708>)
 8008264:	f7f8 f938 	bl	80004d8 <__aeabi_dmul>
 8008268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800826c:	e7c4      	b.n	80081f8 <_dtoa_r+0x560>
 800826e:	4631      	mov	r1, r6
 8008270:	4628      	mov	r0, r5
 8008272:	f7f8 f931 	bl	80004d8 <__aeabi_dmul>
 8008276:	4656      	mov	r6, sl
 8008278:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800827c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800827e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008282:	f7f8 fbd9 	bl	8000a38 <__aeabi_d2iz>
 8008286:	4605      	mov	r5, r0
 8008288:	f7f8 f8bc 	bl	8000404 <__aeabi_i2d>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008294:	f7f7 ff68 	bl	8000168 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	3530      	adds	r5, #48	@ 0x30
 800829e:	f806 5b01 	strb.w	r5, [r6], #1
 80082a2:	42a6      	cmp	r6, r4
 80082a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	d124      	bne.n	80082f8 <_dtoa_r+0x660>
 80082ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082b2:	4b39      	ldr	r3, [pc, #228]	@ (8008398 <_dtoa_r+0x700>)
 80082b4:	f7f7 ff5a 	bl	800016c <__adddf3>
 80082b8:	4602      	mov	r2, r0
 80082ba:	460b      	mov	r3, r1
 80082bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c0:	f7f8 fb9a 	bl	80009f8 <__aeabi_dcmpgt>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	d145      	bne.n	8008354 <_dtoa_r+0x6bc>
 80082c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082cc:	2000      	movs	r0, #0
 80082ce:	4932      	ldr	r1, [pc, #200]	@ (8008398 <_dtoa_r+0x700>)
 80082d0:	f7f7 ff4a 	bl	8000168 <__aeabi_dsub>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082dc:	f7f8 fb6e 	bl	80009bc <__aeabi_dcmplt>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	f43f aef6 	beq.w	80080d2 <_dtoa_r+0x43a>
 80082e6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80082e8:	1e73      	subs	r3, r6, #1
 80082ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 80082ec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80082f0:	2b30      	cmp	r3, #48	@ 0x30
 80082f2:	d0f8      	beq.n	80082e6 <_dtoa_r+0x64e>
 80082f4:	9f04      	ldr	r7, [sp, #16]
 80082f6:	e73f      	b.n	8008178 <_dtoa_r+0x4e0>
 80082f8:	4b29      	ldr	r3, [pc, #164]	@ (80083a0 <_dtoa_r+0x708>)
 80082fa:	f7f8 f8ed 	bl	80004d8 <__aeabi_dmul>
 80082fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008302:	e7bc      	b.n	800827e <_dtoa_r+0x5e6>
 8008304:	d10c      	bne.n	8008320 <_dtoa_r+0x688>
 8008306:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800830a:	2200      	movs	r2, #0
 800830c:	4b25      	ldr	r3, [pc, #148]	@ (80083a4 <_dtoa_r+0x70c>)
 800830e:	f7f8 f8e3 	bl	80004d8 <__aeabi_dmul>
 8008312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008316:	f7f8 fb65 	bl	80009e4 <__aeabi_dcmpge>
 800831a:	2800      	cmp	r0, #0
 800831c:	f000 815b 	beq.w	80085d6 <_dtoa_r+0x93e>
 8008320:	2400      	movs	r4, #0
 8008322:	4625      	mov	r5, r4
 8008324:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008326:	4656      	mov	r6, sl
 8008328:	43db      	mvns	r3, r3
 800832a:	9304      	str	r3, [sp, #16]
 800832c:	2700      	movs	r7, #0
 800832e:	4621      	mov	r1, r4
 8008330:	4658      	mov	r0, fp
 8008332:	f000 fbb7 	bl	8008aa4 <_Bfree>
 8008336:	2d00      	cmp	r5, #0
 8008338:	d0dc      	beq.n	80082f4 <_dtoa_r+0x65c>
 800833a:	b12f      	cbz	r7, 8008348 <_dtoa_r+0x6b0>
 800833c:	42af      	cmp	r7, r5
 800833e:	d003      	beq.n	8008348 <_dtoa_r+0x6b0>
 8008340:	4639      	mov	r1, r7
 8008342:	4658      	mov	r0, fp
 8008344:	f000 fbae 	bl	8008aa4 <_Bfree>
 8008348:	4629      	mov	r1, r5
 800834a:	4658      	mov	r0, fp
 800834c:	f000 fbaa 	bl	8008aa4 <_Bfree>
 8008350:	e7d0      	b.n	80082f4 <_dtoa_r+0x65c>
 8008352:	9704      	str	r7, [sp, #16]
 8008354:	4633      	mov	r3, r6
 8008356:	461e      	mov	r6, r3
 8008358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800835c:	2a39      	cmp	r2, #57	@ 0x39
 800835e:	d107      	bne.n	8008370 <_dtoa_r+0x6d8>
 8008360:	459a      	cmp	sl, r3
 8008362:	d1f8      	bne.n	8008356 <_dtoa_r+0x6be>
 8008364:	9a04      	ldr	r2, [sp, #16]
 8008366:	3201      	adds	r2, #1
 8008368:	9204      	str	r2, [sp, #16]
 800836a:	2230      	movs	r2, #48	@ 0x30
 800836c:	f88a 2000 	strb.w	r2, [sl]
 8008370:	781a      	ldrb	r2, [r3, #0]
 8008372:	3201      	adds	r2, #1
 8008374:	701a      	strb	r2, [r3, #0]
 8008376:	e7bd      	b.n	80082f4 <_dtoa_r+0x65c>
 8008378:	2200      	movs	r2, #0
 800837a:	4b09      	ldr	r3, [pc, #36]	@ (80083a0 <_dtoa_r+0x708>)
 800837c:	f7f8 f8ac 	bl	80004d8 <__aeabi_dmul>
 8008380:	2200      	movs	r2, #0
 8008382:	2300      	movs	r3, #0
 8008384:	4604      	mov	r4, r0
 8008386:	460d      	mov	r5, r1
 8008388:	f7f8 fb0e 	bl	80009a8 <__aeabi_dcmpeq>
 800838c:	2800      	cmp	r0, #0
 800838e:	f43f aebc 	beq.w	800810a <_dtoa_r+0x472>
 8008392:	e6f1      	b.n	8008178 <_dtoa_r+0x4e0>
 8008394:	0800b580 	.word	0x0800b580
 8008398:	3fe00000 	.word	0x3fe00000
 800839c:	3ff00000 	.word	0x3ff00000
 80083a0:	40240000 	.word	0x40240000
 80083a4:	40140000 	.word	0x40140000
 80083a8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083aa:	2a00      	cmp	r2, #0
 80083ac:	f000 80db 	beq.w	8008566 <_dtoa_r+0x8ce>
 80083b0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80083b2:	2a01      	cmp	r2, #1
 80083b4:	f300 80bf 	bgt.w	8008536 <_dtoa_r+0x89e>
 80083b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80083ba:	2a00      	cmp	r2, #0
 80083bc:	f000 80b7 	beq.w	800852e <_dtoa_r+0x896>
 80083c0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80083c4:	4646      	mov	r6, r8
 80083c6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80083c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ca:	2101      	movs	r1, #1
 80083cc:	441a      	add	r2, r3
 80083ce:	4658      	mov	r0, fp
 80083d0:	4498      	add	r8, r3
 80083d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80083d4:	f000 fc64 	bl	8008ca0 <__i2b>
 80083d8:	4605      	mov	r5, r0
 80083da:	b15e      	cbz	r6, 80083f4 <_dtoa_r+0x75c>
 80083dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd08      	ble.n	80083f4 <_dtoa_r+0x75c>
 80083e2:	42b3      	cmp	r3, r6
 80083e4:	bfa8      	it	ge
 80083e6:	4633      	movge	r3, r6
 80083e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ea:	eba8 0803 	sub.w	r8, r8, r3
 80083ee:	1af6      	subs	r6, r6, r3
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083f6:	b1f3      	cbz	r3, 8008436 <_dtoa_r+0x79e>
 80083f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80b7 	beq.w	800856e <_dtoa_r+0x8d6>
 8008400:	b18c      	cbz	r4, 8008426 <_dtoa_r+0x78e>
 8008402:	4629      	mov	r1, r5
 8008404:	4622      	mov	r2, r4
 8008406:	4658      	mov	r0, fp
 8008408:	f000 fd08 	bl	8008e1c <__pow5mult>
 800840c:	464a      	mov	r2, r9
 800840e:	4601      	mov	r1, r0
 8008410:	4605      	mov	r5, r0
 8008412:	4658      	mov	r0, fp
 8008414:	f000 fc5a 	bl	8008ccc <__multiply>
 8008418:	4649      	mov	r1, r9
 800841a:	9004      	str	r0, [sp, #16]
 800841c:	4658      	mov	r0, fp
 800841e:	f000 fb41 	bl	8008aa4 <_Bfree>
 8008422:	9b04      	ldr	r3, [sp, #16]
 8008424:	4699      	mov	r9, r3
 8008426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008428:	1b1a      	subs	r2, r3, r4
 800842a:	d004      	beq.n	8008436 <_dtoa_r+0x79e>
 800842c:	4649      	mov	r1, r9
 800842e:	4658      	mov	r0, fp
 8008430:	f000 fcf4 	bl	8008e1c <__pow5mult>
 8008434:	4681      	mov	r9, r0
 8008436:	2101      	movs	r1, #1
 8008438:	4658      	mov	r0, fp
 800843a:	f000 fc31 	bl	8008ca0 <__i2b>
 800843e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008440:	4604      	mov	r4, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	f000 81c9 	beq.w	80087da <_dtoa_r+0xb42>
 8008448:	461a      	mov	r2, r3
 800844a:	4601      	mov	r1, r0
 800844c:	4658      	mov	r0, fp
 800844e:	f000 fce5 	bl	8008e1c <__pow5mult>
 8008452:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008454:	4604      	mov	r4, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	f300 808f 	bgt.w	800857a <_dtoa_r+0x8e2>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f040 8087 	bne.w	8008572 <_dtoa_r+0x8da>
 8008464:	9b03      	ldr	r3, [sp, #12]
 8008466:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800846a:	2b00      	cmp	r3, #0
 800846c:	f040 8083 	bne.w	8008576 <_dtoa_r+0x8de>
 8008470:	9b03      	ldr	r3, [sp, #12]
 8008472:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008476:	0d1b      	lsrs	r3, r3, #20
 8008478:	051b      	lsls	r3, r3, #20
 800847a:	b12b      	cbz	r3, 8008488 <_dtoa_r+0x7f0>
 800847c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800847e:	f108 0801 	add.w	r8, r8, #1
 8008482:	3301      	adds	r3, #1
 8008484:	9309      	str	r3, [sp, #36]	@ 0x24
 8008486:	2301      	movs	r3, #1
 8008488:	930a      	str	r3, [sp, #40]	@ 0x28
 800848a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 81aa 	beq.w	80087e6 <_dtoa_r+0xb4e>
 8008492:	6923      	ldr	r3, [r4, #16]
 8008494:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008498:	6918      	ldr	r0, [r3, #16]
 800849a:	f000 fbb5 	bl	8008c08 <__hi0bits>
 800849e:	f1c0 0020 	rsb	r0, r0, #32
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	4418      	add	r0, r3
 80084a6:	f010 001f 	ands.w	r0, r0, #31
 80084aa:	d071      	beq.n	8008590 <_dtoa_r+0x8f8>
 80084ac:	f1c0 0320 	rsb	r3, r0, #32
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	dd65      	ble.n	8008580 <_dtoa_r+0x8e8>
 80084b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b6:	f1c0 001c 	rsb	r0, r0, #28
 80084ba:	4403      	add	r3, r0
 80084bc:	4480      	add	r8, r0
 80084be:	4406      	add	r6, r0
 80084c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c2:	f1b8 0f00 	cmp.w	r8, #0
 80084c6:	dd05      	ble.n	80084d4 <_dtoa_r+0x83c>
 80084c8:	4649      	mov	r1, r9
 80084ca:	4642      	mov	r2, r8
 80084cc:	4658      	mov	r0, fp
 80084ce:	f000 fcff 	bl	8008ed0 <__lshift>
 80084d2:	4681      	mov	r9, r0
 80084d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	dd05      	ble.n	80084e6 <_dtoa_r+0x84e>
 80084da:	4621      	mov	r1, r4
 80084dc:	461a      	mov	r2, r3
 80084de:	4658      	mov	r0, fp
 80084e0:	f000 fcf6 	bl	8008ed0 <__lshift>
 80084e4:	4604      	mov	r4, r0
 80084e6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d053      	beq.n	8008594 <_dtoa_r+0x8fc>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4648      	mov	r0, r9
 80084f0:	f000 fd5a 	bl	8008fa8 <__mcmp>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	da4d      	bge.n	8008594 <_dtoa_r+0x8fc>
 80084f8:	1e7b      	subs	r3, r7, #1
 80084fa:	4649      	mov	r1, r9
 80084fc:	9304      	str	r3, [sp, #16]
 80084fe:	220a      	movs	r2, #10
 8008500:	2300      	movs	r3, #0
 8008502:	4658      	mov	r0, fp
 8008504:	f000 faf0 	bl	8008ae8 <__multadd>
 8008508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800850a:	4681      	mov	r9, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 816c 	beq.w	80087ea <_dtoa_r+0xb52>
 8008512:	2300      	movs	r3, #0
 8008514:	4629      	mov	r1, r5
 8008516:	220a      	movs	r2, #10
 8008518:	4658      	mov	r0, fp
 800851a:	f000 fae5 	bl	8008ae8 <__multadd>
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	4605      	mov	r5, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	dc61      	bgt.n	80085ea <_dtoa_r+0x952>
 8008526:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008528:	2b02      	cmp	r3, #2
 800852a:	dc3b      	bgt.n	80085a4 <_dtoa_r+0x90c>
 800852c:	e05d      	b.n	80085ea <_dtoa_r+0x952>
 800852e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008530:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008534:	e746      	b.n	80083c4 <_dtoa_r+0x72c>
 8008536:	9b07      	ldr	r3, [sp, #28]
 8008538:	1e5c      	subs	r4, r3, #1
 800853a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800853c:	42a3      	cmp	r3, r4
 800853e:	bfbf      	itttt	lt
 8008540:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008542:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008544:	1ae3      	sublt	r3, r4, r3
 8008546:	18d2      	addlt	r2, r2, r3
 8008548:	bfa8      	it	ge
 800854a:	1b1c      	subge	r4, r3, r4
 800854c:	9b07      	ldr	r3, [sp, #28]
 800854e:	bfbe      	ittt	lt
 8008550:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008552:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008554:	2400      	movlt	r4, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfb5      	itete	lt
 800855a:	eba8 0603 	sublt.w	r6, r8, r3
 800855e:	4646      	movge	r6, r8
 8008560:	2300      	movlt	r3, #0
 8008562:	9b07      	ldrge	r3, [sp, #28]
 8008564:	e730      	b.n	80083c8 <_dtoa_r+0x730>
 8008566:	4646      	mov	r6, r8
 8008568:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800856a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800856c:	e735      	b.n	80083da <_dtoa_r+0x742>
 800856e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008570:	e75c      	b.n	800842c <_dtoa_r+0x794>
 8008572:	2300      	movs	r3, #0
 8008574:	e788      	b.n	8008488 <_dtoa_r+0x7f0>
 8008576:	9b02      	ldr	r3, [sp, #8]
 8008578:	e786      	b.n	8008488 <_dtoa_r+0x7f0>
 800857a:	2300      	movs	r3, #0
 800857c:	930a      	str	r3, [sp, #40]	@ 0x28
 800857e:	e788      	b.n	8008492 <_dtoa_r+0x7fa>
 8008580:	d09f      	beq.n	80084c2 <_dtoa_r+0x82a>
 8008582:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008584:	331c      	adds	r3, #28
 8008586:	441a      	add	r2, r3
 8008588:	4498      	add	r8, r3
 800858a:	441e      	add	r6, r3
 800858c:	9209      	str	r2, [sp, #36]	@ 0x24
 800858e:	e798      	b.n	80084c2 <_dtoa_r+0x82a>
 8008590:	4603      	mov	r3, r0
 8008592:	e7f6      	b.n	8008582 <_dtoa_r+0x8ea>
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	9704      	str	r7, [sp, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	dc20      	bgt.n	80085de <_dtoa_r+0x946>
 800859c:	9308      	str	r3, [sp, #32]
 800859e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	dd1e      	ble.n	80085e2 <_dtoa_r+0x94a>
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f47f aebc 	bne.w	8008324 <_dtoa_r+0x68c>
 80085ac:	4621      	mov	r1, r4
 80085ae:	2205      	movs	r2, #5
 80085b0:	4658      	mov	r0, fp
 80085b2:	f000 fa99 	bl	8008ae8 <__multadd>
 80085b6:	4601      	mov	r1, r0
 80085b8:	4604      	mov	r4, r0
 80085ba:	4648      	mov	r0, r9
 80085bc:	f000 fcf4 	bl	8008fa8 <__mcmp>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	f77f aeaf 	ble.w	8008324 <_dtoa_r+0x68c>
 80085c6:	2331      	movs	r3, #49	@ 0x31
 80085c8:	4656      	mov	r6, sl
 80085ca:	f806 3b01 	strb.w	r3, [r6], #1
 80085ce:	9b04      	ldr	r3, [sp, #16]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9304      	str	r3, [sp, #16]
 80085d4:	e6aa      	b.n	800832c <_dtoa_r+0x694>
 80085d6:	9c07      	ldr	r4, [sp, #28]
 80085d8:	9704      	str	r7, [sp, #16]
 80085da:	4625      	mov	r5, r4
 80085dc:	e7f3      	b.n	80085c6 <_dtoa_r+0x92e>
 80085de:	9b07      	ldr	r3, [sp, #28]
 80085e0:	9308      	str	r3, [sp, #32]
 80085e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8104 	beq.w	80087f2 <_dtoa_r+0xb5a>
 80085ea:	2e00      	cmp	r6, #0
 80085ec:	dd05      	ble.n	80085fa <_dtoa_r+0x962>
 80085ee:	4629      	mov	r1, r5
 80085f0:	4632      	mov	r2, r6
 80085f2:	4658      	mov	r0, fp
 80085f4:	f000 fc6c 	bl	8008ed0 <__lshift>
 80085f8:	4605      	mov	r5, r0
 80085fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05a      	beq.n	80086b6 <_dtoa_r+0xa1e>
 8008600:	4658      	mov	r0, fp
 8008602:	6869      	ldr	r1, [r5, #4]
 8008604:	f000 fa0e 	bl	8008a24 <_Balloc>
 8008608:	4606      	mov	r6, r0
 800860a:	b928      	cbnz	r0, 8008618 <_dtoa_r+0x980>
 800860c:	4602      	mov	r2, r0
 800860e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008612:	4b83      	ldr	r3, [pc, #524]	@ (8008820 <_dtoa_r+0xb88>)
 8008614:	f7ff bb54 	b.w	8007cc0 <_dtoa_r+0x28>
 8008618:	692a      	ldr	r2, [r5, #16]
 800861a:	f105 010c 	add.w	r1, r5, #12
 800861e:	3202      	adds	r2, #2
 8008620:	0092      	lsls	r2, r2, #2
 8008622:	300c      	adds	r0, #12
 8008624:	f001 fed0 	bl	800a3c8 <memcpy>
 8008628:	2201      	movs	r2, #1
 800862a:	4631      	mov	r1, r6
 800862c:	4658      	mov	r0, fp
 800862e:	f000 fc4f 	bl	8008ed0 <__lshift>
 8008632:	462f      	mov	r7, r5
 8008634:	4605      	mov	r5, r0
 8008636:	f10a 0301 	add.w	r3, sl, #1
 800863a:	9307      	str	r3, [sp, #28]
 800863c:	9b08      	ldr	r3, [sp, #32]
 800863e:	4453      	add	r3, sl
 8008640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008642:	9b02      	ldr	r3, [sp, #8]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	930a      	str	r3, [sp, #40]	@ 0x28
 800864a:	9b07      	ldr	r3, [sp, #28]
 800864c:	4621      	mov	r1, r4
 800864e:	3b01      	subs	r3, #1
 8008650:	4648      	mov	r0, r9
 8008652:	9302      	str	r3, [sp, #8]
 8008654:	f7ff fa96 	bl	8007b84 <quorem>
 8008658:	4639      	mov	r1, r7
 800865a:	9008      	str	r0, [sp, #32]
 800865c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008660:	4648      	mov	r0, r9
 8008662:	f000 fca1 	bl	8008fa8 <__mcmp>
 8008666:	462a      	mov	r2, r5
 8008668:	9009      	str	r0, [sp, #36]	@ 0x24
 800866a:	4621      	mov	r1, r4
 800866c:	4658      	mov	r0, fp
 800866e:	f000 fcb7 	bl	8008fe0 <__mdiff>
 8008672:	68c2      	ldr	r2, [r0, #12]
 8008674:	4606      	mov	r6, r0
 8008676:	bb02      	cbnz	r2, 80086ba <_dtoa_r+0xa22>
 8008678:	4601      	mov	r1, r0
 800867a:	4648      	mov	r0, r9
 800867c:	f000 fc94 	bl	8008fa8 <__mcmp>
 8008680:	4602      	mov	r2, r0
 8008682:	4631      	mov	r1, r6
 8008684:	4658      	mov	r0, fp
 8008686:	920c      	str	r2, [sp, #48]	@ 0x30
 8008688:	f000 fa0c 	bl	8008aa4 <_Bfree>
 800868c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800868e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008690:	9e07      	ldr	r6, [sp, #28]
 8008692:	ea43 0102 	orr.w	r1, r3, r2
 8008696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008698:	4319      	orrs	r1, r3
 800869a:	d110      	bne.n	80086be <_dtoa_r+0xa26>
 800869c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086a0:	d029      	beq.n	80086f6 <_dtoa_r+0xa5e>
 80086a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	dd02      	ble.n	80086ae <_dtoa_r+0xa16>
 80086a8:	9b08      	ldr	r3, [sp, #32]
 80086aa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80086ae:	9b02      	ldr	r3, [sp, #8]
 80086b0:	f883 8000 	strb.w	r8, [r3]
 80086b4:	e63b      	b.n	800832e <_dtoa_r+0x696>
 80086b6:	4628      	mov	r0, r5
 80086b8:	e7bb      	b.n	8008632 <_dtoa_r+0x99a>
 80086ba:	2201      	movs	r2, #1
 80086bc:	e7e1      	b.n	8008682 <_dtoa_r+0x9ea>
 80086be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	db04      	blt.n	80086ce <_dtoa_r+0xa36>
 80086c4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80086c6:	430b      	orrs	r3, r1
 80086c8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086ca:	430b      	orrs	r3, r1
 80086cc:	d120      	bne.n	8008710 <_dtoa_r+0xa78>
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	dded      	ble.n	80086ae <_dtoa_r+0xa16>
 80086d2:	4649      	mov	r1, r9
 80086d4:	2201      	movs	r2, #1
 80086d6:	4658      	mov	r0, fp
 80086d8:	f000 fbfa 	bl	8008ed0 <__lshift>
 80086dc:	4621      	mov	r1, r4
 80086de:	4681      	mov	r9, r0
 80086e0:	f000 fc62 	bl	8008fa8 <__mcmp>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	dc03      	bgt.n	80086f0 <_dtoa_r+0xa58>
 80086e8:	d1e1      	bne.n	80086ae <_dtoa_r+0xa16>
 80086ea:	f018 0f01 	tst.w	r8, #1
 80086ee:	d0de      	beq.n	80086ae <_dtoa_r+0xa16>
 80086f0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086f4:	d1d8      	bne.n	80086a8 <_dtoa_r+0xa10>
 80086f6:	2339      	movs	r3, #57	@ 0x39
 80086f8:	9a02      	ldr	r2, [sp, #8]
 80086fa:	7013      	strb	r3, [r2, #0]
 80086fc:	4633      	mov	r3, r6
 80086fe:	461e      	mov	r6, r3
 8008700:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008704:	3b01      	subs	r3, #1
 8008706:	2a39      	cmp	r2, #57	@ 0x39
 8008708:	d052      	beq.n	80087b0 <_dtoa_r+0xb18>
 800870a:	3201      	adds	r2, #1
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	e60e      	b.n	800832e <_dtoa_r+0x696>
 8008710:	2a00      	cmp	r2, #0
 8008712:	dd07      	ble.n	8008724 <_dtoa_r+0xa8c>
 8008714:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008718:	d0ed      	beq.n	80086f6 <_dtoa_r+0xa5e>
 800871a:	9a02      	ldr	r2, [sp, #8]
 800871c:	f108 0301 	add.w	r3, r8, #1
 8008720:	7013      	strb	r3, [r2, #0]
 8008722:	e604      	b.n	800832e <_dtoa_r+0x696>
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	9a07      	ldr	r2, [sp, #28]
 8008728:	f803 8c01 	strb.w	r8, [r3, #-1]
 800872c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800872e:	4293      	cmp	r3, r2
 8008730:	d028      	beq.n	8008784 <_dtoa_r+0xaec>
 8008732:	4649      	mov	r1, r9
 8008734:	2300      	movs	r3, #0
 8008736:	220a      	movs	r2, #10
 8008738:	4658      	mov	r0, fp
 800873a:	f000 f9d5 	bl	8008ae8 <__multadd>
 800873e:	42af      	cmp	r7, r5
 8008740:	4681      	mov	r9, r0
 8008742:	f04f 0300 	mov.w	r3, #0
 8008746:	f04f 020a 	mov.w	r2, #10
 800874a:	4639      	mov	r1, r7
 800874c:	4658      	mov	r0, fp
 800874e:	d107      	bne.n	8008760 <_dtoa_r+0xac8>
 8008750:	f000 f9ca 	bl	8008ae8 <__multadd>
 8008754:	4607      	mov	r7, r0
 8008756:	4605      	mov	r5, r0
 8008758:	9b07      	ldr	r3, [sp, #28]
 800875a:	3301      	adds	r3, #1
 800875c:	9307      	str	r3, [sp, #28]
 800875e:	e774      	b.n	800864a <_dtoa_r+0x9b2>
 8008760:	f000 f9c2 	bl	8008ae8 <__multadd>
 8008764:	4629      	mov	r1, r5
 8008766:	4607      	mov	r7, r0
 8008768:	2300      	movs	r3, #0
 800876a:	220a      	movs	r2, #10
 800876c:	4658      	mov	r0, fp
 800876e:	f000 f9bb 	bl	8008ae8 <__multadd>
 8008772:	4605      	mov	r5, r0
 8008774:	e7f0      	b.n	8008758 <_dtoa_r+0xac0>
 8008776:	9b08      	ldr	r3, [sp, #32]
 8008778:	2700      	movs	r7, #0
 800877a:	2b00      	cmp	r3, #0
 800877c:	bfcc      	ite	gt
 800877e:	461e      	movgt	r6, r3
 8008780:	2601      	movle	r6, #1
 8008782:	4456      	add	r6, sl
 8008784:	4649      	mov	r1, r9
 8008786:	2201      	movs	r2, #1
 8008788:	4658      	mov	r0, fp
 800878a:	f000 fba1 	bl	8008ed0 <__lshift>
 800878e:	4621      	mov	r1, r4
 8008790:	4681      	mov	r9, r0
 8008792:	f000 fc09 	bl	8008fa8 <__mcmp>
 8008796:	2800      	cmp	r0, #0
 8008798:	dcb0      	bgt.n	80086fc <_dtoa_r+0xa64>
 800879a:	d102      	bne.n	80087a2 <_dtoa_r+0xb0a>
 800879c:	f018 0f01 	tst.w	r8, #1
 80087a0:	d1ac      	bne.n	80086fc <_dtoa_r+0xa64>
 80087a2:	4633      	mov	r3, r6
 80087a4:	461e      	mov	r6, r3
 80087a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087aa:	2a30      	cmp	r2, #48	@ 0x30
 80087ac:	d0fa      	beq.n	80087a4 <_dtoa_r+0xb0c>
 80087ae:	e5be      	b.n	800832e <_dtoa_r+0x696>
 80087b0:	459a      	cmp	sl, r3
 80087b2:	d1a4      	bne.n	80086fe <_dtoa_r+0xa66>
 80087b4:	9b04      	ldr	r3, [sp, #16]
 80087b6:	3301      	adds	r3, #1
 80087b8:	9304      	str	r3, [sp, #16]
 80087ba:	2331      	movs	r3, #49	@ 0x31
 80087bc:	f88a 3000 	strb.w	r3, [sl]
 80087c0:	e5b5      	b.n	800832e <_dtoa_r+0x696>
 80087c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80087c4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008824 <_dtoa_r+0xb8c>
 80087c8:	b11b      	cbz	r3, 80087d2 <_dtoa_r+0xb3a>
 80087ca:	f10a 0308 	add.w	r3, sl, #8
 80087ce:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	4650      	mov	r0, sl
 80087d4:	b017      	add	sp, #92	@ 0x5c
 80087d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087dc:	2b01      	cmp	r3, #1
 80087de:	f77f ae3d 	ble.w	800845c <_dtoa_r+0x7c4>
 80087e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80087e6:	2001      	movs	r0, #1
 80087e8:	e65b      	b.n	80084a2 <_dtoa_r+0x80a>
 80087ea:	9b08      	ldr	r3, [sp, #32]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f77f aed6 	ble.w	800859e <_dtoa_r+0x906>
 80087f2:	4656      	mov	r6, sl
 80087f4:	4621      	mov	r1, r4
 80087f6:	4648      	mov	r0, r9
 80087f8:	f7ff f9c4 	bl	8007b84 <quorem>
 80087fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008800:	9b08      	ldr	r3, [sp, #32]
 8008802:	f806 8b01 	strb.w	r8, [r6], #1
 8008806:	eba6 020a 	sub.w	r2, r6, sl
 800880a:	4293      	cmp	r3, r2
 800880c:	ddb3      	ble.n	8008776 <_dtoa_r+0xade>
 800880e:	4649      	mov	r1, r9
 8008810:	2300      	movs	r3, #0
 8008812:	220a      	movs	r2, #10
 8008814:	4658      	mov	r0, fp
 8008816:	f000 f967 	bl	8008ae8 <__multadd>
 800881a:	4681      	mov	r9, r0
 800881c:	e7ea      	b.n	80087f4 <_dtoa_r+0xb5c>
 800881e:	bf00      	nop
 8008820:	0800b4e0 	.word	0x0800b4e0
 8008824:	0800b464 	.word	0x0800b464

08008828 <_free_r>:
 8008828:	b538      	push	{r3, r4, r5, lr}
 800882a:	4605      	mov	r5, r0
 800882c:	2900      	cmp	r1, #0
 800882e:	d040      	beq.n	80088b2 <_free_r+0x8a>
 8008830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008834:	1f0c      	subs	r4, r1, #4
 8008836:	2b00      	cmp	r3, #0
 8008838:	bfb8      	it	lt
 800883a:	18e4      	addlt	r4, r4, r3
 800883c:	f000 f8e6 	bl	8008a0c <__malloc_lock>
 8008840:	4a1c      	ldr	r2, [pc, #112]	@ (80088b4 <_free_r+0x8c>)
 8008842:	6813      	ldr	r3, [r2, #0]
 8008844:	b933      	cbnz	r3, 8008854 <_free_r+0x2c>
 8008846:	6063      	str	r3, [r4, #4]
 8008848:	6014      	str	r4, [r2, #0]
 800884a:	4628      	mov	r0, r5
 800884c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008850:	f000 b8e2 	b.w	8008a18 <__malloc_unlock>
 8008854:	42a3      	cmp	r3, r4
 8008856:	d908      	bls.n	800886a <_free_r+0x42>
 8008858:	6820      	ldr	r0, [r4, #0]
 800885a:	1821      	adds	r1, r4, r0
 800885c:	428b      	cmp	r3, r1
 800885e:	bf01      	itttt	eq
 8008860:	6819      	ldreq	r1, [r3, #0]
 8008862:	685b      	ldreq	r3, [r3, #4]
 8008864:	1809      	addeq	r1, r1, r0
 8008866:	6021      	streq	r1, [r4, #0]
 8008868:	e7ed      	b.n	8008846 <_free_r+0x1e>
 800886a:	461a      	mov	r2, r3
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	b10b      	cbz	r3, 8008874 <_free_r+0x4c>
 8008870:	42a3      	cmp	r3, r4
 8008872:	d9fa      	bls.n	800886a <_free_r+0x42>
 8008874:	6811      	ldr	r1, [r2, #0]
 8008876:	1850      	adds	r0, r2, r1
 8008878:	42a0      	cmp	r0, r4
 800887a:	d10b      	bne.n	8008894 <_free_r+0x6c>
 800887c:	6820      	ldr	r0, [r4, #0]
 800887e:	4401      	add	r1, r0
 8008880:	1850      	adds	r0, r2, r1
 8008882:	4283      	cmp	r3, r0
 8008884:	6011      	str	r1, [r2, #0]
 8008886:	d1e0      	bne.n	800884a <_free_r+0x22>
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	4408      	add	r0, r1
 800888e:	6010      	str	r0, [r2, #0]
 8008890:	6053      	str	r3, [r2, #4]
 8008892:	e7da      	b.n	800884a <_free_r+0x22>
 8008894:	d902      	bls.n	800889c <_free_r+0x74>
 8008896:	230c      	movs	r3, #12
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	e7d6      	b.n	800884a <_free_r+0x22>
 800889c:	6820      	ldr	r0, [r4, #0]
 800889e:	1821      	adds	r1, r4, r0
 80088a0:	428b      	cmp	r3, r1
 80088a2:	bf01      	itttt	eq
 80088a4:	6819      	ldreq	r1, [r3, #0]
 80088a6:	685b      	ldreq	r3, [r3, #4]
 80088a8:	1809      	addeq	r1, r1, r0
 80088aa:	6021      	streq	r1, [r4, #0]
 80088ac:	6063      	str	r3, [r4, #4]
 80088ae:	6054      	str	r4, [r2, #4]
 80088b0:	e7cb      	b.n	800884a <_free_r+0x22>
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20000a34 	.word	0x20000a34

080088b8 <malloc>:
 80088b8:	4b02      	ldr	r3, [pc, #8]	@ (80088c4 <malloc+0xc>)
 80088ba:	4601      	mov	r1, r0
 80088bc:	6818      	ldr	r0, [r3, #0]
 80088be:	f000 b825 	b.w	800890c <_malloc_r>
 80088c2:	bf00      	nop
 80088c4:	20000048 	.word	0x20000048

080088c8 <sbrk_aligned>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	4e0f      	ldr	r6, [pc, #60]	@ (8008908 <sbrk_aligned+0x40>)
 80088cc:	460c      	mov	r4, r1
 80088ce:	6831      	ldr	r1, [r6, #0]
 80088d0:	4605      	mov	r5, r0
 80088d2:	b911      	cbnz	r1, 80088da <sbrk_aligned+0x12>
 80088d4:	f001 fd68 	bl	800a3a8 <_sbrk_r>
 80088d8:	6030      	str	r0, [r6, #0]
 80088da:	4621      	mov	r1, r4
 80088dc:	4628      	mov	r0, r5
 80088de:	f001 fd63 	bl	800a3a8 <_sbrk_r>
 80088e2:	1c43      	adds	r3, r0, #1
 80088e4:	d103      	bne.n	80088ee <sbrk_aligned+0x26>
 80088e6:	f04f 34ff 	mov.w	r4, #4294967295
 80088ea:	4620      	mov	r0, r4
 80088ec:	bd70      	pop	{r4, r5, r6, pc}
 80088ee:	1cc4      	adds	r4, r0, #3
 80088f0:	f024 0403 	bic.w	r4, r4, #3
 80088f4:	42a0      	cmp	r0, r4
 80088f6:	d0f8      	beq.n	80088ea <sbrk_aligned+0x22>
 80088f8:	1a21      	subs	r1, r4, r0
 80088fa:	4628      	mov	r0, r5
 80088fc:	f001 fd54 	bl	800a3a8 <_sbrk_r>
 8008900:	3001      	adds	r0, #1
 8008902:	d1f2      	bne.n	80088ea <sbrk_aligned+0x22>
 8008904:	e7ef      	b.n	80088e6 <sbrk_aligned+0x1e>
 8008906:	bf00      	nop
 8008908:	20000a30 	.word	0x20000a30

0800890c <_malloc_r>:
 800890c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008910:	1ccd      	adds	r5, r1, #3
 8008912:	f025 0503 	bic.w	r5, r5, #3
 8008916:	3508      	adds	r5, #8
 8008918:	2d0c      	cmp	r5, #12
 800891a:	bf38      	it	cc
 800891c:	250c      	movcc	r5, #12
 800891e:	2d00      	cmp	r5, #0
 8008920:	4606      	mov	r6, r0
 8008922:	db01      	blt.n	8008928 <_malloc_r+0x1c>
 8008924:	42a9      	cmp	r1, r5
 8008926:	d904      	bls.n	8008932 <_malloc_r+0x26>
 8008928:	230c      	movs	r3, #12
 800892a:	6033      	str	r3, [r6, #0]
 800892c:	2000      	movs	r0, #0
 800892e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008932:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a08 <_malloc_r+0xfc>
 8008936:	f000 f869 	bl	8008a0c <__malloc_lock>
 800893a:	f8d8 3000 	ldr.w	r3, [r8]
 800893e:	461c      	mov	r4, r3
 8008940:	bb44      	cbnz	r4, 8008994 <_malloc_r+0x88>
 8008942:	4629      	mov	r1, r5
 8008944:	4630      	mov	r0, r6
 8008946:	f7ff ffbf 	bl	80088c8 <sbrk_aligned>
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	4604      	mov	r4, r0
 800894e:	d158      	bne.n	8008a02 <_malloc_r+0xf6>
 8008950:	f8d8 4000 	ldr.w	r4, [r8]
 8008954:	4627      	mov	r7, r4
 8008956:	2f00      	cmp	r7, #0
 8008958:	d143      	bne.n	80089e2 <_malloc_r+0xd6>
 800895a:	2c00      	cmp	r4, #0
 800895c:	d04b      	beq.n	80089f6 <_malloc_r+0xea>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	4639      	mov	r1, r7
 8008962:	4630      	mov	r0, r6
 8008964:	eb04 0903 	add.w	r9, r4, r3
 8008968:	f001 fd1e 	bl	800a3a8 <_sbrk_r>
 800896c:	4581      	cmp	r9, r0
 800896e:	d142      	bne.n	80089f6 <_malloc_r+0xea>
 8008970:	6821      	ldr	r1, [r4, #0]
 8008972:	4630      	mov	r0, r6
 8008974:	1a6d      	subs	r5, r5, r1
 8008976:	4629      	mov	r1, r5
 8008978:	f7ff ffa6 	bl	80088c8 <sbrk_aligned>
 800897c:	3001      	adds	r0, #1
 800897e:	d03a      	beq.n	80089f6 <_malloc_r+0xea>
 8008980:	6823      	ldr	r3, [r4, #0]
 8008982:	442b      	add	r3, r5
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	f8d8 3000 	ldr.w	r3, [r8]
 800898a:	685a      	ldr	r2, [r3, #4]
 800898c:	bb62      	cbnz	r2, 80089e8 <_malloc_r+0xdc>
 800898e:	f8c8 7000 	str.w	r7, [r8]
 8008992:	e00f      	b.n	80089b4 <_malloc_r+0xa8>
 8008994:	6822      	ldr	r2, [r4, #0]
 8008996:	1b52      	subs	r2, r2, r5
 8008998:	d420      	bmi.n	80089dc <_malloc_r+0xd0>
 800899a:	2a0b      	cmp	r2, #11
 800899c:	d917      	bls.n	80089ce <_malloc_r+0xc2>
 800899e:	1961      	adds	r1, r4, r5
 80089a0:	42a3      	cmp	r3, r4
 80089a2:	6025      	str	r5, [r4, #0]
 80089a4:	bf18      	it	ne
 80089a6:	6059      	strne	r1, [r3, #4]
 80089a8:	6863      	ldr	r3, [r4, #4]
 80089aa:	bf08      	it	eq
 80089ac:	f8c8 1000 	streq.w	r1, [r8]
 80089b0:	5162      	str	r2, [r4, r5]
 80089b2:	604b      	str	r3, [r1, #4]
 80089b4:	4630      	mov	r0, r6
 80089b6:	f000 f82f 	bl	8008a18 <__malloc_unlock>
 80089ba:	f104 000b 	add.w	r0, r4, #11
 80089be:	1d23      	adds	r3, r4, #4
 80089c0:	f020 0007 	bic.w	r0, r0, #7
 80089c4:	1ac2      	subs	r2, r0, r3
 80089c6:	bf1c      	itt	ne
 80089c8:	1a1b      	subne	r3, r3, r0
 80089ca:	50a3      	strne	r3, [r4, r2]
 80089cc:	e7af      	b.n	800892e <_malloc_r+0x22>
 80089ce:	6862      	ldr	r2, [r4, #4]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	bf0c      	ite	eq
 80089d4:	f8c8 2000 	streq.w	r2, [r8]
 80089d8:	605a      	strne	r2, [r3, #4]
 80089da:	e7eb      	b.n	80089b4 <_malloc_r+0xa8>
 80089dc:	4623      	mov	r3, r4
 80089de:	6864      	ldr	r4, [r4, #4]
 80089e0:	e7ae      	b.n	8008940 <_malloc_r+0x34>
 80089e2:	463c      	mov	r4, r7
 80089e4:	687f      	ldr	r7, [r7, #4]
 80089e6:	e7b6      	b.n	8008956 <_malloc_r+0x4a>
 80089e8:	461a      	mov	r2, r3
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	42a3      	cmp	r3, r4
 80089ee:	d1fb      	bne.n	80089e8 <_malloc_r+0xdc>
 80089f0:	2300      	movs	r3, #0
 80089f2:	6053      	str	r3, [r2, #4]
 80089f4:	e7de      	b.n	80089b4 <_malloc_r+0xa8>
 80089f6:	230c      	movs	r3, #12
 80089f8:	4630      	mov	r0, r6
 80089fa:	6033      	str	r3, [r6, #0]
 80089fc:	f000 f80c 	bl	8008a18 <__malloc_unlock>
 8008a00:	e794      	b.n	800892c <_malloc_r+0x20>
 8008a02:	6005      	str	r5, [r0, #0]
 8008a04:	e7d6      	b.n	80089b4 <_malloc_r+0xa8>
 8008a06:	bf00      	nop
 8008a08:	20000a34 	.word	0x20000a34

08008a0c <__malloc_lock>:
 8008a0c:	4801      	ldr	r0, [pc, #4]	@ (8008a14 <__malloc_lock+0x8>)
 8008a0e:	f7ff b8a4 	b.w	8007b5a <__retarget_lock_acquire_recursive>
 8008a12:	bf00      	nop
 8008a14:	20000a2c 	.word	0x20000a2c

08008a18 <__malloc_unlock>:
 8008a18:	4801      	ldr	r0, [pc, #4]	@ (8008a20 <__malloc_unlock+0x8>)
 8008a1a:	f7ff b89f 	b.w	8007b5c <__retarget_lock_release_recursive>
 8008a1e:	bf00      	nop
 8008a20:	20000a2c 	.word	0x20000a2c

08008a24 <_Balloc>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	69c6      	ldr	r6, [r0, #28]
 8008a28:	4604      	mov	r4, r0
 8008a2a:	460d      	mov	r5, r1
 8008a2c:	b976      	cbnz	r6, 8008a4c <_Balloc+0x28>
 8008a2e:	2010      	movs	r0, #16
 8008a30:	f7ff ff42 	bl	80088b8 <malloc>
 8008a34:	4602      	mov	r2, r0
 8008a36:	61e0      	str	r0, [r4, #28]
 8008a38:	b920      	cbnz	r0, 8008a44 <_Balloc+0x20>
 8008a3a:	216b      	movs	r1, #107	@ 0x6b
 8008a3c:	4b17      	ldr	r3, [pc, #92]	@ (8008a9c <_Balloc+0x78>)
 8008a3e:	4818      	ldr	r0, [pc, #96]	@ (8008aa0 <_Balloc+0x7c>)
 8008a40:	f001 fcd6 	bl	800a3f0 <__assert_func>
 8008a44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a48:	6006      	str	r6, [r0, #0]
 8008a4a:	60c6      	str	r6, [r0, #12]
 8008a4c:	69e6      	ldr	r6, [r4, #28]
 8008a4e:	68f3      	ldr	r3, [r6, #12]
 8008a50:	b183      	cbz	r3, 8008a74 <_Balloc+0x50>
 8008a52:	69e3      	ldr	r3, [r4, #28]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a5a:	b9b8      	cbnz	r0, 8008a8c <_Balloc+0x68>
 8008a5c:	2101      	movs	r1, #1
 8008a5e:	fa01 f605 	lsl.w	r6, r1, r5
 8008a62:	1d72      	adds	r2, r6, #5
 8008a64:	4620      	mov	r0, r4
 8008a66:	0092      	lsls	r2, r2, #2
 8008a68:	f001 fce0 	bl	800a42c <_calloc_r>
 8008a6c:	b160      	cbz	r0, 8008a88 <_Balloc+0x64>
 8008a6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a72:	e00e      	b.n	8008a92 <_Balloc+0x6e>
 8008a74:	2221      	movs	r2, #33	@ 0x21
 8008a76:	2104      	movs	r1, #4
 8008a78:	4620      	mov	r0, r4
 8008a7a:	f001 fcd7 	bl	800a42c <_calloc_r>
 8008a7e:	69e3      	ldr	r3, [r4, #28]
 8008a80:	60f0      	str	r0, [r6, #12]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e4      	bne.n	8008a52 <_Balloc+0x2e>
 8008a88:	2000      	movs	r0, #0
 8008a8a:	bd70      	pop	{r4, r5, r6, pc}
 8008a8c:	6802      	ldr	r2, [r0, #0]
 8008a8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a92:	2300      	movs	r3, #0
 8008a94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008a98:	e7f7      	b.n	8008a8a <_Balloc+0x66>
 8008a9a:	bf00      	nop
 8008a9c:	0800b471 	.word	0x0800b471
 8008aa0:	0800b4f1 	.word	0x0800b4f1

08008aa4 <_Bfree>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	69c6      	ldr	r6, [r0, #28]
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	460c      	mov	r4, r1
 8008aac:	b976      	cbnz	r6, 8008acc <_Bfree+0x28>
 8008aae:	2010      	movs	r0, #16
 8008ab0:	f7ff ff02 	bl	80088b8 <malloc>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	61e8      	str	r0, [r5, #28]
 8008ab8:	b920      	cbnz	r0, 8008ac4 <_Bfree+0x20>
 8008aba:	218f      	movs	r1, #143	@ 0x8f
 8008abc:	4b08      	ldr	r3, [pc, #32]	@ (8008ae0 <_Bfree+0x3c>)
 8008abe:	4809      	ldr	r0, [pc, #36]	@ (8008ae4 <_Bfree+0x40>)
 8008ac0:	f001 fc96 	bl	800a3f0 <__assert_func>
 8008ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ac8:	6006      	str	r6, [r0, #0]
 8008aca:	60c6      	str	r6, [r0, #12]
 8008acc:	b13c      	cbz	r4, 8008ade <_Bfree+0x3a>
 8008ace:	69eb      	ldr	r3, [r5, #28]
 8008ad0:	6862      	ldr	r2, [r4, #4]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ad8:	6021      	str	r1, [r4, #0]
 8008ada:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	0800b471 	.word	0x0800b471
 8008ae4:	0800b4f1 	.word	0x0800b4f1

08008ae8 <__multadd>:
 8008ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aec:	4607      	mov	r7, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	461e      	mov	r6, r3
 8008af2:	2000      	movs	r0, #0
 8008af4:	690d      	ldr	r5, [r1, #16]
 8008af6:	f101 0c14 	add.w	ip, r1, #20
 8008afa:	f8dc 3000 	ldr.w	r3, [ip]
 8008afe:	3001      	adds	r0, #1
 8008b00:	b299      	uxth	r1, r3
 8008b02:	fb02 6101 	mla	r1, r2, r1, r6
 8008b06:	0c1e      	lsrs	r6, r3, #16
 8008b08:	0c0b      	lsrs	r3, r1, #16
 8008b0a:	fb02 3306 	mla	r3, r2, r6, r3
 8008b0e:	b289      	uxth	r1, r1
 8008b10:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b14:	4285      	cmp	r5, r0
 8008b16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b1a:	f84c 1b04 	str.w	r1, [ip], #4
 8008b1e:	dcec      	bgt.n	8008afa <__multadd+0x12>
 8008b20:	b30e      	cbz	r6, 8008b66 <__multadd+0x7e>
 8008b22:	68a3      	ldr	r3, [r4, #8]
 8008b24:	42ab      	cmp	r3, r5
 8008b26:	dc19      	bgt.n	8008b5c <__multadd+0x74>
 8008b28:	6861      	ldr	r1, [r4, #4]
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	3101      	adds	r1, #1
 8008b2e:	f7ff ff79 	bl	8008a24 <_Balloc>
 8008b32:	4680      	mov	r8, r0
 8008b34:	b928      	cbnz	r0, 8008b42 <__multadd+0x5a>
 8008b36:	4602      	mov	r2, r0
 8008b38:	21ba      	movs	r1, #186	@ 0xba
 8008b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8008b6c <__multadd+0x84>)
 8008b3c:	480c      	ldr	r0, [pc, #48]	@ (8008b70 <__multadd+0x88>)
 8008b3e:	f001 fc57 	bl	800a3f0 <__assert_func>
 8008b42:	6922      	ldr	r2, [r4, #16]
 8008b44:	f104 010c 	add.w	r1, r4, #12
 8008b48:	3202      	adds	r2, #2
 8008b4a:	0092      	lsls	r2, r2, #2
 8008b4c:	300c      	adds	r0, #12
 8008b4e:	f001 fc3b 	bl	800a3c8 <memcpy>
 8008b52:	4621      	mov	r1, r4
 8008b54:	4638      	mov	r0, r7
 8008b56:	f7ff ffa5 	bl	8008aa4 <_Bfree>
 8008b5a:	4644      	mov	r4, r8
 8008b5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b60:	3501      	adds	r5, #1
 8008b62:	615e      	str	r6, [r3, #20]
 8008b64:	6125      	str	r5, [r4, #16]
 8008b66:	4620      	mov	r0, r4
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	0800b4e0 	.word	0x0800b4e0
 8008b70:	0800b4f1 	.word	0x0800b4f1

08008b74 <__s2b>:
 8008b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b78:	4615      	mov	r5, r2
 8008b7a:	2209      	movs	r2, #9
 8008b7c:	461f      	mov	r7, r3
 8008b7e:	3308      	adds	r3, #8
 8008b80:	460c      	mov	r4, r1
 8008b82:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b86:	4606      	mov	r6, r0
 8008b88:	2201      	movs	r2, #1
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	db09      	blt.n	8008ba4 <__s2b+0x30>
 8008b90:	4630      	mov	r0, r6
 8008b92:	f7ff ff47 	bl	8008a24 <_Balloc>
 8008b96:	b940      	cbnz	r0, 8008baa <__s2b+0x36>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	21d3      	movs	r1, #211	@ 0xd3
 8008b9c:	4b18      	ldr	r3, [pc, #96]	@ (8008c00 <__s2b+0x8c>)
 8008b9e:	4819      	ldr	r0, [pc, #100]	@ (8008c04 <__s2b+0x90>)
 8008ba0:	f001 fc26 	bl	800a3f0 <__assert_func>
 8008ba4:	0052      	lsls	r2, r2, #1
 8008ba6:	3101      	adds	r1, #1
 8008ba8:	e7f0      	b.n	8008b8c <__s2b+0x18>
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	2d09      	cmp	r5, #9
 8008bae:	6143      	str	r3, [r0, #20]
 8008bb0:	f04f 0301 	mov.w	r3, #1
 8008bb4:	6103      	str	r3, [r0, #16]
 8008bb6:	dd16      	ble.n	8008be6 <__s2b+0x72>
 8008bb8:	f104 0909 	add.w	r9, r4, #9
 8008bbc:	46c8      	mov	r8, r9
 8008bbe:	442c      	add	r4, r5
 8008bc0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bc4:	4601      	mov	r1, r0
 8008bc6:	220a      	movs	r2, #10
 8008bc8:	4630      	mov	r0, r6
 8008bca:	3b30      	subs	r3, #48	@ 0x30
 8008bcc:	f7ff ff8c 	bl	8008ae8 <__multadd>
 8008bd0:	45a0      	cmp	r8, r4
 8008bd2:	d1f5      	bne.n	8008bc0 <__s2b+0x4c>
 8008bd4:	f1a5 0408 	sub.w	r4, r5, #8
 8008bd8:	444c      	add	r4, r9
 8008bda:	1b2d      	subs	r5, r5, r4
 8008bdc:	1963      	adds	r3, r4, r5
 8008bde:	42bb      	cmp	r3, r7
 8008be0:	db04      	blt.n	8008bec <__s2b+0x78>
 8008be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be6:	2509      	movs	r5, #9
 8008be8:	340a      	adds	r4, #10
 8008bea:	e7f6      	b.n	8008bda <__s2b+0x66>
 8008bec:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bf0:	4601      	mov	r1, r0
 8008bf2:	220a      	movs	r2, #10
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	3b30      	subs	r3, #48	@ 0x30
 8008bf8:	f7ff ff76 	bl	8008ae8 <__multadd>
 8008bfc:	e7ee      	b.n	8008bdc <__s2b+0x68>
 8008bfe:	bf00      	nop
 8008c00:	0800b4e0 	.word	0x0800b4e0
 8008c04:	0800b4f1 	.word	0x0800b4f1

08008c08 <__hi0bits>:
 8008c08:	4603      	mov	r3, r0
 8008c0a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c0e:	bf3a      	itte	cc
 8008c10:	0403      	lslcc	r3, r0, #16
 8008c12:	2010      	movcc	r0, #16
 8008c14:	2000      	movcs	r0, #0
 8008c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c1a:	bf3c      	itt	cc
 8008c1c:	021b      	lslcc	r3, r3, #8
 8008c1e:	3008      	addcc	r0, #8
 8008c20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c24:	bf3c      	itt	cc
 8008c26:	011b      	lslcc	r3, r3, #4
 8008c28:	3004      	addcc	r0, #4
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c2e:	bf3c      	itt	cc
 8008c30:	009b      	lslcc	r3, r3, #2
 8008c32:	3002      	addcc	r0, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	db05      	blt.n	8008c44 <__hi0bits+0x3c>
 8008c38:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c3c:	f100 0001 	add.w	r0, r0, #1
 8008c40:	bf08      	it	eq
 8008c42:	2020      	moveq	r0, #32
 8008c44:	4770      	bx	lr

08008c46 <__lo0bits>:
 8008c46:	6803      	ldr	r3, [r0, #0]
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f013 0007 	ands.w	r0, r3, #7
 8008c4e:	d00b      	beq.n	8008c68 <__lo0bits+0x22>
 8008c50:	07d9      	lsls	r1, r3, #31
 8008c52:	d421      	bmi.n	8008c98 <__lo0bits+0x52>
 8008c54:	0798      	lsls	r0, r3, #30
 8008c56:	bf49      	itett	mi
 8008c58:	085b      	lsrmi	r3, r3, #1
 8008c5a:	089b      	lsrpl	r3, r3, #2
 8008c5c:	2001      	movmi	r0, #1
 8008c5e:	6013      	strmi	r3, [r2, #0]
 8008c60:	bf5c      	itt	pl
 8008c62:	2002      	movpl	r0, #2
 8008c64:	6013      	strpl	r3, [r2, #0]
 8008c66:	4770      	bx	lr
 8008c68:	b299      	uxth	r1, r3
 8008c6a:	b909      	cbnz	r1, 8008c70 <__lo0bits+0x2a>
 8008c6c:	2010      	movs	r0, #16
 8008c6e:	0c1b      	lsrs	r3, r3, #16
 8008c70:	b2d9      	uxtb	r1, r3
 8008c72:	b909      	cbnz	r1, 8008c78 <__lo0bits+0x32>
 8008c74:	3008      	adds	r0, #8
 8008c76:	0a1b      	lsrs	r3, r3, #8
 8008c78:	0719      	lsls	r1, r3, #28
 8008c7a:	bf04      	itt	eq
 8008c7c:	091b      	lsreq	r3, r3, #4
 8008c7e:	3004      	addeq	r0, #4
 8008c80:	0799      	lsls	r1, r3, #30
 8008c82:	bf04      	itt	eq
 8008c84:	089b      	lsreq	r3, r3, #2
 8008c86:	3002      	addeq	r0, #2
 8008c88:	07d9      	lsls	r1, r3, #31
 8008c8a:	d403      	bmi.n	8008c94 <__lo0bits+0x4e>
 8008c8c:	085b      	lsrs	r3, r3, #1
 8008c8e:	f100 0001 	add.w	r0, r0, #1
 8008c92:	d003      	beq.n	8008c9c <__lo0bits+0x56>
 8008c94:	6013      	str	r3, [r2, #0]
 8008c96:	4770      	bx	lr
 8008c98:	2000      	movs	r0, #0
 8008c9a:	4770      	bx	lr
 8008c9c:	2020      	movs	r0, #32
 8008c9e:	4770      	bx	lr

08008ca0 <__i2b>:
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	f7ff febd 	bl	8008a24 <_Balloc>
 8008caa:	4602      	mov	r2, r0
 8008cac:	b928      	cbnz	r0, 8008cba <__i2b+0x1a>
 8008cae:	f240 1145 	movw	r1, #325	@ 0x145
 8008cb2:	4b04      	ldr	r3, [pc, #16]	@ (8008cc4 <__i2b+0x24>)
 8008cb4:	4804      	ldr	r0, [pc, #16]	@ (8008cc8 <__i2b+0x28>)
 8008cb6:	f001 fb9b 	bl	800a3f0 <__assert_func>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	6144      	str	r4, [r0, #20]
 8008cbe:	6103      	str	r3, [r0, #16]
 8008cc0:	bd10      	pop	{r4, pc}
 8008cc2:	bf00      	nop
 8008cc4:	0800b4e0 	.word	0x0800b4e0
 8008cc8:	0800b4f1 	.word	0x0800b4f1

08008ccc <__multiply>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	690a      	ldr	r2, [r1, #16]
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	460f      	mov	r7, r1
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	bfa2      	ittt	ge
 8008cdc:	4623      	movge	r3, r4
 8008cde:	460c      	movge	r4, r1
 8008ce0:	461f      	movge	r7, r3
 8008ce2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008ce6:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cea:	68a3      	ldr	r3, [r4, #8]
 8008cec:	6861      	ldr	r1, [r4, #4]
 8008cee:	eb0a 0609 	add.w	r6, sl, r9
 8008cf2:	42b3      	cmp	r3, r6
 8008cf4:	b085      	sub	sp, #20
 8008cf6:	bfb8      	it	lt
 8008cf8:	3101      	addlt	r1, #1
 8008cfa:	f7ff fe93 	bl	8008a24 <_Balloc>
 8008cfe:	b930      	cbnz	r0, 8008d0e <__multiply+0x42>
 8008d00:	4602      	mov	r2, r0
 8008d02:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d06:	4b43      	ldr	r3, [pc, #268]	@ (8008e14 <__multiply+0x148>)
 8008d08:	4843      	ldr	r0, [pc, #268]	@ (8008e18 <__multiply+0x14c>)
 8008d0a:	f001 fb71 	bl	800a3f0 <__assert_func>
 8008d0e:	f100 0514 	add.w	r5, r0, #20
 8008d12:	462b      	mov	r3, r5
 8008d14:	2200      	movs	r2, #0
 8008d16:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d1a:	4543      	cmp	r3, r8
 8008d1c:	d321      	bcc.n	8008d62 <__multiply+0x96>
 8008d1e:	f107 0114 	add.w	r1, r7, #20
 8008d22:	f104 0214 	add.w	r2, r4, #20
 8008d26:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d2a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d2e:	9302      	str	r3, [sp, #8]
 8008d30:	1b13      	subs	r3, r2, r4
 8008d32:	3b15      	subs	r3, #21
 8008d34:	f023 0303 	bic.w	r3, r3, #3
 8008d38:	3304      	adds	r3, #4
 8008d3a:	f104 0715 	add.w	r7, r4, #21
 8008d3e:	42ba      	cmp	r2, r7
 8008d40:	bf38      	it	cc
 8008d42:	2304      	movcc	r3, #4
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	9b02      	ldr	r3, [sp, #8]
 8008d48:	9103      	str	r1, [sp, #12]
 8008d4a:	428b      	cmp	r3, r1
 8008d4c:	d80c      	bhi.n	8008d68 <__multiply+0x9c>
 8008d4e:	2e00      	cmp	r6, #0
 8008d50:	dd03      	ble.n	8008d5a <__multiply+0x8e>
 8008d52:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d05a      	beq.n	8008e10 <__multiply+0x144>
 8008d5a:	6106      	str	r6, [r0, #16]
 8008d5c:	b005      	add	sp, #20
 8008d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d62:	f843 2b04 	str.w	r2, [r3], #4
 8008d66:	e7d8      	b.n	8008d1a <__multiply+0x4e>
 8008d68:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d6c:	f1ba 0f00 	cmp.w	sl, #0
 8008d70:	d023      	beq.n	8008dba <__multiply+0xee>
 8008d72:	46a9      	mov	r9, r5
 8008d74:	f04f 0c00 	mov.w	ip, #0
 8008d78:	f104 0e14 	add.w	lr, r4, #20
 8008d7c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d80:	f8d9 3000 	ldr.w	r3, [r9]
 8008d84:	fa1f fb87 	uxth.w	fp, r7
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d8e:	4463      	add	r3, ip
 8008d90:	f8d9 c000 	ldr.w	ip, [r9]
 8008d94:	0c3f      	lsrs	r7, r7, #16
 8008d96:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d9a:	fb0a c707 	mla	r7, sl, r7, ip
 8008d9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008da8:	4572      	cmp	r2, lr
 8008daa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008dae:	f849 3b04 	str.w	r3, [r9], #4
 8008db2:	d8e3      	bhi.n	8008d7c <__multiply+0xb0>
 8008db4:	9b01      	ldr	r3, [sp, #4]
 8008db6:	f845 c003 	str.w	ip, [r5, r3]
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	3104      	adds	r1, #4
 8008dbe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dc2:	f1b9 0f00 	cmp.w	r9, #0
 8008dc6:	d021      	beq.n	8008e0c <__multiply+0x140>
 8008dc8:	46ae      	mov	lr, r5
 8008dca:	f04f 0a00 	mov.w	sl, #0
 8008dce:	682b      	ldr	r3, [r5, #0]
 8008dd0:	f104 0c14 	add.w	ip, r4, #20
 8008dd4:	f8bc b000 	ldrh.w	fp, [ip]
 8008dd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	fb09 770b 	mla	r7, r9, fp, r7
 8008de2:	4457      	add	r7, sl
 8008de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008de8:	f84e 3b04 	str.w	r3, [lr], #4
 8008dec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008df0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008df4:	f8be 3000 	ldrh.w	r3, [lr]
 8008df8:	4562      	cmp	r2, ip
 8008dfa:	fb09 330a 	mla	r3, r9, sl, r3
 8008dfe:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e06:	d8e5      	bhi.n	8008dd4 <__multiply+0x108>
 8008e08:	9f01      	ldr	r7, [sp, #4]
 8008e0a:	51eb      	str	r3, [r5, r7]
 8008e0c:	3504      	adds	r5, #4
 8008e0e:	e79a      	b.n	8008d46 <__multiply+0x7a>
 8008e10:	3e01      	subs	r6, #1
 8008e12:	e79c      	b.n	8008d4e <__multiply+0x82>
 8008e14:	0800b4e0 	.word	0x0800b4e0
 8008e18:	0800b4f1 	.word	0x0800b4f1

08008e1c <__pow5mult>:
 8008e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e20:	4615      	mov	r5, r2
 8008e22:	f012 0203 	ands.w	r2, r2, #3
 8008e26:	4607      	mov	r7, r0
 8008e28:	460e      	mov	r6, r1
 8008e2a:	d007      	beq.n	8008e3c <__pow5mult+0x20>
 8008e2c:	4c25      	ldr	r4, [pc, #148]	@ (8008ec4 <__pow5mult+0xa8>)
 8008e2e:	3a01      	subs	r2, #1
 8008e30:	2300      	movs	r3, #0
 8008e32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e36:	f7ff fe57 	bl	8008ae8 <__multadd>
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	10ad      	asrs	r5, r5, #2
 8008e3e:	d03d      	beq.n	8008ebc <__pow5mult+0xa0>
 8008e40:	69fc      	ldr	r4, [r7, #28]
 8008e42:	b97c      	cbnz	r4, 8008e64 <__pow5mult+0x48>
 8008e44:	2010      	movs	r0, #16
 8008e46:	f7ff fd37 	bl	80088b8 <malloc>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	61f8      	str	r0, [r7, #28]
 8008e4e:	b928      	cbnz	r0, 8008e5c <__pow5mult+0x40>
 8008e50:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec8 <__pow5mult+0xac>)
 8008e56:	481d      	ldr	r0, [pc, #116]	@ (8008ecc <__pow5mult+0xb0>)
 8008e58:	f001 faca 	bl	800a3f0 <__assert_func>
 8008e5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e60:	6004      	str	r4, [r0, #0]
 8008e62:	60c4      	str	r4, [r0, #12]
 8008e64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e6c:	b94c      	cbnz	r4, 8008e82 <__pow5mult+0x66>
 8008e6e:	f240 2171 	movw	r1, #625	@ 0x271
 8008e72:	4638      	mov	r0, r7
 8008e74:	f7ff ff14 	bl	8008ca0 <__i2b>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e80:	6003      	str	r3, [r0, #0]
 8008e82:	f04f 0900 	mov.w	r9, #0
 8008e86:	07eb      	lsls	r3, r5, #31
 8008e88:	d50a      	bpl.n	8008ea0 <__pow5mult+0x84>
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff ff1c 	bl	8008ccc <__multiply>
 8008e94:	4680      	mov	r8, r0
 8008e96:	4631      	mov	r1, r6
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff fe03 	bl	8008aa4 <_Bfree>
 8008e9e:	4646      	mov	r6, r8
 8008ea0:	106d      	asrs	r5, r5, #1
 8008ea2:	d00b      	beq.n	8008ebc <__pow5mult+0xa0>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	b938      	cbnz	r0, 8008eb8 <__pow5mult+0x9c>
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	4621      	mov	r1, r4
 8008eac:	4638      	mov	r0, r7
 8008eae:	f7ff ff0d 	bl	8008ccc <__multiply>
 8008eb2:	6020      	str	r0, [r4, #0]
 8008eb4:	f8c0 9000 	str.w	r9, [r0]
 8008eb8:	4604      	mov	r4, r0
 8008eba:	e7e4      	b.n	8008e86 <__pow5mult+0x6a>
 8008ebc:	4630      	mov	r0, r6
 8008ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec2:	bf00      	nop
 8008ec4:	0800b54c 	.word	0x0800b54c
 8008ec8:	0800b471 	.word	0x0800b471
 8008ecc:	0800b4f1 	.word	0x0800b4f1

08008ed0 <__lshift>:
 8008ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4607      	mov	r7, r0
 8008ed8:	4691      	mov	r9, r2
 8008eda:	6923      	ldr	r3, [r4, #16]
 8008edc:	6849      	ldr	r1, [r1, #4]
 8008ede:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ee8:	f108 0601 	add.w	r6, r8, #1
 8008eec:	42b3      	cmp	r3, r6
 8008eee:	db0b      	blt.n	8008f08 <__lshift+0x38>
 8008ef0:	4638      	mov	r0, r7
 8008ef2:	f7ff fd97 	bl	8008a24 <_Balloc>
 8008ef6:	4605      	mov	r5, r0
 8008ef8:	b948      	cbnz	r0, 8008f0e <__lshift+0x3e>
 8008efa:	4602      	mov	r2, r0
 8008efc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f00:	4b27      	ldr	r3, [pc, #156]	@ (8008fa0 <__lshift+0xd0>)
 8008f02:	4828      	ldr	r0, [pc, #160]	@ (8008fa4 <__lshift+0xd4>)
 8008f04:	f001 fa74 	bl	800a3f0 <__assert_func>
 8008f08:	3101      	adds	r1, #1
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	e7ee      	b.n	8008eec <__lshift+0x1c>
 8008f0e:	2300      	movs	r3, #0
 8008f10:	f100 0114 	add.w	r1, r0, #20
 8008f14:	f100 0210 	add.w	r2, r0, #16
 8008f18:	4618      	mov	r0, r3
 8008f1a:	4553      	cmp	r3, sl
 8008f1c:	db33      	blt.n	8008f86 <__lshift+0xb6>
 8008f1e:	6920      	ldr	r0, [r4, #16]
 8008f20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f24:	f104 0314 	add.w	r3, r4, #20
 8008f28:	f019 091f 	ands.w	r9, r9, #31
 8008f2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f34:	d02b      	beq.n	8008f8e <__lshift+0xbe>
 8008f36:	468a      	mov	sl, r1
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f1c9 0e20 	rsb	lr, r9, #32
 8008f3e:	6818      	ldr	r0, [r3, #0]
 8008f40:	fa00 f009 	lsl.w	r0, r0, r9
 8008f44:	4310      	orrs	r0, r2
 8008f46:	f84a 0b04 	str.w	r0, [sl], #4
 8008f4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f4e:	459c      	cmp	ip, r3
 8008f50:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f54:	d8f3      	bhi.n	8008f3e <__lshift+0x6e>
 8008f56:	ebac 0304 	sub.w	r3, ip, r4
 8008f5a:	3b15      	subs	r3, #21
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	3304      	adds	r3, #4
 8008f62:	f104 0015 	add.w	r0, r4, #21
 8008f66:	4584      	cmp	ip, r0
 8008f68:	bf38      	it	cc
 8008f6a:	2304      	movcc	r3, #4
 8008f6c:	50ca      	str	r2, [r1, r3]
 8008f6e:	b10a      	cbz	r2, 8008f74 <__lshift+0xa4>
 8008f70:	f108 0602 	add.w	r6, r8, #2
 8008f74:	3e01      	subs	r6, #1
 8008f76:	4638      	mov	r0, r7
 8008f78:	4621      	mov	r1, r4
 8008f7a:	612e      	str	r6, [r5, #16]
 8008f7c:	f7ff fd92 	bl	8008aa4 <_Bfree>
 8008f80:	4628      	mov	r0, r5
 8008f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f86:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	e7c5      	b.n	8008f1a <__lshift+0x4a>
 8008f8e:	3904      	subs	r1, #4
 8008f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f94:	459c      	cmp	ip, r3
 8008f96:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f9a:	d8f9      	bhi.n	8008f90 <__lshift+0xc0>
 8008f9c:	e7ea      	b.n	8008f74 <__lshift+0xa4>
 8008f9e:	bf00      	nop
 8008fa0:	0800b4e0 	.word	0x0800b4e0
 8008fa4:	0800b4f1 	.word	0x0800b4f1

08008fa8 <__mcmp>:
 8008fa8:	4603      	mov	r3, r0
 8008faa:	690a      	ldr	r2, [r1, #16]
 8008fac:	6900      	ldr	r0, [r0, #16]
 8008fae:	b530      	push	{r4, r5, lr}
 8008fb0:	1a80      	subs	r0, r0, r2
 8008fb2:	d10e      	bne.n	8008fd2 <__mcmp+0x2a>
 8008fb4:	3314      	adds	r3, #20
 8008fb6:	3114      	adds	r1, #20
 8008fb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fbc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fc0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fc4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fc8:	4295      	cmp	r5, r2
 8008fca:	d003      	beq.n	8008fd4 <__mcmp+0x2c>
 8008fcc:	d205      	bcs.n	8008fda <__mcmp+0x32>
 8008fce:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd2:	bd30      	pop	{r4, r5, pc}
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	d3f3      	bcc.n	8008fc0 <__mcmp+0x18>
 8008fd8:	e7fb      	b.n	8008fd2 <__mcmp+0x2a>
 8008fda:	2001      	movs	r0, #1
 8008fdc:	e7f9      	b.n	8008fd2 <__mcmp+0x2a>
	...

08008fe0 <__mdiff>:
 8008fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe4:	4689      	mov	r9, r1
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	4611      	mov	r1, r2
 8008fea:	4648      	mov	r0, r9
 8008fec:	4614      	mov	r4, r2
 8008fee:	f7ff ffdb 	bl	8008fa8 <__mcmp>
 8008ff2:	1e05      	subs	r5, r0, #0
 8008ff4:	d112      	bne.n	800901c <__mdiff+0x3c>
 8008ff6:	4629      	mov	r1, r5
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7ff fd13 	bl	8008a24 <_Balloc>
 8008ffe:	4602      	mov	r2, r0
 8009000:	b928      	cbnz	r0, 800900e <__mdiff+0x2e>
 8009002:	f240 2137 	movw	r1, #567	@ 0x237
 8009006:	4b3e      	ldr	r3, [pc, #248]	@ (8009100 <__mdiff+0x120>)
 8009008:	483e      	ldr	r0, [pc, #248]	@ (8009104 <__mdiff+0x124>)
 800900a:	f001 f9f1 	bl	800a3f0 <__assert_func>
 800900e:	2301      	movs	r3, #1
 8009010:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009014:	4610      	mov	r0, r2
 8009016:	b003      	add	sp, #12
 8009018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901c:	bfbc      	itt	lt
 800901e:	464b      	movlt	r3, r9
 8009020:	46a1      	movlt	r9, r4
 8009022:	4630      	mov	r0, r6
 8009024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009028:	bfba      	itte	lt
 800902a:	461c      	movlt	r4, r3
 800902c:	2501      	movlt	r5, #1
 800902e:	2500      	movge	r5, #0
 8009030:	f7ff fcf8 	bl	8008a24 <_Balloc>
 8009034:	4602      	mov	r2, r0
 8009036:	b918      	cbnz	r0, 8009040 <__mdiff+0x60>
 8009038:	f240 2145 	movw	r1, #581	@ 0x245
 800903c:	4b30      	ldr	r3, [pc, #192]	@ (8009100 <__mdiff+0x120>)
 800903e:	e7e3      	b.n	8009008 <__mdiff+0x28>
 8009040:	f100 0b14 	add.w	fp, r0, #20
 8009044:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009048:	f109 0310 	add.w	r3, r9, #16
 800904c:	60c5      	str	r5, [r0, #12]
 800904e:	f04f 0c00 	mov.w	ip, #0
 8009052:	f109 0514 	add.w	r5, r9, #20
 8009056:	46d9      	mov	r9, fp
 8009058:	6926      	ldr	r6, [r4, #16]
 800905a:	f104 0e14 	add.w	lr, r4, #20
 800905e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009062:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800906e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009072:	b281      	uxth	r1, r0
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	fa1f f38a 	uxth.w	r3, sl
 800907a:	1a5b      	subs	r3, r3, r1
 800907c:	0c00      	lsrs	r0, r0, #16
 800907e:	4463      	add	r3, ip
 8009080:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009084:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009088:	b29b      	uxth	r3, r3
 800908a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800908e:	4576      	cmp	r6, lr
 8009090:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009094:	f849 3b04 	str.w	r3, [r9], #4
 8009098:	d8e6      	bhi.n	8009068 <__mdiff+0x88>
 800909a:	1b33      	subs	r3, r6, r4
 800909c:	3b15      	subs	r3, #21
 800909e:	f023 0303 	bic.w	r3, r3, #3
 80090a2:	3415      	adds	r4, #21
 80090a4:	3304      	adds	r3, #4
 80090a6:	42a6      	cmp	r6, r4
 80090a8:	bf38      	it	cc
 80090aa:	2304      	movcc	r3, #4
 80090ac:	441d      	add	r5, r3
 80090ae:	445b      	add	r3, fp
 80090b0:	461e      	mov	r6, r3
 80090b2:	462c      	mov	r4, r5
 80090b4:	4544      	cmp	r4, r8
 80090b6:	d30e      	bcc.n	80090d6 <__mdiff+0xf6>
 80090b8:	f108 0103 	add.w	r1, r8, #3
 80090bc:	1b49      	subs	r1, r1, r5
 80090be:	f021 0103 	bic.w	r1, r1, #3
 80090c2:	3d03      	subs	r5, #3
 80090c4:	45a8      	cmp	r8, r5
 80090c6:	bf38      	it	cc
 80090c8:	2100      	movcc	r1, #0
 80090ca:	440b      	add	r3, r1
 80090cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090d0:	b199      	cbz	r1, 80090fa <__mdiff+0x11a>
 80090d2:	6117      	str	r7, [r2, #16]
 80090d4:	e79e      	b.n	8009014 <__mdiff+0x34>
 80090d6:	46e6      	mov	lr, ip
 80090d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80090dc:	fa1f fc81 	uxth.w	ip, r1
 80090e0:	44f4      	add	ip, lr
 80090e2:	0c08      	lsrs	r0, r1, #16
 80090e4:	4471      	add	r1, lr
 80090e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090ea:	b289      	uxth	r1, r1
 80090ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090f4:	f846 1b04 	str.w	r1, [r6], #4
 80090f8:	e7dc      	b.n	80090b4 <__mdiff+0xd4>
 80090fa:	3f01      	subs	r7, #1
 80090fc:	e7e6      	b.n	80090cc <__mdiff+0xec>
 80090fe:	bf00      	nop
 8009100:	0800b4e0 	.word	0x0800b4e0
 8009104:	0800b4f1 	.word	0x0800b4f1

08009108 <__ulp>:
 8009108:	4b0e      	ldr	r3, [pc, #56]	@ (8009144 <__ulp+0x3c>)
 800910a:	400b      	ands	r3, r1
 800910c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009110:	2b00      	cmp	r3, #0
 8009112:	dc08      	bgt.n	8009126 <__ulp+0x1e>
 8009114:	425b      	negs	r3, r3
 8009116:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800911a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800911e:	da04      	bge.n	800912a <__ulp+0x22>
 8009120:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009124:	4113      	asrs	r3, r2
 8009126:	2200      	movs	r2, #0
 8009128:	e008      	b.n	800913c <__ulp+0x34>
 800912a:	f1a2 0314 	sub.w	r3, r2, #20
 800912e:	2b1e      	cmp	r3, #30
 8009130:	bfd6      	itet	le
 8009132:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009136:	2201      	movgt	r2, #1
 8009138:	40da      	lsrle	r2, r3
 800913a:	2300      	movs	r3, #0
 800913c:	4619      	mov	r1, r3
 800913e:	4610      	mov	r0, r2
 8009140:	4770      	bx	lr
 8009142:	bf00      	nop
 8009144:	7ff00000 	.word	0x7ff00000

08009148 <__b2d>:
 8009148:	6902      	ldr	r2, [r0, #16]
 800914a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914c:	f100 0614 	add.w	r6, r0, #20
 8009150:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009154:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009158:	4f1e      	ldr	r7, [pc, #120]	@ (80091d4 <__b2d+0x8c>)
 800915a:	4620      	mov	r0, r4
 800915c:	f7ff fd54 	bl	8008c08 <__hi0bits>
 8009160:	4603      	mov	r3, r0
 8009162:	f1c0 0020 	rsb	r0, r0, #32
 8009166:	2b0a      	cmp	r3, #10
 8009168:	f1a2 0504 	sub.w	r5, r2, #4
 800916c:	6008      	str	r0, [r1, #0]
 800916e:	dc12      	bgt.n	8009196 <__b2d+0x4e>
 8009170:	42ae      	cmp	r6, r5
 8009172:	bf2c      	ite	cs
 8009174:	2200      	movcs	r2, #0
 8009176:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800917a:	f1c3 0c0b 	rsb	ip, r3, #11
 800917e:	3315      	adds	r3, #21
 8009180:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009184:	fa04 f303 	lsl.w	r3, r4, r3
 8009188:	fa22 f20c 	lsr.w	r2, r2, ip
 800918c:	ea4e 0107 	orr.w	r1, lr, r7
 8009190:	431a      	orrs	r2, r3
 8009192:	4610      	mov	r0, r2
 8009194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009196:	42ae      	cmp	r6, r5
 8009198:	bf36      	itet	cc
 800919a:	f1a2 0508 	subcc.w	r5, r2, #8
 800919e:	2200      	movcs	r2, #0
 80091a0:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80091a4:	3b0b      	subs	r3, #11
 80091a6:	d012      	beq.n	80091ce <__b2d+0x86>
 80091a8:	f1c3 0720 	rsb	r7, r3, #32
 80091ac:	fa22 f107 	lsr.w	r1, r2, r7
 80091b0:	409c      	lsls	r4, r3
 80091b2:	430c      	orrs	r4, r1
 80091b4:	42b5      	cmp	r5, r6
 80091b6:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80091ba:	bf94      	ite	ls
 80091bc:	2400      	movls	r4, #0
 80091be:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80091c2:	409a      	lsls	r2, r3
 80091c4:	40fc      	lsrs	r4, r7
 80091c6:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80091ca:	4322      	orrs	r2, r4
 80091cc:	e7e1      	b.n	8009192 <__b2d+0x4a>
 80091ce:	ea44 0107 	orr.w	r1, r4, r7
 80091d2:	e7de      	b.n	8009192 <__b2d+0x4a>
 80091d4:	3ff00000 	.word	0x3ff00000

080091d8 <__d2b>:
 80091d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80091dc:	2101      	movs	r1, #1
 80091de:	4690      	mov	r8, r2
 80091e0:	4699      	mov	r9, r3
 80091e2:	9e08      	ldr	r6, [sp, #32]
 80091e4:	f7ff fc1e 	bl	8008a24 <_Balloc>
 80091e8:	4604      	mov	r4, r0
 80091ea:	b930      	cbnz	r0, 80091fa <__d2b+0x22>
 80091ec:	4602      	mov	r2, r0
 80091ee:	f240 310f 	movw	r1, #783	@ 0x30f
 80091f2:	4b23      	ldr	r3, [pc, #140]	@ (8009280 <__d2b+0xa8>)
 80091f4:	4823      	ldr	r0, [pc, #140]	@ (8009284 <__d2b+0xac>)
 80091f6:	f001 f8fb 	bl	800a3f0 <__assert_func>
 80091fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80091fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009202:	b10d      	cbz	r5, 8009208 <__d2b+0x30>
 8009204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	f1b8 0300 	subs.w	r3, r8, #0
 800920e:	d024      	beq.n	800925a <__d2b+0x82>
 8009210:	4668      	mov	r0, sp
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	f7ff fd17 	bl	8008c46 <__lo0bits>
 8009218:	e9dd 1200 	ldrd	r1, r2, [sp]
 800921c:	b1d8      	cbz	r0, 8009256 <__d2b+0x7e>
 800921e:	f1c0 0320 	rsb	r3, r0, #32
 8009222:	fa02 f303 	lsl.w	r3, r2, r3
 8009226:	430b      	orrs	r3, r1
 8009228:	40c2      	lsrs	r2, r0
 800922a:	6163      	str	r3, [r4, #20]
 800922c:	9201      	str	r2, [sp, #4]
 800922e:	9b01      	ldr	r3, [sp, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	bf0c      	ite	eq
 8009234:	2201      	moveq	r2, #1
 8009236:	2202      	movne	r2, #2
 8009238:	61a3      	str	r3, [r4, #24]
 800923a:	6122      	str	r2, [r4, #16]
 800923c:	b1ad      	cbz	r5, 800926a <__d2b+0x92>
 800923e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009242:	4405      	add	r5, r0
 8009244:	6035      	str	r5, [r6, #0]
 8009246:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800924a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800924c:	6018      	str	r0, [r3, #0]
 800924e:	4620      	mov	r0, r4
 8009250:	b002      	add	sp, #8
 8009252:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009256:	6161      	str	r1, [r4, #20]
 8009258:	e7e9      	b.n	800922e <__d2b+0x56>
 800925a:	a801      	add	r0, sp, #4
 800925c:	f7ff fcf3 	bl	8008c46 <__lo0bits>
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	6163      	str	r3, [r4, #20]
 8009266:	3020      	adds	r0, #32
 8009268:	e7e7      	b.n	800923a <__d2b+0x62>
 800926a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800926e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009272:	6030      	str	r0, [r6, #0]
 8009274:	6918      	ldr	r0, [r3, #16]
 8009276:	f7ff fcc7 	bl	8008c08 <__hi0bits>
 800927a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800927e:	e7e4      	b.n	800924a <__d2b+0x72>
 8009280:	0800b4e0 	.word	0x0800b4e0
 8009284:	0800b4f1 	.word	0x0800b4f1

08009288 <__ratio>:
 8009288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928c:	b085      	sub	sp, #20
 800928e:	e9cd 1000 	strd	r1, r0, [sp]
 8009292:	a902      	add	r1, sp, #8
 8009294:	f7ff ff58 	bl	8009148 <__b2d>
 8009298:	468b      	mov	fp, r1
 800929a:	4606      	mov	r6, r0
 800929c:	460f      	mov	r7, r1
 800929e:	9800      	ldr	r0, [sp, #0]
 80092a0:	a903      	add	r1, sp, #12
 80092a2:	f7ff ff51 	bl	8009148 <__b2d>
 80092a6:	460d      	mov	r5, r1
 80092a8:	9b01      	ldr	r3, [sp, #4]
 80092aa:	4689      	mov	r9, r1
 80092ac:	6919      	ldr	r1, [r3, #16]
 80092ae:	9b00      	ldr	r3, [sp, #0]
 80092b0:	4604      	mov	r4, r0
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	4630      	mov	r0, r6
 80092b6:	1ac9      	subs	r1, r1, r3
 80092b8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092bc:	1a9b      	subs	r3, r3, r2
 80092be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfcd      	iteet	gt
 80092c6:	463a      	movgt	r2, r7
 80092c8:	462a      	movle	r2, r5
 80092ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092ce:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80092d2:	bfd8      	it	le
 80092d4:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092d8:	464b      	mov	r3, r9
 80092da:	4622      	mov	r2, r4
 80092dc:	4659      	mov	r1, fp
 80092de:	f7f7 fa25 	bl	800072c <__aeabi_ddiv>
 80092e2:	b005      	add	sp, #20
 80092e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092e8 <__copybits>:
 80092e8:	3901      	subs	r1, #1
 80092ea:	b570      	push	{r4, r5, r6, lr}
 80092ec:	1149      	asrs	r1, r1, #5
 80092ee:	6914      	ldr	r4, [r2, #16]
 80092f0:	3101      	adds	r1, #1
 80092f2:	f102 0314 	add.w	r3, r2, #20
 80092f6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80092fa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80092fe:	1f05      	subs	r5, r0, #4
 8009300:	42a3      	cmp	r3, r4
 8009302:	d30c      	bcc.n	800931e <__copybits+0x36>
 8009304:	1aa3      	subs	r3, r4, r2
 8009306:	3b11      	subs	r3, #17
 8009308:	f023 0303 	bic.w	r3, r3, #3
 800930c:	3211      	adds	r2, #17
 800930e:	42a2      	cmp	r2, r4
 8009310:	bf88      	it	hi
 8009312:	2300      	movhi	r3, #0
 8009314:	4418      	add	r0, r3
 8009316:	2300      	movs	r3, #0
 8009318:	4288      	cmp	r0, r1
 800931a:	d305      	bcc.n	8009328 <__copybits+0x40>
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	f853 6b04 	ldr.w	r6, [r3], #4
 8009322:	f845 6f04 	str.w	r6, [r5, #4]!
 8009326:	e7eb      	b.n	8009300 <__copybits+0x18>
 8009328:	f840 3b04 	str.w	r3, [r0], #4
 800932c:	e7f4      	b.n	8009318 <__copybits+0x30>

0800932e <__any_on>:
 800932e:	f100 0214 	add.w	r2, r0, #20
 8009332:	6900      	ldr	r0, [r0, #16]
 8009334:	114b      	asrs	r3, r1, #5
 8009336:	4298      	cmp	r0, r3
 8009338:	b510      	push	{r4, lr}
 800933a:	db11      	blt.n	8009360 <__any_on+0x32>
 800933c:	dd0a      	ble.n	8009354 <__any_on+0x26>
 800933e:	f011 011f 	ands.w	r1, r1, #31
 8009342:	d007      	beq.n	8009354 <__any_on+0x26>
 8009344:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009348:	fa24 f001 	lsr.w	r0, r4, r1
 800934c:	fa00 f101 	lsl.w	r1, r0, r1
 8009350:	428c      	cmp	r4, r1
 8009352:	d10b      	bne.n	800936c <__any_on+0x3e>
 8009354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009358:	4293      	cmp	r3, r2
 800935a:	d803      	bhi.n	8009364 <__any_on+0x36>
 800935c:	2000      	movs	r0, #0
 800935e:	bd10      	pop	{r4, pc}
 8009360:	4603      	mov	r3, r0
 8009362:	e7f7      	b.n	8009354 <__any_on+0x26>
 8009364:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009368:	2900      	cmp	r1, #0
 800936a:	d0f5      	beq.n	8009358 <__any_on+0x2a>
 800936c:	2001      	movs	r0, #1
 800936e:	e7f6      	b.n	800935e <__any_on+0x30>

08009370 <sulp>:
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	460f      	mov	r7, r1
 8009376:	4690      	mov	r8, r2
 8009378:	f7ff fec6 	bl	8009108 <__ulp>
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	f1b8 0f00 	cmp.w	r8, #0
 8009384:	d011      	beq.n	80093aa <sulp+0x3a>
 8009386:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800938a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800938e:	2b00      	cmp	r3, #0
 8009390:	dd0b      	ble.n	80093aa <sulp+0x3a>
 8009392:	2400      	movs	r4, #0
 8009394:	051b      	lsls	r3, r3, #20
 8009396:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800939a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800939e:	4622      	mov	r2, r4
 80093a0:	462b      	mov	r3, r5
 80093a2:	f7f7 f899 	bl	80004d8 <__aeabi_dmul>
 80093a6:	4604      	mov	r4, r0
 80093a8:	460d      	mov	r5, r1
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093b2:	0000      	movs	r0, r0
 80093b4:	0000      	movs	r0, r0
	...

080093b8 <_strtod_l>:
 80093b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093bc:	b09f      	sub	sp, #124	@ 0x7c
 80093be:	9217      	str	r2, [sp, #92]	@ 0x5c
 80093c0:	2200      	movs	r2, #0
 80093c2:	460c      	mov	r4, r1
 80093c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80093c6:	f04f 0a00 	mov.w	sl, #0
 80093ca:	f04f 0b00 	mov.w	fp, #0
 80093ce:	460a      	mov	r2, r1
 80093d0:	9005      	str	r0, [sp, #20]
 80093d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80093d4:	7811      	ldrb	r1, [r2, #0]
 80093d6:	292b      	cmp	r1, #43	@ 0x2b
 80093d8:	d048      	beq.n	800946c <_strtod_l+0xb4>
 80093da:	d836      	bhi.n	800944a <_strtod_l+0x92>
 80093dc:	290d      	cmp	r1, #13
 80093de:	d830      	bhi.n	8009442 <_strtod_l+0x8a>
 80093e0:	2908      	cmp	r1, #8
 80093e2:	d830      	bhi.n	8009446 <_strtod_l+0x8e>
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d039      	beq.n	800945c <_strtod_l+0xa4>
 80093e8:	2200      	movs	r2, #0
 80093ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80093ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80093ee:	782a      	ldrb	r2, [r5, #0]
 80093f0:	2a30      	cmp	r2, #48	@ 0x30
 80093f2:	f040 80b1 	bne.w	8009558 <_strtod_l+0x1a0>
 80093f6:	786a      	ldrb	r2, [r5, #1]
 80093f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80093fc:	2a58      	cmp	r2, #88	@ 0x58
 80093fe:	d16c      	bne.n	80094da <_strtod_l+0x122>
 8009400:	9302      	str	r3, [sp, #8]
 8009402:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009404:	4a8e      	ldr	r2, [pc, #568]	@ (8009640 <_strtod_l+0x288>)
 8009406:	9301      	str	r3, [sp, #4]
 8009408:	ab1a      	add	r3, sp, #104	@ 0x68
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	9805      	ldr	r0, [sp, #20]
 800940e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009410:	a919      	add	r1, sp, #100	@ 0x64
 8009412:	f001 f887 	bl	800a524 <__gethex>
 8009416:	f010 060f 	ands.w	r6, r0, #15
 800941a:	4604      	mov	r4, r0
 800941c:	d005      	beq.n	800942a <_strtod_l+0x72>
 800941e:	2e06      	cmp	r6, #6
 8009420:	d126      	bne.n	8009470 <_strtod_l+0xb8>
 8009422:	2300      	movs	r3, #0
 8009424:	3501      	adds	r5, #1
 8009426:	9519      	str	r5, [sp, #100]	@ 0x64
 8009428:	930b      	str	r3, [sp, #44]	@ 0x2c
 800942a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 8584 	bne.w	8009f3a <_strtod_l+0xb82>
 8009432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009434:	b1bb      	cbz	r3, 8009466 <_strtod_l+0xae>
 8009436:	4650      	mov	r0, sl
 8009438:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800943c:	b01f      	add	sp, #124	@ 0x7c
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	2920      	cmp	r1, #32
 8009444:	d1d0      	bne.n	80093e8 <_strtod_l+0x30>
 8009446:	3201      	adds	r2, #1
 8009448:	e7c3      	b.n	80093d2 <_strtod_l+0x1a>
 800944a:	292d      	cmp	r1, #45	@ 0x2d
 800944c:	d1cc      	bne.n	80093e8 <_strtod_l+0x30>
 800944e:	2101      	movs	r1, #1
 8009450:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009452:	1c51      	adds	r1, r2, #1
 8009454:	9119      	str	r1, [sp, #100]	@ 0x64
 8009456:	7852      	ldrb	r2, [r2, #1]
 8009458:	2a00      	cmp	r2, #0
 800945a:	d1c7      	bne.n	80093ec <_strtod_l+0x34>
 800945c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800945e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009460:	2b00      	cmp	r3, #0
 8009462:	f040 8568 	bne.w	8009f36 <_strtod_l+0xb7e>
 8009466:	4650      	mov	r0, sl
 8009468:	4659      	mov	r1, fp
 800946a:	e7e7      	b.n	800943c <_strtod_l+0x84>
 800946c:	2100      	movs	r1, #0
 800946e:	e7ef      	b.n	8009450 <_strtod_l+0x98>
 8009470:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009472:	b13a      	cbz	r2, 8009484 <_strtod_l+0xcc>
 8009474:	2135      	movs	r1, #53	@ 0x35
 8009476:	a81c      	add	r0, sp, #112	@ 0x70
 8009478:	f7ff ff36 	bl	80092e8 <__copybits>
 800947c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800947e:	9805      	ldr	r0, [sp, #20]
 8009480:	f7ff fb10 	bl	8008aa4 <_Bfree>
 8009484:	3e01      	subs	r6, #1
 8009486:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009488:	2e04      	cmp	r6, #4
 800948a:	d806      	bhi.n	800949a <_strtod_l+0xe2>
 800948c:	e8df f006 	tbb	[pc, r6]
 8009490:	201d0314 	.word	0x201d0314
 8009494:	14          	.byte	0x14
 8009495:	00          	.byte	0x00
 8009496:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800949a:	05e1      	lsls	r1, r4, #23
 800949c:	bf48      	it	mi
 800949e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80094a2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094a6:	0d1b      	lsrs	r3, r3, #20
 80094a8:	051b      	lsls	r3, r3, #20
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1bd      	bne.n	800942a <_strtod_l+0x72>
 80094ae:	f7fe fb29 	bl	8007b04 <__errno>
 80094b2:	2322      	movs	r3, #34	@ 0x22
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	e7b8      	b.n	800942a <_strtod_l+0x72>
 80094b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80094bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80094c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80094c4:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094c8:	e7e7      	b.n	800949a <_strtod_l+0xe2>
 80094ca:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8009644 <_strtod_l+0x28c>
 80094ce:	e7e4      	b.n	800949a <_strtod_l+0xe2>
 80094d0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80094d4:	f04f 3aff 	mov.w	sl, #4294967295
 80094d8:	e7df      	b.n	800949a <_strtod_l+0xe2>
 80094da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	9219      	str	r2, [sp, #100]	@ 0x64
 80094e0:	785b      	ldrb	r3, [r3, #1]
 80094e2:	2b30      	cmp	r3, #48	@ 0x30
 80094e4:	d0f9      	beq.n	80094da <_strtod_l+0x122>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d09f      	beq.n	800942a <_strtod_l+0x72>
 80094ea:	2301      	movs	r3, #1
 80094ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094f0:	220a      	movs	r2, #10
 80094f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80094f4:	2300      	movs	r3, #0
 80094f6:	461f      	mov	r7, r3
 80094f8:	9308      	str	r3, [sp, #32]
 80094fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80094fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80094fe:	7805      	ldrb	r5, [r0, #0]
 8009500:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009504:	b2d9      	uxtb	r1, r3
 8009506:	2909      	cmp	r1, #9
 8009508:	d928      	bls.n	800955c <_strtod_l+0x1a4>
 800950a:	2201      	movs	r2, #1
 800950c:	494e      	ldr	r1, [pc, #312]	@ (8009648 <_strtod_l+0x290>)
 800950e:	f7fe fa9c 	bl	8007a4a <strncmp>
 8009512:	2800      	cmp	r0, #0
 8009514:	d032      	beq.n	800957c <_strtod_l+0x1c4>
 8009516:	2000      	movs	r0, #0
 8009518:	462a      	mov	r2, r5
 800951a:	4681      	mov	r9, r0
 800951c:	463d      	mov	r5, r7
 800951e:	4603      	mov	r3, r0
 8009520:	2a65      	cmp	r2, #101	@ 0x65
 8009522:	d001      	beq.n	8009528 <_strtod_l+0x170>
 8009524:	2a45      	cmp	r2, #69	@ 0x45
 8009526:	d114      	bne.n	8009552 <_strtod_l+0x19a>
 8009528:	b91d      	cbnz	r5, 8009532 <_strtod_l+0x17a>
 800952a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800952c:	4302      	orrs	r2, r0
 800952e:	d095      	beq.n	800945c <_strtod_l+0xa4>
 8009530:	2500      	movs	r5, #0
 8009532:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009534:	1c62      	adds	r2, r4, #1
 8009536:	9219      	str	r2, [sp, #100]	@ 0x64
 8009538:	7862      	ldrb	r2, [r4, #1]
 800953a:	2a2b      	cmp	r2, #43	@ 0x2b
 800953c:	d077      	beq.n	800962e <_strtod_l+0x276>
 800953e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009540:	d07b      	beq.n	800963a <_strtod_l+0x282>
 8009542:	f04f 0c00 	mov.w	ip, #0
 8009546:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800954a:	2909      	cmp	r1, #9
 800954c:	f240 8082 	bls.w	8009654 <_strtod_l+0x29c>
 8009550:	9419      	str	r4, [sp, #100]	@ 0x64
 8009552:	f04f 0800 	mov.w	r8, #0
 8009556:	e0a2      	b.n	800969e <_strtod_l+0x2e6>
 8009558:	2300      	movs	r3, #0
 800955a:	e7c7      	b.n	80094ec <_strtod_l+0x134>
 800955c:	2f08      	cmp	r7, #8
 800955e:	bfd5      	itete	le
 8009560:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009562:	9908      	ldrgt	r1, [sp, #32]
 8009564:	fb02 3301 	mlale	r3, r2, r1, r3
 8009568:	fb02 3301 	mlagt	r3, r2, r1, r3
 800956c:	f100 0001 	add.w	r0, r0, #1
 8009570:	bfd4      	ite	le
 8009572:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009574:	9308      	strgt	r3, [sp, #32]
 8009576:	3701      	adds	r7, #1
 8009578:	9019      	str	r0, [sp, #100]	@ 0x64
 800957a:	e7bf      	b.n	80094fc <_strtod_l+0x144>
 800957c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	9219      	str	r2, [sp, #100]	@ 0x64
 8009582:	785a      	ldrb	r2, [r3, #1]
 8009584:	b37f      	cbz	r7, 80095e6 <_strtod_l+0x22e>
 8009586:	4681      	mov	r9, r0
 8009588:	463d      	mov	r5, r7
 800958a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800958e:	2b09      	cmp	r3, #9
 8009590:	d912      	bls.n	80095b8 <_strtod_l+0x200>
 8009592:	2301      	movs	r3, #1
 8009594:	e7c4      	b.n	8009520 <_strtod_l+0x168>
 8009596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009598:	3001      	adds	r0, #1
 800959a:	1c5a      	adds	r2, r3, #1
 800959c:	9219      	str	r2, [sp, #100]	@ 0x64
 800959e:	785a      	ldrb	r2, [r3, #1]
 80095a0:	2a30      	cmp	r2, #48	@ 0x30
 80095a2:	d0f8      	beq.n	8009596 <_strtod_l+0x1de>
 80095a4:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80095a8:	2b08      	cmp	r3, #8
 80095aa:	f200 84cb 	bhi.w	8009f44 <_strtod_l+0xb8c>
 80095ae:	4681      	mov	r9, r0
 80095b0:	2000      	movs	r0, #0
 80095b2:	4605      	mov	r5, r0
 80095b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80095b8:	3a30      	subs	r2, #48	@ 0x30
 80095ba:	f100 0301 	add.w	r3, r0, #1
 80095be:	d02a      	beq.n	8009616 <_strtod_l+0x25e>
 80095c0:	4499      	add	r9, r3
 80095c2:	210a      	movs	r1, #10
 80095c4:	462b      	mov	r3, r5
 80095c6:	eb00 0c05 	add.w	ip, r0, r5
 80095ca:	4563      	cmp	r3, ip
 80095cc:	d10d      	bne.n	80095ea <_strtod_l+0x232>
 80095ce:	1c69      	adds	r1, r5, #1
 80095d0:	4401      	add	r1, r0
 80095d2:	4428      	add	r0, r5
 80095d4:	2808      	cmp	r0, #8
 80095d6:	dc16      	bgt.n	8009606 <_strtod_l+0x24e>
 80095d8:	230a      	movs	r3, #10
 80095da:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80095dc:	fb03 2300 	mla	r3, r3, r0, r2
 80095e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80095e2:	2300      	movs	r3, #0
 80095e4:	e018      	b.n	8009618 <_strtod_l+0x260>
 80095e6:	4638      	mov	r0, r7
 80095e8:	e7da      	b.n	80095a0 <_strtod_l+0x1e8>
 80095ea:	2b08      	cmp	r3, #8
 80095ec:	f103 0301 	add.w	r3, r3, #1
 80095f0:	dc03      	bgt.n	80095fa <_strtod_l+0x242>
 80095f2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80095f4:	434e      	muls	r6, r1
 80095f6:	960a      	str	r6, [sp, #40]	@ 0x28
 80095f8:	e7e7      	b.n	80095ca <_strtod_l+0x212>
 80095fa:	2b10      	cmp	r3, #16
 80095fc:	bfde      	ittt	le
 80095fe:	9e08      	ldrle	r6, [sp, #32]
 8009600:	434e      	mulle	r6, r1
 8009602:	9608      	strle	r6, [sp, #32]
 8009604:	e7e1      	b.n	80095ca <_strtod_l+0x212>
 8009606:	280f      	cmp	r0, #15
 8009608:	dceb      	bgt.n	80095e2 <_strtod_l+0x22a>
 800960a:	230a      	movs	r3, #10
 800960c:	9808      	ldr	r0, [sp, #32]
 800960e:	fb03 2300 	mla	r3, r3, r0, r2
 8009612:	9308      	str	r3, [sp, #32]
 8009614:	e7e5      	b.n	80095e2 <_strtod_l+0x22a>
 8009616:	4629      	mov	r1, r5
 8009618:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800961a:	460d      	mov	r5, r1
 800961c:	1c50      	adds	r0, r2, #1
 800961e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009620:	7852      	ldrb	r2, [r2, #1]
 8009622:	4618      	mov	r0, r3
 8009624:	e7b1      	b.n	800958a <_strtod_l+0x1d2>
 8009626:	f04f 0900 	mov.w	r9, #0
 800962a:	2301      	movs	r3, #1
 800962c:	e77d      	b.n	800952a <_strtod_l+0x172>
 800962e:	f04f 0c00 	mov.w	ip, #0
 8009632:	1ca2      	adds	r2, r4, #2
 8009634:	9219      	str	r2, [sp, #100]	@ 0x64
 8009636:	78a2      	ldrb	r2, [r4, #2]
 8009638:	e785      	b.n	8009546 <_strtod_l+0x18e>
 800963a:	f04f 0c01 	mov.w	ip, #1
 800963e:	e7f8      	b.n	8009632 <_strtod_l+0x27a>
 8009640:	0800b660 	.word	0x0800b660
 8009644:	7ff00000 	.word	0x7ff00000
 8009648:	0800b648 	.word	0x0800b648
 800964c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800964e:	1c51      	adds	r1, r2, #1
 8009650:	9119      	str	r1, [sp, #100]	@ 0x64
 8009652:	7852      	ldrb	r2, [r2, #1]
 8009654:	2a30      	cmp	r2, #48	@ 0x30
 8009656:	d0f9      	beq.n	800964c <_strtod_l+0x294>
 8009658:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800965c:	2908      	cmp	r1, #8
 800965e:	f63f af78 	bhi.w	8009552 <_strtod_l+0x19a>
 8009662:	f04f 080a 	mov.w	r8, #10
 8009666:	3a30      	subs	r2, #48	@ 0x30
 8009668:	920e      	str	r2, [sp, #56]	@ 0x38
 800966a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800966c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800966e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009670:	1c56      	adds	r6, r2, #1
 8009672:	9619      	str	r6, [sp, #100]	@ 0x64
 8009674:	7852      	ldrb	r2, [r2, #1]
 8009676:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800967a:	f1be 0f09 	cmp.w	lr, #9
 800967e:	d939      	bls.n	80096f4 <_strtod_l+0x33c>
 8009680:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009682:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009686:	1a76      	subs	r6, r6, r1
 8009688:	2e08      	cmp	r6, #8
 800968a:	dc03      	bgt.n	8009694 <_strtod_l+0x2dc>
 800968c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800968e:	4588      	cmp	r8, r1
 8009690:	bfa8      	it	ge
 8009692:	4688      	movge	r8, r1
 8009694:	f1bc 0f00 	cmp.w	ip, #0
 8009698:	d001      	beq.n	800969e <_strtod_l+0x2e6>
 800969a:	f1c8 0800 	rsb	r8, r8, #0
 800969e:	2d00      	cmp	r5, #0
 80096a0:	d14e      	bne.n	8009740 <_strtod_l+0x388>
 80096a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096a4:	4308      	orrs	r0, r1
 80096a6:	f47f aec0 	bne.w	800942a <_strtod_l+0x72>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f47f aed6 	bne.w	800945c <_strtod_l+0xa4>
 80096b0:	2a69      	cmp	r2, #105	@ 0x69
 80096b2:	d028      	beq.n	8009706 <_strtod_l+0x34e>
 80096b4:	dc25      	bgt.n	8009702 <_strtod_l+0x34a>
 80096b6:	2a49      	cmp	r2, #73	@ 0x49
 80096b8:	d025      	beq.n	8009706 <_strtod_l+0x34e>
 80096ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80096bc:	f47f aece 	bne.w	800945c <_strtod_l+0xa4>
 80096c0:	499a      	ldr	r1, [pc, #616]	@ (800992c <_strtod_l+0x574>)
 80096c2:	a819      	add	r0, sp, #100	@ 0x64
 80096c4:	f001 f950 	bl	800a968 <__match>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	f43f aec7 	beq.w	800945c <_strtod_l+0xa4>
 80096ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b28      	cmp	r3, #40	@ 0x28
 80096d4:	d12e      	bne.n	8009734 <_strtod_l+0x37c>
 80096d6:	4996      	ldr	r1, [pc, #600]	@ (8009930 <_strtod_l+0x578>)
 80096d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80096da:	a819      	add	r0, sp, #100	@ 0x64
 80096dc:	f001 f958 	bl	800a990 <__hexnan>
 80096e0:	2805      	cmp	r0, #5
 80096e2:	d127      	bne.n	8009734 <_strtod_l+0x37c>
 80096e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80096ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80096ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80096f2:	e69a      	b.n	800942a <_strtod_l+0x72>
 80096f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80096f6:	fb08 2101 	mla	r1, r8, r1, r2
 80096fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80096fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8009700:	e7b5      	b.n	800966e <_strtod_l+0x2b6>
 8009702:	2a6e      	cmp	r2, #110	@ 0x6e
 8009704:	e7da      	b.n	80096bc <_strtod_l+0x304>
 8009706:	498b      	ldr	r1, [pc, #556]	@ (8009934 <_strtod_l+0x57c>)
 8009708:	a819      	add	r0, sp, #100	@ 0x64
 800970a:	f001 f92d 	bl	800a968 <__match>
 800970e:	2800      	cmp	r0, #0
 8009710:	f43f aea4 	beq.w	800945c <_strtod_l+0xa4>
 8009714:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009716:	4988      	ldr	r1, [pc, #544]	@ (8009938 <_strtod_l+0x580>)
 8009718:	3b01      	subs	r3, #1
 800971a:	a819      	add	r0, sp, #100	@ 0x64
 800971c:	9319      	str	r3, [sp, #100]	@ 0x64
 800971e:	f001 f923 	bl	800a968 <__match>
 8009722:	b910      	cbnz	r0, 800972a <_strtod_l+0x372>
 8009724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009726:	3301      	adds	r3, #1
 8009728:	9319      	str	r3, [sp, #100]	@ 0x64
 800972a:	f04f 0a00 	mov.w	sl, #0
 800972e:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800993c <_strtod_l+0x584>
 8009732:	e67a      	b.n	800942a <_strtod_l+0x72>
 8009734:	4882      	ldr	r0, [pc, #520]	@ (8009940 <_strtod_l+0x588>)
 8009736:	f000 fe55 	bl	800a3e4 <nan>
 800973a:	4682      	mov	sl, r0
 800973c:	468b      	mov	fp, r1
 800973e:	e674      	b.n	800942a <_strtod_l+0x72>
 8009740:	eba8 0309 	sub.w	r3, r8, r9
 8009744:	2f00      	cmp	r7, #0
 8009746:	bf08      	it	eq
 8009748:	462f      	moveq	r7, r5
 800974a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800974c:	2d10      	cmp	r5, #16
 800974e:	462c      	mov	r4, r5
 8009750:	9309      	str	r3, [sp, #36]	@ 0x24
 8009752:	bfa8      	it	ge
 8009754:	2410      	movge	r4, #16
 8009756:	f7f6 fe45 	bl	80003e4 <__aeabi_ui2d>
 800975a:	2d09      	cmp	r5, #9
 800975c:	4682      	mov	sl, r0
 800975e:	468b      	mov	fp, r1
 8009760:	dc11      	bgt.n	8009786 <_strtod_l+0x3ce>
 8009762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009764:	2b00      	cmp	r3, #0
 8009766:	f43f ae60 	beq.w	800942a <_strtod_l+0x72>
 800976a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800976c:	dd76      	ble.n	800985c <_strtod_l+0x4a4>
 800976e:	2b16      	cmp	r3, #22
 8009770:	dc5d      	bgt.n	800982e <_strtod_l+0x476>
 8009772:	4974      	ldr	r1, [pc, #464]	@ (8009944 <_strtod_l+0x58c>)
 8009774:	4652      	mov	r2, sl
 8009776:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800977a:	465b      	mov	r3, fp
 800977c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009780:	f7f6 feaa 	bl	80004d8 <__aeabi_dmul>
 8009784:	e7d9      	b.n	800973a <_strtod_l+0x382>
 8009786:	4b6f      	ldr	r3, [pc, #444]	@ (8009944 <_strtod_l+0x58c>)
 8009788:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800978c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009790:	f7f6 fea2 	bl	80004d8 <__aeabi_dmul>
 8009794:	4682      	mov	sl, r0
 8009796:	9808      	ldr	r0, [sp, #32]
 8009798:	468b      	mov	fp, r1
 800979a:	f7f6 fe23 	bl	80003e4 <__aeabi_ui2d>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4650      	mov	r0, sl
 80097a4:	4659      	mov	r1, fp
 80097a6:	f7f6 fce1 	bl	800016c <__adddf3>
 80097aa:	2d0f      	cmp	r5, #15
 80097ac:	4682      	mov	sl, r0
 80097ae:	468b      	mov	fp, r1
 80097b0:	ddd7      	ble.n	8009762 <_strtod_l+0x3aa>
 80097b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b4:	1b2c      	subs	r4, r5, r4
 80097b6:	441c      	add	r4, r3
 80097b8:	2c00      	cmp	r4, #0
 80097ba:	f340 8096 	ble.w	80098ea <_strtod_l+0x532>
 80097be:	f014 030f 	ands.w	r3, r4, #15
 80097c2:	d00a      	beq.n	80097da <_strtod_l+0x422>
 80097c4:	495f      	ldr	r1, [pc, #380]	@ (8009944 <_strtod_l+0x58c>)
 80097c6:	4652      	mov	r2, sl
 80097c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097d0:	465b      	mov	r3, fp
 80097d2:	f7f6 fe81 	bl	80004d8 <__aeabi_dmul>
 80097d6:	4682      	mov	sl, r0
 80097d8:	468b      	mov	fp, r1
 80097da:	f034 040f 	bics.w	r4, r4, #15
 80097de:	d073      	beq.n	80098c8 <_strtod_l+0x510>
 80097e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80097e4:	dd48      	ble.n	8009878 <_strtod_l+0x4c0>
 80097e6:	2400      	movs	r4, #0
 80097e8:	46a0      	mov	r8, r4
 80097ea:	46a1      	mov	r9, r4
 80097ec:	940a      	str	r4, [sp, #40]	@ 0x28
 80097ee:	2322      	movs	r3, #34	@ 0x22
 80097f0:	f04f 0a00 	mov.w	sl, #0
 80097f4:	9a05      	ldr	r2, [sp, #20]
 80097f6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800993c <_strtod_l+0x584>
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f43f ae13 	beq.w	800942a <_strtod_l+0x72>
 8009804:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009806:	9805      	ldr	r0, [sp, #20]
 8009808:	f7ff f94c 	bl	8008aa4 <_Bfree>
 800980c:	4649      	mov	r1, r9
 800980e:	9805      	ldr	r0, [sp, #20]
 8009810:	f7ff f948 	bl	8008aa4 <_Bfree>
 8009814:	4641      	mov	r1, r8
 8009816:	9805      	ldr	r0, [sp, #20]
 8009818:	f7ff f944 	bl	8008aa4 <_Bfree>
 800981c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800981e:	9805      	ldr	r0, [sp, #20]
 8009820:	f7ff f940 	bl	8008aa4 <_Bfree>
 8009824:	4621      	mov	r1, r4
 8009826:	9805      	ldr	r0, [sp, #20]
 8009828:	f7ff f93c 	bl	8008aa4 <_Bfree>
 800982c:	e5fd      	b.n	800942a <_strtod_l+0x72>
 800982e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009830:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009834:	4293      	cmp	r3, r2
 8009836:	dbbc      	blt.n	80097b2 <_strtod_l+0x3fa>
 8009838:	4c42      	ldr	r4, [pc, #264]	@ (8009944 <_strtod_l+0x58c>)
 800983a:	f1c5 050f 	rsb	r5, r5, #15
 800983e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009842:	4652      	mov	r2, sl
 8009844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009848:	465b      	mov	r3, fp
 800984a:	f7f6 fe45 	bl	80004d8 <__aeabi_dmul>
 800984e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009850:	1b5d      	subs	r5, r3, r5
 8009852:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009856:	e9d4 2300 	ldrd	r2, r3, [r4]
 800985a:	e791      	b.n	8009780 <_strtod_l+0x3c8>
 800985c:	3316      	adds	r3, #22
 800985e:	dba8      	blt.n	80097b2 <_strtod_l+0x3fa>
 8009860:	4b38      	ldr	r3, [pc, #224]	@ (8009944 <_strtod_l+0x58c>)
 8009862:	eba9 0808 	sub.w	r8, r9, r8
 8009866:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800986a:	4650      	mov	r0, sl
 800986c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009870:	4659      	mov	r1, fp
 8009872:	f7f6 ff5b 	bl	800072c <__aeabi_ddiv>
 8009876:	e760      	b.n	800973a <_strtod_l+0x382>
 8009878:	4b33      	ldr	r3, [pc, #204]	@ (8009948 <_strtod_l+0x590>)
 800987a:	4650      	mov	r0, sl
 800987c:	9308      	str	r3, [sp, #32]
 800987e:	2300      	movs	r3, #0
 8009880:	4659      	mov	r1, fp
 8009882:	461e      	mov	r6, r3
 8009884:	1124      	asrs	r4, r4, #4
 8009886:	2c01      	cmp	r4, #1
 8009888:	dc21      	bgt.n	80098ce <_strtod_l+0x516>
 800988a:	b10b      	cbz	r3, 8009890 <_strtod_l+0x4d8>
 800988c:	4682      	mov	sl, r0
 800988e:	468b      	mov	fp, r1
 8009890:	492d      	ldr	r1, [pc, #180]	@ (8009948 <_strtod_l+0x590>)
 8009892:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009896:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800989a:	4652      	mov	r2, sl
 800989c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098a0:	465b      	mov	r3, fp
 80098a2:	f7f6 fe19 	bl	80004d8 <__aeabi_dmul>
 80098a6:	4b25      	ldr	r3, [pc, #148]	@ (800993c <_strtod_l+0x584>)
 80098a8:	460a      	mov	r2, r1
 80098aa:	400b      	ands	r3, r1
 80098ac:	4927      	ldr	r1, [pc, #156]	@ (800994c <_strtod_l+0x594>)
 80098ae:	4682      	mov	sl, r0
 80098b0:	428b      	cmp	r3, r1
 80098b2:	d898      	bhi.n	80097e6 <_strtod_l+0x42e>
 80098b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80098b8:	428b      	cmp	r3, r1
 80098ba:	bf86      	itte	hi
 80098bc:	f04f 3aff 	movhi.w	sl, #4294967295
 80098c0:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009950 <_strtod_l+0x598>
 80098c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80098c8:	2300      	movs	r3, #0
 80098ca:	9308      	str	r3, [sp, #32]
 80098cc:	e07a      	b.n	80099c4 <_strtod_l+0x60c>
 80098ce:	07e2      	lsls	r2, r4, #31
 80098d0:	d505      	bpl.n	80098de <_strtod_l+0x526>
 80098d2:	9b08      	ldr	r3, [sp, #32]
 80098d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d8:	f7f6 fdfe 	bl	80004d8 <__aeabi_dmul>
 80098dc:	2301      	movs	r3, #1
 80098de:	9a08      	ldr	r2, [sp, #32]
 80098e0:	3601      	adds	r6, #1
 80098e2:	3208      	adds	r2, #8
 80098e4:	1064      	asrs	r4, r4, #1
 80098e6:	9208      	str	r2, [sp, #32]
 80098e8:	e7cd      	b.n	8009886 <_strtod_l+0x4ce>
 80098ea:	d0ed      	beq.n	80098c8 <_strtod_l+0x510>
 80098ec:	4264      	negs	r4, r4
 80098ee:	f014 020f 	ands.w	r2, r4, #15
 80098f2:	d00a      	beq.n	800990a <_strtod_l+0x552>
 80098f4:	4b13      	ldr	r3, [pc, #76]	@ (8009944 <_strtod_l+0x58c>)
 80098f6:	4650      	mov	r0, sl
 80098f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098fc:	4659      	mov	r1, fp
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 ff13 	bl	800072c <__aeabi_ddiv>
 8009906:	4682      	mov	sl, r0
 8009908:	468b      	mov	fp, r1
 800990a:	1124      	asrs	r4, r4, #4
 800990c:	d0dc      	beq.n	80098c8 <_strtod_l+0x510>
 800990e:	2c1f      	cmp	r4, #31
 8009910:	dd20      	ble.n	8009954 <_strtod_l+0x59c>
 8009912:	2400      	movs	r4, #0
 8009914:	46a0      	mov	r8, r4
 8009916:	46a1      	mov	r9, r4
 8009918:	940a      	str	r4, [sp, #40]	@ 0x28
 800991a:	2322      	movs	r3, #34	@ 0x22
 800991c:	9a05      	ldr	r2, [sp, #20]
 800991e:	f04f 0a00 	mov.w	sl, #0
 8009922:	f04f 0b00 	mov.w	fp, #0
 8009926:	6013      	str	r3, [r2, #0]
 8009928:	e768      	b.n	80097fc <_strtod_l+0x444>
 800992a:	bf00      	nop
 800992c:	0800b438 	.word	0x0800b438
 8009930:	0800b64c 	.word	0x0800b64c
 8009934:	0800b430 	.word	0x0800b430
 8009938:	0800b467 	.word	0x0800b467
 800993c:	7ff00000 	.word	0x7ff00000
 8009940:	0800b6f4 	.word	0x0800b6f4
 8009944:	0800b580 	.word	0x0800b580
 8009948:	0800b558 	.word	0x0800b558
 800994c:	7ca00000 	.word	0x7ca00000
 8009950:	7fefffff 	.word	0x7fefffff
 8009954:	f014 0310 	ands.w	r3, r4, #16
 8009958:	bf18      	it	ne
 800995a:	236a      	movne	r3, #106	@ 0x6a
 800995c:	4650      	mov	r0, sl
 800995e:	9308      	str	r3, [sp, #32]
 8009960:	4659      	mov	r1, fp
 8009962:	2300      	movs	r3, #0
 8009964:	4ea9      	ldr	r6, [pc, #676]	@ (8009c0c <_strtod_l+0x854>)
 8009966:	07e2      	lsls	r2, r4, #31
 8009968:	d504      	bpl.n	8009974 <_strtod_l+0x5bc>
 800996a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800996e:	f7f6 fdb3 	bl	80004d8 <__aeabi_dmul>
 8009972:	2301      	movs	r3, #1
 8009974:	1064      	asrs	r4, r4, #1
 8009976:	f106 0608 	add.w	r6, r6, #8
 800997a:	d1f4      	bne.n	8009966 <_strtod_l+0x5ae>
 800997c:	b10b      	cbz	r3, 8009982 <_strtod_l+0x5ca>
 800997e:	4682      	mov	sl, r0
 8009980:	468b      	mov	fp, r1
 8009982:	9b08      	ldr	r3, [sp, #32]
 8009984:	b1b3      	cbz	r3, 80099b4 <_strtod_l+0x5fc>
 8009986:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800998a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800998e:	2b00      	cmp	r3, #0
 8009990:	4659      	mov	r1, fp
 8009992:	dd0f      	ble.n	80099b4 <_strtod_l+0x5fc>
 8009994:	2b1f      	cmp	r3, #31
 8009996:	dd57      	ble.n	8009a48 <_strtod_l+0x690>
 8009998:	2b34      	cmp	r3, #52	@ 0x34
 800999a:	bfd8      	it	le
 800999c:	f04f 33ff 	movle.w	r3, #4294967295
 80099a0:	f04f 0a00 	mov.w	sl, #0
 80099a4:	bfcf      	iteee	gt
 80099a6:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80099aa:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80099ae:	4093      	lslle	r3, r2
 80099b0:	ea03 0b01 	andle.w	fp, r3, r1
 80099b4:	2200      	movs	r2, #0
 80099b6:	2300      	movs	r3, #0
 80099b8:	4650      	mov	r0, sl
 80099ba:	4659      	mov	r1, fp
 80099bc:	f7f6 fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d1a6      	bne.n	8009912 <_strtod_l+0x55a>
 80099c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099c6:	463a      	mov	r2, r7
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80099cc:	462b      	mov	r3, r5
 80099ce:	9805      	ldr	r0, [sp, #20]
 80099d0:	f7ff f8d0 	bl	8008b74 <__s2b>
 80099d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f43f af05 	beq.w	80097e6 <_strtod_l+0x42e>
 80099dc:	2400      	movs	r4, #0
 80099de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099e0:	eba9 0308 	sub.w	r3, r9, r8
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	bfa8      	it	ge
 80099e8:	2300      	movge	r3, #0
 80099ea:	46a0      	mov	r8, r4
 80099ec:	9312      	str	r3, [sp, #72]	@ 0x48
 80099ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80099f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80099f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099f6:	9805      	ldr	r0, [sp, #20]
 80099f8:	6859      	ldr	r1, [r3, #4]
 80099fa:	f7ff f813 	bl	8008a24 <_Balloc>
 80099fe:	4681      	mov	r9, r0
 8009a00:	2800      	cmp	r0, #0
 8009a02:	f43f aef4 	beq.w	80097ee <_strtod_l+0x436>
 8009a06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a08:	300c      	adds	r0, #12
 8009a0a:	691a      	ldr	r2, [r3, #16]
 8009a0c:	f103 010c 	add.w	r1, r3, #12
 8009a10:	3202      	adds	r2, #2
 8009a12:	0092      	lsls	r2, r2, #2
 8009a14:	f000 fcd8 	bl	800a3c8 <memcpy>
 8009a18:	ab1c      	add	r3, sp, #112	@ 0x70
 8009a1a:	9301      	str	r3, [sp, #4]
 8009a1c:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	4652      	mov	r2, sl
 8009a22:	465b      	mov	r3, fp
 8009a24:	9805      	ldr	r0, [sp, #20]
 8009a26:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009a2a:	f7ff fbd5 	bl	80091d8 <__d2b>
 8009a2e:	901a      	str	r0, [sp, #104]	@ 0x68
 8009a30:	2800      	cmp	r0, #0
 8009a32:	f43f aedc 	beq.w	80097ee <_strtod_l+0x436>
 8009a36:	2101      	movs	r1, #1
 8009a38:	9805      	ldr	r0, [sp, #20]
 8009a3a:	f7ff f931 	bl	8008ca0 <__i2b>
 8009a3e:	4680      	mov	r8, r0
 8009a40:	b948      	cbnz	r0, 8009a56 <_strtod_l+0x69e>
 8009a42:	f04f 0800 	mov.w	r8, #0
 8009a46:	e6d2      	b.n	80097ee <_strtod_l+0x436>
 8009a48:	f04f 32ff 	mov.w	r2, #4294967295
 8009a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a50:	ea03 0a0a 	and.w	sl, r3, sl
 8009a54:	e7ae      	b.n	80099b4 <_strtod_l+0x5fc>
 8009a56:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009a58:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	bfab      	itete	ge
 8009a5e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009a60:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009a62:	18ef      	addge	r7, r5, r3
 8009a64:	1b5e      	sublt	r6, r3, r5
 8009a66:	9b08      	ldr	r3, [sp, #32]
 8009a68:	bfa8      	it	ge
 8009a6a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009a6c:	eba5 0503 	sub.w	r5, r5, r3
 8009a70:	4415      	add	r5, r2
 8009a72:	4b67      	ldr	r3, [pc, #412]	@ (8009c10 <_strtod_l+0x858>)
 8009a74:	f105 35ff 	add.w	r5, r5, #4294967295
 8009a78:	bfb8      	it	lt
 8009a7a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009a7c:	429d      	cmp	r5, r3
 8009a7e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009a82:	da50      	bge.n	8009b26 <_strtod_l+0x76e>
 8009a84:	1b5b      	subs	r3, r3, r5
 8009a86:	2b1f      	cmp	r3, #31
 8009a88:	f04f 0101 	mov.w	r1, #1
 8009a8c:	eba2 0203 	sub.w	r2, r2, r3
 8009a90:	dc3d      	bgt.n	8009b0e <_strtod_l+0x756>
 8009a92:	fa01 f303 	lsl.w	r3, r1, r3
 8009a96:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a9c:	18bd      	adds	r5, r7, r2
 8009a9e:	9b08      	ldr	r3, [sp, #32]
 8009aa0:	42af      	cmp	r7, r5
 8009aa2:	4416      	add	r6, r2
 8009aa4:	441e      	add	r6, r3
 8009aa6:	463b      	mov	r3, r7
 8009aa8:	bfa8      	it	ge
 8009aaa:	462b      	movge	r3, r5
 8009aac:	42b3      	cmp	r3, r6
 8009aae:	bfa8      	it	ge
 8009ab0:	4633      	movge	r3, r6
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	bfc2      	ittt	gt
 8009ab6:	1aed      	subgt	r5, r5, r3
 8009ab8:	1af6      	subgt	r6, r6, r3
 8009aba:	1aff      	subgt	r7, r7, r3
 8009abc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	dd16      	ble.n	8009af0 <_strtod_l+0x738>
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	9805      	ldr	r0, [sp, #20]
 8009ac8:	f7ff f9a8 	bl	8008e1c <__pow5mult>
 8009acc:	4680      	mov	r8, r0
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d0b7      	beq.n	8009a42 <_strtod_l+0x68a>
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009ad6:	9805      	ldr	r0, [sp, #20]
 8009ad8:	f7ff f8f8 	bl	8008ccc <__multiply>
 8009adc:	900e      	str	r0, [sp, #56]	@ 0x38
 8009ade:	2800      	cmp	r0, #0
 8009ae0:	f43f ae85 	beq.w	80097ee <_strtod_l+0x436>
 8009ae4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ae6:	9805      	ldr	r0, [sp, #20]
 8009ae8:	f7fe ffdc 	bl	8008aa4 <_Bfree>
 8009aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aee:	931a      	str	r3, [sp, #104]	@ 0x68
 8009af0:	2d00      	cmp	r5, #0
 8009af2:	dc1d      	bgt.n	8009b30 <_strtod_l+0x778>
 8009af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	dd23      	ble.n	8009b42 <_strtod_l+0x78a>
 8009afa:	4649      	mov	r1, r9
 8009afc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009afe:	9805      	ldr	r0, [sp, #20]
 8009b00:	f7ff f98c 	bl	8008e1c <__pow5mult>
 8009b04:	4681      	mov	r9, r0
 8009b06:	b9e0      	cbnz	r0, 8009b42 <_strtod_l+0x78a>
 8009b08:	f04f 0900 	mov.w	r9, #0
 8009b0c:	e66f      	b.n	80097ee <_strtod_l+0x436>
 8009b0e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009b12:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009b16:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009b1a:	35e2      	adds	r5, #226	@ 0xe2
 8009b1c:	fa01 f305 	lsl.w	r3, r1, r5
 8009b20:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b22:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009b24:	e7ba      	b.n	8009a9c <_strtod_l+0x6e4>
 8009b26:	2300      	movs	r3, #0
 8009b28:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b2e:	e7b5      	b.n	8009a9c <_strtod_l+0x6e4>
 8009b30:	462a      	mov	r2, r5
 8009b32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b34:	9805      	ldr	r0, [sp, #20]
 8009b36:	f7ff f9cb 	bl	8008ed0 <__lshift>
 8009b3a:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d1d9      	bne.n	8009af4 <_strtod_l+0x73c>
 8009b40:	e655      	b.n	80097ee <_strtod_l+0x436>
 8009b42:	2e00      	cmp	r6, #0
 8009b44:	dd07      	ble.n	8009b56 <_strtod_l+0x79e>
 8009b46:	4649      	mov	r1, r9
 8009b48:	4632      	mov	r2, r6
 8009b4a:	9805      	ldr	r0, [sp, #20]
 8009b4c:	f7ff f9c0 	bl	8008ed0 <__lshift>
 8009b50:	4681      	mov	r9, r0
 8009b52:	2800      	cmp	r0, #0
 8009b54:	d0d8      	beq.n	8009b08 <_strtod_l+0x750>
 8009b56:	2f00      	cmp	r7, #0
 8009b58:	dd08      	ble.n	8009b6c <_strtod_l+0x7b4>
 8009b5a:	4641      	mov	r1, r8
 8009b5c:	463a      	mov	r2, r7
 8009b5e:	9805      	ldr	r0, [sp, #20]
 8009b60:	f7ff f9b6 	bl	8008ed0 <__lshift>
 8009b64:	4680      	mov	r8, r0
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f43f ae41 	beq.w	80097ee <_strtod_l+0x436>
 8009b6c:	464a      	mov	r2, r9
 8009b6e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b70:	9805      	ldr	r0, [sp, #20]
 8009b72:	f7ff fa35 	bl	8008fe0 <__mdiff>
 8009b76:	4604      	mov	r4, r0
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	f43f ae38 	beq.w	80097ee <_strtod_l+0x436>
 8009b7e:	68c3      	ldr	r3, [r0, #12]
 8009b80:	4641      	mov	r1, r8
 8009b82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009b84:	2300      	movs	r3, #0
 8009b86:	60c3      	str	r3, [r0, #12]
 8009b88:	f7ff fa0e 	bl	8008fa8 <__mcmp>
 8009b8c:	2800      	cmp	r0, #0
 8009b8e:	da45      	bge.n	8009c1c <_strtod_l+0x864>
 8009b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b92:	ea53 030a 	orrs.w	r3, r3, sl
 8009b96:	d16b      	bne.n	8009c70 <_strtod_l+0x8b8>
 8009b98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d167      	bne.n	8009c70 <_strtod_l+0x8b8>
 8009ba0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ba4:	0d1b      	lsrs	r3, r3, #20
 8009ba6:	051b      	lsls	r3, r3, #20
 8009ba8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009bac:	d960      	bls.n	8009c70 <_strtod_l+0x8b8>
 8009bae:	6963      	ldr	r3, [r4, #20]
 8009bb0:	b913      	cbnz	r3, 8009bb8 <_strtod_l+0x800>
 8009bb2:	6923      	ldr	r3, [r4, #16]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	dd5b      	ble.n	8009c70 <_strtod_l+0x8b8>
 8009bb8:	4621      	mov	r1, r4
 8009bba:	2201      	movs	r2, #1
 8009bbc:	9805      	ldr	r0, [sp, #20]
 8009bbe:	f7ff f987 	bl	8008ed0 <__lshift>
 8009bc2:	4641      	mov	r1, r8
 8009bc4:	4604      	mov	r4, r0
 8009bc6:	f7ff f9ef 	bl	8008fa8 <__mcmp>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	dd50      	ble.n	8009c70 <_strtod_l+0x8b8>
 8009bce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bd2:	9a08      	ldr	r2, [sp, #32]
 8009bd4:	0d1b      	lsrs	r3, r3, #20
 8009bd6:	051b      	lsls	r3, r3, #20
 8009bd8:	2a00      	cmp	r2, #0
 8009bda:	d06a      	beq.n	8009cb2 <_strtod_l+0x8fa>
 8009bdc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009be0:	d867      	bhi.n	8009cb2 <_strtod_l+0x8fa>
 8009be2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009be6:	f67f ae98 	bls.w	800991a <_strtod_l+0x562>
 8009bea:	4650      	mov	r0, sl
 8009bec:	4659      	mov	r1, fp
 8009bee:	4b09      	ldr	r3, [pc, #36]	@ (8009c14 <_strtod_l+0x85c>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f7f6 fc71 	bl	80004d8 <__aeabi_dmul>
 8009bf6:	4b08      	ldr	r3, [pc, #32]	@ (8009c18 <_strtod_l+0x860>)
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	400b      	ands	r3, r1
 8009bfc:	468b      	mov	fp, r1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f47f ae00 	bne.w	8009804 <_strtod_l+0x44c>
 8009c04:	2322      	movs	r3, #34	@ 0x22
 8009c06:	9a05      	ldr	r2, [sp, #20]
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	e5fb      	b.n	8009804 <_strtod_l+0x44c>
 8009c0c:	0800b678 	.word	0x0800b678
 8009c10:	fffffc02 	.word	0xfffffc02
 8009c14:	39500000 	.word	0x39500000
 8009c18:	7ff00000 	.word	0x7ff00000
 8009c1c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c20:	d165      	bne.n	8009cee <_strtod_l+0x936>
 8009c22:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009c24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c28:	b35a      	cbz	r2, 8009c82 <_strtod_l+0x8ca>
 8009c2a:	4a99      	ldr	r2, [pc, #612]	@ (8009e90 <_strtod_l+0xad8>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d12b      	bne.n	8009c88 <_strtod_l+0x8d0>
 8009c30:	9b08      	ldr	r3, [sp, #32]
 8009c32:	4651      	mov	r1, sl
 8009c34:	b303      	cbz	r3, 8009c78 <_strtod_l+0x8c0>
 8009c36:	465a      	mov	r2, fp
 8009c38:	4b96      	ldr	r3, [pc, #600]	@ (8009e94 <_strtod_l+0xadc>)
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009c40:	f04f 32ff 	mov.w	r2, #4294967295
 8009c44:	d81b      	bhi.n	8009c7e <_strtod_l+0x8c6>
 8009c46:	0d1b      	lsrs	r3, r3, #20
 8009c48:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8009c50:	4299      	cmp	r1, r3
 8009c52:	d119      	bne.n	8009c88 <_strtod_l+0x8d0>
 8009c54:	4b90      	ldr	r3, [pc, #576]	@ (8009e98 <_strtod_l+0xae0>)
 8009c56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d102      	bne.n	8009c62 <_strtod_l+0x8aa>
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	f43f adc6 	beq.w	80097ee <_strtod_l+0x436>
 8009c62:	f04f 0a00 	mov.w	sl, #0
 8009c66:	4b8b      	ldr	r3, [pc, #556]	@ (8009e94 <_strtod_l+0xadc>)
 8009c68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c6a:	401a      	ands	r2, r3
 8009c6c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009c70:	9b08      	ldr	r3, [sp, #32]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1b9      	bne.n	8009bea <_strtod_l+0x832>
 8009c76:	e5c5      	b.n	8009804 <_strtod_l+0x44c>
 8009c78:	f04f 33ff 	mov.w	r3, #4294967295
 8009c7c:	e7e8      	b.n	8009c50 <_strtod_l+0x898>
 8009c7e:	4613      	mov	r3, r2
 8009c80:	e7e6      	b.n	8009c50 <_strtod_l+0x898>
 8009c82:	ea53 030a 	orrs.w	r3, r3, sl
 8009c86:	d0a2      	beq.n	8009bce <_strtod_l+0x816>
 8009c88:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c8a:	b1db      	cbz	r3, 8009cc4 <_strtod_l+0x90c>
 8009c8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c8e:	4213      	tst	r3, r2
 8009c90:	d0ee      	beq.n	8009c70 <_strtod_l+0x8b8>
 8009c92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c94:	4650      	mov	r0, sl
 8009c96:	4659      	mov	r1, fp
 8009c98:	9a08      	ldr	r2, [sp, #32]
 8009c9a:	b1bb      	cbz	r3, 8009ccc <_strtod_l+0x914>
 8009c9c:	f7ff fb68 	bl	8009370 <sulp>
 8009ca0:	4602      	mov	r2, r0
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ca8:	f7f6 fa60 	bl	800016c <__adddf3>
 8009cac:	4682      	mov	sl, r0
 8009cae:	468b      	mov	fp, r1
 8009cb0:	e7de      	b.n	8009c70 <_strtod_l+0x8b8>
 8009cb2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009cb6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cba:	f04f 3aff 	mov.w	sl, #4294967295
 8009cbe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cc2:	e7d5      	b.n	8009c70 <_strtod_l+0x8b8>
 8009cc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cc6:	ea13 0f0a 	tst.w	r3, sl
 8009cca:	e7e1      	b.n	8009c90 <_strtod_l+0x8d8>
 8009ccc:	f7ff fb50 	bl	8009370 <sulp>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cd8:	f7f6 fa46 	bl	8000168 <__aeabi_dsub>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4682      	mov	sl, r0
 8009ce2:	468b      	mov	fp, r1
 8009ce4:	f7f6 fe60 	bl	80009a8 <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d0c1      	beq.n	8009c70 <_strtod_l+0x8b8>
 8009cec:	e615      	b.n	800991a <_strtod_l+0x562>
 8009cee:	4641      	mov	r1, r8
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f7ff fac9 	bl	8009288 <__ratio>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460f      	mov	r7, r1
 8009d00:	f7f6 fe66 	bl	80009d0 <__aeabi_dcmple>
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d06d      	beq.n	8009de4 <_strtod_l+0xa2c>
 8009d08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d178      	bne.n	8009e00 <_strtod_l+0xa48>
 8009d0e:	f1ba 0f00 	cmp.w	sl, #0
 8009d12:	d156      	bne.n	8009dc2 <_strtod_l+0xa0a>
 8009d14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d158      	bne.n	8009dd0 <_strtod_l+0xa18>
 8009d1e:	2200      	movs	r2, #0
 8009d20:	4630      	mov	r0, r6
 8009d22:	4639      	mov	r1, r7
 8009d24:	4b5d      	ldr	r3, [pc, #372]	@ (8009e9c <_strtod_l+0xae4>)
 8009d26:	f7f6 fe49 	bl	80009bc <__aeabi_dcmplt>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d157      	bne.n	8009dde <_strtod_l+0xa26>
 8009d2e:	4630      	mov	r0, r6
 8009d30:	4639      	mov	r1, r7
 8009d32:	2200      	movs	r2, #0
 8009d34:	4b5a      	ldr	r3, [pc, #360]	@ (8009ea0 <_strtod_l+0xae8>)
 8009d36:	f7f6 fbcf 	bl	80004d8 <__aeabi_dmul>
 8009d3a:	4606      	mov	r6, r0
 8009d3c:	460f      	mov	r7, r1
 8009d3e:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009d42:	9606      	str	r6, [sp, #24]
 8009d44:	9307      	str	r3, [sp, #28]
 8009d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d4a:	4d52      	ldr	r5, [pc, #328]	@ (8009e94 <_strtod_l+0xadc>)
 8009d4c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d52:	401d      	ands	r5, r3
 8009d54:	4b53      	ldr	r3, [pc, #332]	@ (8009ea4 <_strtod_l+0xaec>)
 8009d56:	429d      	cmp	r5, r3
 8009d58:	f040 80aa 	bne.w	8009eb0 <_strtod_l+0xaf8>
 8009d5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d5e:	4650      	mov	r0, sl
 8009d60:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009d64:	4659      	mov	r1, fp
 8009d66:	f7ff f9cf 	bl	8009108 <__ulp>
 8009d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d6e:	f7f6 fbb3 	bl	80004d8 <__aeabi_dmul>
 8009d72:	4652      	mov	r2, sl
 8009d74:	465b      	mov	r3, fp
 8009d76:	f7f6 f9f9 	bl	800016c <__adddf3>
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4945      	ldr	r1, [pc, #276]	@ (8009e94 <_strtod_l+0xadc>)
 8009d7e:	4a4a      	ldr	r2, [pc, #296]	@ (8009ea8 <_strtod_l+0xaf0>)
 8009d80:	4019      	ands	r1, r3
 8009d82:	4291      	cmp	r1, r2
 8009d84:	4682      	mov	sl, r0
 8009d86:	d942      	bls.n	8009e0e <_strtod_l+0xa56>
 8009d88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009d8a:	4b43      	ldr	r3, [pc, #268]	@ (8009e98 <_strtod_l+0xae0>)
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d103      	bne.n	8009d98 <_strtod_l+0x9e0>
 8009d90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d92:	3301      	adds	r3, #1
 8009d94:	f43f ad2b 	beq.w	80097ee <_strtod_l+0x436>
 8009d98:	f04f 3aff 	mov.w	sl, #4294967295
 8009d9c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009e98 <_strtod_l+0xae0>
 8009da0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009da2:	9805      	ldr	r0, [sp, #20]
 8009da4:	f7fe fe7e 	bl	8008aa4 <_Bfree>
 8009da8:	4649      	mov	r1, r9
 8009daa:	9805      	ldr	r0, [sp, #20]
 8009dac:	f7fe fe7a 	bl	8008aa4 <_Bfree>
 8009db0:	4641      	mov	r1, r8
 8009db2:	9805      	ldr	r0, [sp, #20]
 8009db4:	f7fe fe76 	bl	8008aa4 <_Bfree>
 8009db8:	4621      	mov	r1, r4
 8009dba:	9805      	ldr	r0, [sp, #20]
 8009dbc:	f7fe fe72 	bl	8008aa4 <_Bfree>
 8009dc0:	e618      	b.n	80099f4 <_strtod_l+0x63c>
 8009dc2:	f1ba 0f01 	cmp.w	sl, #1
 8009dc6:	d103      	bne.n	8009dd0 <_strtod_l+0xa18>
 8009dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f43f ada5 	beq.w	800991a <_strtod_l+0x562>
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4b36      	ldr	r3, [pc, #216]	@ (8009eac <_strtod_l+0xaf4>)
 8009dd4:	2600      	movs	r6, #0
 8009dd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dda:	4f30      	ldr	r7, [pc, #192]	@ (8009e9c <_strtod_l+0xae4>)
 8009ddc:	e7b3      	b.n	8009d46 <_strtod_l+0x98e>
 8009dde:	2600      	movs	r6, #0
 8009de0:	4f2f      	ldr	r7, [pc, #188]	@ (8009ea0 <_strtod_l+0xae8>)
 8009de2:	e7ac      	b.n	8009d3e <_strtod_l+0x986>
 8009de4:	4630      	mov	r0, r6
 8009de6:	4639      	mov	r1, r7
 8009de8:	4b2d      	ldr	r3, [pc, #180]	@ (8009ea0 <_strtod_l+0xae8>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	f7f6 fb74 	bl	80004d8 <__aeabi_dmul>
 8009df0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d0a1      	beq.n	8009d3e <_strtod_l+0x986>
 8009dfa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009dfe:	e7a2      	b.n	8009d46 <_strtod_l+0x98e>
 8009e00:	2200      	movs	r2, #0
 8009e02:	4b26      	ldr	r3, [pc, #152]	@ (8009e9c <_strtod_l+0xae4>)
 8009e04:	4616      	mov	r6, r2
 8009e06:	461f      	mov	r7, r3
 8009e08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e0c:	e79b      	b.n	8009d46 <_strtod_l+0x98e>
 8009e0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1c1      	bne.n	8009da0 <_strtod_l+0x9e8>
 8009e1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e20:	0d1b      	lsrs	r3, r3, #20
 8009e22:	051b      	lsls	r3, r3, #20
 8009e24:	429d      	cmp	r5, r3
 8009e26:	d1bb      	bne.n	8009da0 <_strtod_l+0x9e8>
 8009e28:	4630      	mov	r0, r6
 8009e2a:	4639      	mov	r1, r7
 8009e2c:	f7f7 f91a 	bl	8001064 <__aeabi_d2lz>
 8009e30:	f7f6 fb24 	bl	800047c <__aeabi_l2d>
 8009e34:	4602      	mov	r2, r0
 8009e36:	460b      	mov	r3, r1
 8009e38:	4630      	mov	r0, r6
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	f7f6 f994 	bl	8000168 <__aeabi_dsub>
 8009e40:	460b      	mov	r3, r1
 8009e42:	4602      	mov	r2, r0
 8009e44:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009e48:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009e4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e4e:	ea46 060a 	orr.w	r6, r6, sl
 8009e52:	431e      	orrs	r6, r3
 8009e54:	d069      	beq.n	8009f2a <_strtod_l+0xb72>
 8009e56:	a30a      	add	r3, pc, #40	@ (adr r3, 8009e80 <_strtod_l+0xac8>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 fdae 	bl	80009bc <__aeabi_dcmplt>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	f47f accf 	bne.w	8009804 <_strtod_l+0x44c>
 8009e66:	a308      	add	r3, pc, #32	@ (adr r3, 8009e88 <_strtod_l+0xad0>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e70:	f7f6 fdc2 	bl	80009f8 <__aeabi_dcmpgt>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d093      	beq.n	8009da0 <_strtod_l+0x9e8>
 8009e78:	e4c4      	b.n	8009804 <_strtod_l+0x44c>
 8009e7a:	bf00      	nop
 8009e7c:	f3af 8000 	nop.w
 8009e80:	94a03595 	.word	0x94a03595
 8009e84:	3fdfffff 	.word	0x3fdfffff
 8009e88:	35afe535 	.word	0x35afe535
 8009e8c:	3fe00000 	.word	0x3fe00000
 8009e90:	000fffff 	.word	0x000fffff
 8009e94:	7ff00000 	.word	0x7ff00000
 8009e98:	7fefffff 	.word	0x7fefffff
 8009e9c:	3ff00000 	.word	0x3ff00000
 8009ea0:	3fe00000 	.word	0x3fe00000
 8009ea4:	7fe00000 	.word	0x7fe00000
 8009ea8:	7c9fffff 	.word	0x7c9fffff
 8009eac:	bff00000 	.word	0xbff00000
 8009eb0:	9b08      	ldr	r3, [sp, #32]
 8009eb2:	b323      	cbz	r3, 8009efe <_strtod_l+0xb46>
 8009eb4:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009eb8:	d821      	bhi.n	8009efe <_strtod_l+0xb46>
 8009eba:	a327      	add	r3, pc, #156	@ (adr r3, 8009f58 <_strtod_l+0xba0>)
 8009ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	4639      	mov	r1, r7
 8009ec4:	f7f6 fd84 	bl	80009d0 <__aeabi_dcmple>
 8009ec8:	b1a0      	cbz	r0, 8009ef4 <_strtod_l+0xb3c>
 8009eca:	4639      	mov	r1, r7
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7f6 fddb 	bl	8000a88 <__aeabi_d2uiz>
 8009ed2:	2801      	cmp	r0, #1
 8009ed4:	bf38      	it	cc
 8009ed6:	2001      	movcc	r0, #1
 8009ed8:	f7f6 fa84 	bl	80003e4 <__aeabi_ui2d>
 8009edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	b9fb      	cbnz	r3, 8009f24 <_strtod_l+0xb6c>
 8009ee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009ee8:	9014      	str	r0, [sp, #80]	@ 0x50
 8009eea:	9315      	str	r3, [sp, #84]	@ 0x54
 8009eec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009ef0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ef4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ef6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009efa:	1b5b      	subs	r3, r3, r5
 8009efc:	9311      	str	r3, [sp, #68]	@ 0x44
 8009efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f02:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009f06:	f7ff f8ff 	bl	8009108 <__ulp>
 8009f0a:	4602      	mov	r2, r0
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	4650      	mov	r0, sl
 8009f10:	4659      	mov	r1, fp
 8009f12:	f7f6 fae1 	bl	80004d8 <__aeabi_dmul>
 8009f16:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f1a:	f7f6 f927 	bl	800016c <__adddf3>
 8009f1e:	4682      	mov	sl, r0
 8009f20:	468b      	mov	fp, r1
 8009f22:	e776      	b.n	8009e12 <_strtod_l+0xa5a>
 8009f24:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009f28:	e7e0      	b.n	8009eec <_strtod_l+0xb34>
 8009f2a:	a30d      	add	r3, pc, #52	@ (adr r3, 8009f60 <_strtod_l+0xba8>)
 8009f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f30:	f7f6 fd44 	bl	80009bc <__aeabi_dcmplt>
 8009f34:	e79e      	b.n	8009e74 <_strtod_l+0xabc>
 8009f36:	2300      	movs	r3, #0
 8009f38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f3c:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	f7ff ba77 	b.w	8009432 <_strtod_l+0x7a>
 8009f44:	2a65      	cmp	r2, #101	@ 0x65
 8009f46:	f43f ab6e 	beq.w	8009626 <_strtod_l+0x26e>
 8009f4a:	2a45      	cmp	r2, #69	@ 0x45
 8009f4c:	f43f ab6b 	beq.w	8009626 <_strtod_l+0x26e>
 8009f50:	2301      	movs	r3, #1
 8009f52:	f7ff bba6 	b.w	80096a2 <_strtod_l+0x2ea>
 8009f56:	bf00      	nop
 8009f58:	ffc00000 	.word	0xffc00000
 8009f5c:	41dfffff 	.word	0x41dfffff
 8009f60:	94a03595 	.word	0x94a03595
 8009f64:	3fcfffff 	.word	0x3fcfffff

08009f68 <_strtod_r>:
 8009f68:	4b01      	ldr	r3, [pc, #4]	@ (8009f70 <_strtod_r+0x8>)
 8009f6a:	f7ff ba25 	b.w	80093b8 <_strtod_l>
 8009f6e:	bf00      	nop
 8009f70:	20000098 	.word	0x20000098

08009f74 <__ssputs_r>:
 8009f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	461f      	mov	r7, r3
 8009f7a:	688e      	ldr	r6, [r1, #8]
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	42be      	cmp	r6, r7
 8009f80:	460c      	mov	r4, r1
 8009f82:	4690      	mov	r8, r2
 8009f84:	680b      	ldr	r3, [r1, #0]
 8009f86:	d82d      	bhi.n	8009fe4 <__ssputs_r+0x70>
 8009f88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f90:	d026      	beq.n	8009fe0 <__ssputs_r+0x6c>
 8009f92:	6965      	ldr	r5, [r4, #20]
 8009f94:	6909      	ldr	r1, [r1, #16]
 8009f96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f9a:	eba3 0901 	sub.w	r9, r3, r1
 8009f9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fa2:	1c7b      	adds	r3, r7, #1
 8009fa4:	444b      	add	r3, r9
 8009fa6:	106d      	asrs	r5, r5, #1
 8009fa8:	429d      	cmp	r5, r3
 8009faa:	bf38      	it	cc
 8009fac:	461d      	movcc	r5, r3
 8009fae:	0553      	lsls	r3, r2, #21
 8009fb0:	d527      	bpl.n	800a002 <__ssputs_r+0x8e>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	f7fe fcaa 	bl	800890c <_malloc_r>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	b360      	cbz	r0, 800a016 <__ssputs_r+0xa2>
 8009fbc:	464a      	mov	r2, r9
 8009fbe:	6921      	ldr	r1, [r4, #16]
 8009fc0:	f000 fa02 	bl	800a3c8 <memcpy>
 8009fc4:	89a3      	ldrh	r3, [r4, #12]
 8009fc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009fca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fce:	81a3      	strh	r3, [r4, #12]
 8009fd0:	6126      	str	r6, [r4, #16]
 8009fd2:	444e      	add	r6, r9
 8009fd4:	6026      	str	r6, [r4, #0]
 8009fd6:	463e      	mov	r6, r7
 8009fd8:	6165      	str	r5, [r4, #20]
 8009fda:	eba5 0509 	sub.w	r5, r5, r9
 8009fde:	60a5      	str	r5, [r4, #8]
 8009fe0:	42be      	cmp	r6, r7
 8009fe2:	d900      	bls.n	8009fe6 <__ssputs_r+0x72>
 8009fe4:	463e      	mov	r6, r7
 8009fe6:	4632      	mov	r2, r6
 8009fe8:	4641      	mov	r1, r8
 8009fea:	6820      	ldr	r0, [r4, #0]
 8009fec:	f000 f9c2 	bl	800a374 <memmove>
 8009ff0:	2000      	movs	r0, #0
 8009ff2:	68a3      	ldr	r3, [r4, #8]
 8009ff4:	1b9b      	subs	r3, r3, r6
 8009ff6:	60a3      	str	r3, [r4, #8]
 8009ff8:	6823      	ldr	r3, [r4, #0]
 8009ffa:	4433      	add	r3, r6
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	462a      	mov	r2, r5
 800a004:	f000 fd71 	bl	800aaea <_realloc_r>
 800a008:	4606      	mov	r6, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d1e0      	bne.n	8009fd0 <__ssputs_r+0x5c>
 800a00e:	4650      	mov	r0, sl
 800a010:	6921      	ldr	r1, [r4, #16]
 800a012:	f7fe fc09 	bl	8008828 <_free_r>
 800a016:	230c      	movs	r3, #12
 800a018:	f8ca 3000 	str.w	r3, [sl]
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f04f 30ff 	mov.w	r0, #4294967295
 800a022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a026:	81a3      	strh	r3, [r4, #12]
 800a028:	e7e9      	b.n	8009ffe <__ssputs_r+0x8a>
	...

0800a02c <_svfiprintf_r>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	4698      	mov	r8, r3
 800a032:	898b      	ldrh	r3, [r1, #12]
 800a034:	4607      	mov	r7, r0
 800a036:	061b      	lsls	r3, r3, #24
 800a038:	460d      	mov	r5, r1
 800a03a:	4614      	mov	r4, r2
 800a03c:	b09d      	sub	sp, #116	@ 0x74
 800a03e:	d510      	bpl.n	800a062 <_svfiprintf_r+0x36>
 800a040:	690b      	ldr	r3, [r1, #16]
 800a042:	b973      	cbnz	r3, 800a062 <_svfiprintf_r+0x36>
 800a044:	2140      	movs	r1, #64	@ 0x40
 800a046:	f7fe fc61 	bl	800890c <_malloc_r>
 800a04a:	6028      	str	r0, [r5, #0]
 800a04c:	6128      	str	r0, [r5, #16]
 800a04e:	b930      	cbnz	r0, 800a05e <_svfiprintf_r+0x32>
 800a050:	230c      	movs	r3, #12
 800a052:	603b      	str	r3, [r7, #0]
 800a054:	f04f 30ff 	mov.w	r0, #4294967295
 800a058:	b01d      	add	sp, #116	@ 0x74
 800a05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05e:	2340      	movs	r3, #64	@ 0x40
 800a060:	616b      	str	r3, [r5, #20]
 800a062:	2300      	movs	r3, #0
 800a064:	9309      	str	r3, [sp, #36]	@ 0x24
 800a066:	2320      	movs	r3, #32
 800a068:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a06c:	2330      	movs	r3, #48	@ 0x30
 800a06e:	f04f 0901 	mov.w	r9, #1
 800a072:	f8cd 800c 	str.w	r8, [sp, #12]
 800a076:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a210 <_svfiprintf_r+0x1e4>
 800a07a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a07e:	4623      	mov	r3, r4
 800a080:	469a      	mov	sl, r3
 800a082:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a086:	b10a      	cbz	r2, 800a08c <_svfiprintf_r+0x60>
 800a088:	2a25      	cmp	r2, #37	@ 0x25
 800a08a:	d1f9      	bne.n	800a080 <_svfiprintf_r+0x54>
 800a08c:	ebba 0b04 	subs.w	fp, sl, r4
 800a090:	d00b      	beq.n	800a0aa <_svfiprintf_r+0x7e>
 800a092:	465b      	mov	r3, fp
 800a094:	4622      	mov	r2, r4
 800a096:	4629      	mov	r1, r5
 800a098:	4638      	mov	r0, r7
 800a09a:	f7ff ff6b 	bl	8009f74 <__ssputs_r>
 800a09e:	3001      	adds	r0, #1
 800a0a0:	f000 80a7 	beq.w	800a1f2 <_svfiprintf_r+0x1c6>
 800a0a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0a6:	445a      	add	r2, fp
 800a0a8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 809f 	beq.w	800a1f2 <_svfiprintf_r+0x1c6>
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0be:	f10a 0a01 	add.w	sl, sl, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	9307      	str	r3, [sp, #28]
 800a0c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a0ca:	931a      	str	r3, [sp, #104]	@ 0x68
 800a0cc:	4654      	mov	r4, sl
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0d4:	484e      	ldr	r0, [pc, #312]	@ (800a210 <_svfiprintf_r+0x1e4>)
 800a0d6:	f7fd fd42 	bl	8007b5e <memchr>
 800a0da:	9a04      	ldr	r2, [sp, #16]
 800a0dc:	b9d8      	cbnz	r0, 800a116 <_svfiprintf_r+0xea>
 800a0de:	06d0      	lsls	r0, r2, #27
 800a0e0:	bf44      	itt	mi
 800a0e2:	2320      	movmi	r3, #32
 800a0e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0e8:	0711      	lsls	r1, r2, #28
 800a0ea:	bf44      	itt	mi
 800a0ec:	232b      	movmi	r3, #43	@ 0x2b
 800a0ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a0f2:	f89a 3000 	ldrb.w	r3, [sl]
 800a0f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0f8:	d015      	beq.n	800a126 <_svfiprintf_r+0xfa>
 800a0fa:	4654      	mov	r4, sl
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	f04f 0c0a 	mov.w	ip, #10
 800a102:	9a07      	ldr	r2, [sp, #28]
 800a104:	4621      	mov	r1, r4
 800a106:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a10a:	3b30      	subs	r3, #48	@ 0x30
 800a10c:	2b09      	cmp	r3, #9
 800a10e:	d94b      	bls.n	800a1a8 <_svfiprintf_r+0x17c>
 800a110:	b1b0      	cbz	r0, 800a140 <_svfiprintf_r+0x114>
 800a112:	9207      	str	r2, [sp, #28]
 800a114:	e014      	b.n	800a140 <_svfiprintf_r+0x114>
 800a116:	eba0 0308 	sub.w	r3, r0, r8
 800a11a:	fa09 f303 	lsl.w	r3, r9, r3
 800a11e:	4313      	orrs	r3, r2
 800a120:	46a2      	mov	sl, r4
 800a122:	9304      	str	r3, [sp, #16]
 800a124:	e7d2      	b.n	800a0cc <_svfiprintf_r+0xa0>
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	1d19      	adds	r1, r3, #4
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	9103      	str	r1, [sp, #12]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	bfbb      	ittet	lt
 800a132:	425b      	neglt	r3, r3
 800a134:	f042 0202 	orrlt.w	r2, r2, #2
 800a138:	9307      	strge	r3, [sp, #28]
 800a13a:	9307      	strlt	r3, [sp, #28]
 800a13c:	bfb8      	it	lt
 800a13e:	9204      	strlt	r2, [sp, #16]
 800a140:	7823      	ldrb	r3, [r4, #0]
 800a142:	2b2e      	cmp	r3, #46	@ 0x2e
 800a144:	d10a      	bne.n	800a15c <_svfiprintf_r+0x130>
 800a146:	7863      	ldrb	r3, [r4, #1]
 800a148:	2b2a      	cmp	r3, #42	@ 0x2a
 800a14a:	d132      	bne.n	800a1b2 <_svfiprintf_r+0x186>
 800a14c:	9b03      	ldr	r3, [sp, #12]
 800a14e:	3402      	adds	r4, #2
 800a150:	1d1a      	adds	r2, r3, #4
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	9203      	str	r2, [sp, #12]
 800a156:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a214 <_svfiprintf_r+0x1e8>
 800a160:	2203      	movs	r2, #3
 800a162:	4650      	mov	r0, sl
 800a164:	7821      	ldrb	r1, [r4, #0]
 800a166:	f7fd fcfa 	bl	8007b5e <memchr>
 800a16a:	b138      	cbz	r0, 800a17c <_svfiprintf_r+0x150>
 800a16c:	2240      	movs	r2, #64	@ 0x40
 800a16e:	9b04      	ldr	r3, [sp, #16]
 800a170:	eba0 000a 	sub.w	r0, r0, sl
 800a174:	4082      	lsls	r2, r0
 800a176:	4313      	orrs	r3, r2
 800a178:	3401      	adds	r4, #1
 800a17a:	9304      	str	r3, [sp, #16]
 800a17c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a180:	2206      	movs	r2, #6
 800a182:	4825      	ldr	r0, [pc, #148]	@ (800a218 <_svfiprintf_r+0x1ec>)
 800a184:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a188:	f7fd fce9 	bl	8007b5e <memchr>
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d036      	beq.n	800a1fe <_svfiprintf_r+0x1d2>
 800a190:	4b22      	ldr	r3, [pc, #136]	@ (800a21c <_svfiprintf_r+0x1f0>)
 800a192:	bb1b      	cbnz	r3, 800a1dc <_svfiprintf_r+0x1b0>
 800a194:	9b03      	ldr	r3, [sp, #12]
 800a196:	3307      	adds	r3, #7
 800a198:	f023 0307 	bic.w	r3, r3, #7
 800a19c:	3308      	adds	r3, #8
 800a19e:	9303      	str	r3, [sp, #12]
 800a1a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1a2:	4433      	add	r3, r6
 800a1a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1a6:	e76a      	b.n	800a07e <_svfiprintf_r+0x52>
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	2001      	movs	r0, #1
 800a1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1b0:	e7a8      	b.n	800a104 <_svfiprintf_r+0xd8>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f04f 0c0a 	mov.w	ip, #10
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	3401      	adds	r4, #1
 800a1bc:	9305      	str	r3, [sp, #20]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1c4:	3a30      	subs	r2, #48	@ 0x30
 800a1c6:	2a09      	cmp	r2, #9
 800a1c8:	d903      	bls.n	800a1d2 <_svfiprintf_r+0x1a6>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0c6      	beq.n	800a15c <_svfiprintf_r+0x130>
 800a1ce:	9105      	str	r1, [sp, #20]
 800a1d0:	e7c4      	b.n	800a15c <_svfiprintf_r+0x130>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1da:	e7f0      	b.n	800a1be <_svfiprintf_r+0x192>
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a220 <_svfiprintf_r+0x1f4>)
 800a1e6:	a904      	add	r1, sp, #16
 800a1e8:	f7fc fd34 	bl	8006c54 <_printf_float>
 800a1ec:	1c42      	adds	r2, r0, #1
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	d1d6      	bne.n	800a1a0 <_svfiprintf_r+0x174>
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	065b      	lsls	r3, r3, #25
 800a1f6:	f53f af2d 	bmi.w	800a054 <_svfiprintf_r+0x28>
 800a1fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1fc:	e72c      	b.n	800a058 <_svfiprintf_r+0x2c>
 800a1fe:	ab03      	add	r3, sp, #12
 800a200:	9300      	str	r3, [sp, #0]
 800a202:	462a      	mov	r2, r5
 800a204:	4638      	mov	r0, r7
 800a206:	4b06      	ldr	r3, [pc, #24]	@ (800a220 <_svfiprintf_r+0x1f4>)
 800a208:	a904      	add	r1, sp, #16
 800a20a:	f7fc ffc1 	bl	8007190 <_printf_i>
 800a20e:	e7ed      	b.n	800a1ec <_svfiprintf_r+0x1c0>
 800a210:	0800b6a0 	.word	0x0800b6a0
 800a214:	0800b6a6 	.word	0x0800b6a6
 800a218:	0800b6aa 	.word	0x0800b6aa
 800a21c:	08006c55 	.word	0x08006c55
 800a220:	08009f75 	.word	0x08009f75

0800a224 <__sflush_r>:
 800a224:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a22a:	0716      	lsls	r6, r2, #28
 800a22c:	4605      	mov	r5, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	d454      	bmi.n	800a2dc <__sflush_r+0xb8>
 800a232:	684b      	ldr	r3, [r1, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	dc02      	bgt.n	800a23e <__sflush_r+0x1a>
 800a238:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dd48      	ble.n	800a2d0 <__sflush_r+0xac>
 800a23e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a240:	2e00      	cmp	r6, #0
 800a242:	d045      	beq.n	800a2d0 <__sflush_r+0xac>
 800a244:	2300      	movs	r3, #0
 800a246:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a24a:	682f      	ldr	r7, [r5, #0]
 800a24c:	6a21      	ldr	r1, [r4, #32]
 800a24e:	602b      	str	r3, [r5, #0]
 800a250:	d030      	beq.n	800a2b4 <__sflush_r+0x90>
 800a252:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	0759      	lsls	r1, r3, #29
 800a258:	d505      	bpl.n	800a266 <__sflush_r+0x42>
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	1ad2      	subs	r2, r2, r3
 800a25e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a260:	b10b      	cbz	r3, 800a266 <__sflush_r+0x42>
 800a262:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a264:	1ad2      	subs	r2, r2, r3
 800a266:	2300      	movs	r3, #0
 800a268:	4628      	mov	r0, r5
 800a26a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a26c:	6a21      	ldr	r1, [r4, #32]
 800a26e:	47b0      	blx	r6
 800a270:	1c43      	adds	r3, r0, #1
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	d106      	bne.n	800a284 <__sflush_r+0x60>
 800a276:	6829      	ldr	r1, [r5, #0]
 800a278:	291d      	cmp	r1, #29
 800a27a:	d82b      	bhi.n	800a2d4 <__sflush_r+0xb0>
 800a27c:	4a28      	ldr	r2, [pc, #160]	@ (800a320 <__sflush_r+0xfc>)
 800a27e:	410a      	asrs	r2, r1
 800a280:	07d6      	lsls	r6, r2, #31
 800a282:	d427      	bmi.n	800a2d4 <__sflush_r+0xb0>
 800a284:	2200      	movs	r2, #0
 800a286:	6062      	str	r2, [r4, #4]
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	04d9      	lsls	r1, r3, #19
 800a28c:	6022      	str	r2, [r4, #0]
 800a28e:	d504      	bpl.n	800a29a <__sflush_r+0x76>
 800a290:	1c42      	adds	r2, r0, #1
 800a292:	d101      	bne.n	800a298 <__sflush_r+0x74>
 800a294:	682b      	ldr	r3, [r5, #0]
 800a296:	b903      	cbnz	r3, 800a29a <__sflush_r+0x76>
 800a298:	6560      	str	r0, [r4, #84]	@ 0x54
 800a29a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a29c:	602f      	str	r7, [r5, #0]
 800a29e:	b1b9      	cbz	r1, 800a2d0 <__sflush_r+0xac>
 800a2a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2a4:	4299      	cmp	r1, r3
 800a2a6:	d002      	beq.n	800a2ae <__sflush_r+0x8a>
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	f7fe fabd 	bl	8008828 <_free_r>
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2b2:	e00d      	b.n	800a2d0 <__sflush_r+0xac>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	47b0      	blx	r6
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	1c50      	adds	r0, r2, #1
 800a2be:	d1c9      	bne.n	800a254 <__sflush_r+0x30>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d0c6      	beq.n	800a254 <__sflush_r+0x30>
 800a2c6:	2b1d      	cmp	r3, #29
 800a2c8:	d001      	beq.n	800a2ce <__sflush_r+0xaa>
 800a2ca:	2b16      	cmp	r3, #22
 800a2cc:	d11d      	bne.n	800a30a <__sflush_r+0xe6>
 800a2ce:	602f      	str	r7, [r5, #0]
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e021      	b.n	800a318 <__sflush_r+0xf4>
 800a2d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2d8:	b21b      	sxth	r3, r3
 800a2da:	e01a      	b.n	800a312 <__sflush_r+0xee>
 800a2dc:	690f      	ldr	r7, [r1, #16]
 800a2de:	2f00      	cmp	r7, #0
 800a2e0:	d0f6      	beq.n	800a2d0 <__sflush_r+0xac>
 800a2e2:	0793      	lsls	r3, r2, #30
 800a2e4:	bf18      	it	ne
 800a2e6:	2300      	movne	r3, #0
 800a2e8:	680e      	ldr	r6, [r1, #0]
 800a2ea:	bf08      	it	eq
 800a2ec:	694b      	ldreq	r3, [r1, #20]
 800a2ee:	1bf6      	subs	r6, r6, r7
 800a2f0:	600f      	str	r7, [r1, #0]
 800a2f2:	608b      	str	r3, [r1, #8]
 800a2f4:	2e00      	cmp	r6, #0
 800a2f6:	ddeb      	ble.n	800a2d0 <__sflush_r+0xac>
 800a2f8:	4633      	mov	r3, r6
 800a2fa:	463a      	mov	r2, r7
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	6a21      	ldr	r1, [r4, #32]
 800a300:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a304:	47e0      	blx	ip
 800a306:	2800      	cmp	r0, #0
 800a308:	dc07      	bgt.n	800a31a <__sflush_r+0xf6>
 800a30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a30e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a312:	f04f 30ff 	mov.w	r0, #4294967295
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31a:	4407      	add	r7, r0
 800a31c:	1a36      	subs	r6, r6, r0
 800a31e:	e7e9      	b.n	800a2f4 <__sflush_r+0xd0>
 800a320:	dfbffffe 	.word	0xdfbffffe

0800a324 <_fflush_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	690b      	ldr	r3, [r1, #16]
 800a328:	4605      	mov	r5, r0
 800a32a:	460c      	mov	r4, r1
 800a32c:	b913      	cbnz	r3, 800a334 <_fflush_r+0x10>
 800a32e:	2500      	movs	r5, #0
 800a330:	4628      	mov	r0, r5
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	b118      	cbz	r0, 800a33e <_fflush_r+0x1a>
 800a336:	6a03      	ldr	r3, [r0, #32]
 800a338:	b90b      	cbnz	r3, 800a33e <_fflush_r+0x1a>
 800a33a:	f7fd fae5 	bl	8007908 <__sinit>
 800a33e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d0f3      	beq.n	800a32e <_fflush_r+0xa>
 800a346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a348:	07d0      	lsls	r0, r2, #31
 800a34a:	d404      	bmi.n	800a356 <_fflush_r+0x32>
 800a34c:	0599      	lsls	r1, r3, #22
 800a34e:	d402      	bmi.n	800a356 <_fflush_r+0x32>
 800a350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a352:	f7fd fc02 	bl	8007b5a <__retarget_lock_acquire_recursive>
 800a356:	4628      	mov	r0, r5
 800a358:	4621      	mov	r1, r4
 800a35a:	f7ff ff63 	bl	800a224 <__sflush_r>
 800a35e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a360:	4605      	mov	r5, r0
 800a362:	07da      	lsls	r2, r3, #31
 800a364:	d4e4      	bmi.n	800a330 <_fflush_r+0xc>
 800a366:	89a3      	ldrh	r3, [r4, #12]
 800a368:	059b      	lsls	r3, r3, #22
 800a36a:	d4e1      	bmi.n	800a330 <_fflush_r+0xc>
 800a36c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a36e:	f7fd fbf5 	bl	8007b5c <__retarget_lock_release_recursive>
 800a372:	e7dd      	b.n	800a330 <_fflush_r+0xc>

0800a374 <memmove>:
 800a374:	4288      	cmp	r0, r1
 800a376:	b510      	push	{r4, lr}
 800a378:	eb01 0402 	add.w	r4, r1, r2
 800a37c:	d902      	bls.n	800a384 <memmove+0x10>
 800a37e:	4284      	cmp	r4, r0
 800a380:	4623      	mov	r3, r4
 800a382:	d807      	bhi.n	800a394 <memmove+0x20>
 800a384:	1e43      	subs	r3, r0, #1
 800a386:	42a1      	cmp	r1, r4
 800a388:	d008      	beq.n	800a39c <memmove+0x28>
 800a38a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a38e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a392:	e7f8      	b.n	800a386 <memmove+0x12>
 800a394:	4601      	mov	r1, r0
 800a396:	4402      	add	r2, r0
 800a398:	428a      	cmp	r2, r1
 800a39a:	d100      	bne.n	800a39e <memmove+0x2a>
 800a39c:	bd10      	pop	{r4, pc}
 800a39e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a3a6:	e7f7      	b.n	800a398 <memmove+0x24>

0800a3a8 <_sbrk_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	4d05      	ldr	r5, [pc, #20]	@ (800a3c4 <_sbrk_r+0x1c>)
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	4608      	mov	r0, r1
 800a3b2:	602b      	str	r3, [r5, #0]
 800a3b4:	f7f8 f940 	bl	8002638 <_sbrk>
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	d102      	bne.n	800a3c2 <_sbrk_r+0x1a>
 800a3bc:	682b      	ldr	r3, [r5, #0]
 800a3be:	b103      	cbz	r3, 800a3c2 <_sbrk_r+0x1a>
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	bd38      	pop	{r3, r4, r5, pc}
 800a3c4:	20000a28 	.word	0x20000a28

0800a3c8 <memcpy>:
 800a3c8:	440a      	add	r2, r1
 800a3ca:	4291      	cmp	r1, r2
 800a3cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a3d0:	d100      	bne.n	800a3d4 <memcpy+0xc>
 800a3d2:	4770      	bx	lr
 800a3d4:	b510      	push	{r4, lr}
 800a3d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3da:	4291      	cmp	r1, r2
 800a3dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a3e0:	d1f9      	bne.n	800a3d6 <memcpy+0xe>
 800a3e2:	bd10      	pop	{r4, pc}

0800a3e4 <nan>:
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	4901      	ldr	r1, [pc, #4]	@ (800a3ec <nan+0x8>)
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	7ff80000 	.word	0x7ff80000

0800a3f0 <__assert_func>:
 800a3f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a3f2:	4614      	mov	r4, r2
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b09      	ldr	r3, [pc, #36]	@ (800a41c <__assert_func+0x2c>)
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	68d8      	ldr	r0, [r3, #12]
 800a3fe:	b954      	cbnz	r4, 800a416 <__assert_func+0x26>
 800a400:	4b07      	ldr	r3, [pc, #28]	@ (800a420 <__assert_func+0x30>)
 800a402:	461c      	mov	r4, r3
 800a404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a408:	9100      	str	r1, [sp, #0]
 800a40a:	462b      	mov	r3, r5
 800a40c:	4905      	ldr	r1, [pc, #20]	@ (800a424 <__assert_func+0x34>)
 800a40e:	f000 fba7 	bl	800ab60 <fiprintf>
 800a412:	f000 fbb7 	bl	800ab84 <abort>
 800a416:	4b04      	ldr	r3, [pc, #16]	@ (800a428 <__assert_func+0x38>)
 800a418:	e7f4      	b.n	800a404 <__assert_func+0x14>
 800a41a:	bf00      	nop
 800a41c:	20000048 	.word	0x20000048
 800a420:	0800b6f4 	.word	0x0800b6f4
 800a424:	0800b6c6 	.word	0x0800b6c6
 800a428:	0800b6b9 	.word	0x0800b6b9

0800a42c <_calloc_r>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	fba1 5402 	umull	r5, r4, r1, r2
 800a432:	b93c      	cbnz	r4, 800a444 <_calloc_r+0x18>
 800a434:	4629      	mov	r1, r5
 800a436:	f7fe fa69 	bl	800890c <_malloc_r>
 800a43a:	4606      	mov	r6, r0
 800a43c:	b928      	cbnz	r0, 800a44a <_calloc_r+0x1e>
 800a43e:	2600      	movs	r6, #0
 800a440:	4630      	mov	r0, r6
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	220c      	movs	r2, #12
 800a446:	6002      	str	r2, [r0, #0]
 800a448:	e7f9      	b.n	800a43e <_calloc_r+0x12>
 800a44a:	462a      	mov	r2, r5
 800a44c:	4621      	mov	r1, r4
 800a44e:	f7fd faf4 	bl	8007a3a <memset>
 800a452:	e7f5      	b.n	800a440 <_calloc_r+0x14>

0800a454 <rshift>:
 800a454:	6903      	ldr	r3, [r0, #16]
 800a456:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a45a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a45e:	f100 0414 	add.w	r4, r0, #20
 800a462:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a466:	dd46      	ble.n	800a4f6 <rshift+0xa2>
 800a468:	f011 011f 	ands.w	r1, r1, #31
 800a46c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a470:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a474:	d10c      	bne.n	800a490 <rshift+0x3c>
 800a476:	4629      	mov	r1, r5
 800a478:	f100 0710 	add.w	r7, r0, #16
 800a47c:	42b1      	cmp	r1, r6
 800a47e:	d335      	bcc.n	800a4ec <rshift+0x98>
 800a480:	1a9b      	subs	r3, r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	1eea      	subs	r2, r5, #3
 800a486:	4296      	cmp	r6, r2
 800a488:	bf38      	it	cc
 800a48a:	2300      	movcc	r3, #0
 800a48c:	4423      	add	r3, r4
 800a48e:	e015      	b.n	800a4bc <rshift+0x68>
 800a490:	46a1      	mov	r9, r4
 800a492:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a496:	f1c1 0820 	rsb	r8, r1, #32
 800a49a:	40cf      	lsrs	r7, r1
 800a49c:	f105 0e04 	add.w	lr, r5, #4
 800a4a0:	4576      	cmp	r6, lr
 800a4a2:	46f4      	mov	ip, lr
 800a4a4:	d816      	bhi.n	800a4d4 <rshift+0x80>
 800a4a6:	1a9a      	subs	r2, r3, r2
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	3a04      	subs	r2, #4
 800a4ac:	3501      	adds	r5, #1
 800a4ae:	42ae      	cmp	r6, r5
 800a4b0:	bf38      	it	cc
 800a4b2:	2200      	movcc	r2, #0
 800a4b4:	18a3      	adds	r3, r4, r2
 800a4b6:	50a7      	str	r7, [r4, r2]
 800a4b8:	b107      	cbz	r7, 800a4bc <rshift+0x68>
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	eba3 0204 	sub.w	r2, r3, r4
 800a4c2:	bf08      	it	eq
 800a4c4:	2300      	moveq	r3, #0
 800a4c6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a4ca:	6102      	str	r2, [r0, #16]
 800a4cc:	bf08      	it	eq
 800a4ce:	6143      	streq	r3, [r0, #20]
 800a4d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a4d4:	f8dc c000 	ldr.w	ip, [ip]
 800a4d8:	fa0c fc08 	lsl.w	ip, ip, r8
 800a4dc:	ea4c 0707 	orr.w	r7, ip, r7
 800a4e0:	f849 7b04 	str.w	r7, [r9], #4
 800a4e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a4e8:	40cf      	lsrs	r7, r1
 800a4ea:	e7d9      	b.n	800a4a0 <rshift+0x4c>
 800a4ec:	f851 cb04 	ldr.w	ip, [r1], #4
 800a4f0:	f847 cf04 	str.w	ip, [r7, #4]!
 800a4f4:	e7c2      	b.n	800a47c <rshift+0x28>
 800a4f6:	4623      	mov	r3, r4
 800a4f8:	e7e0      	b.n	800a4bc <rshift+0x68>

0800a4fa <__hexdig_fun>:
 800a4fa:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d802      	bhi.n	800a508 <__hexdig_fun+0xe>
 800a502:	3820      	subs	r0, #32
 800a504:	b2c0      	uxtb	r0, r0
 800a506:	4770      	bx	lr
 800a508:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a50c:	2b05      	cmp	r3, #5
 800a50e:	d801      	bhi.n	800a514 <__hexdig_fun+0x1a>
 800a510:	3847      	subs	r0, #71	@ 0x47
 800a512:	e7f7      	b.n	800a504 <__hexdig_fun+0xa>
 800a514:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a518:	2b05      	cmp	r3, #5
 800a51a:	d801      	bhi.n	800a520 <__hexdig_fun+0x26>
 800a51c:	3827      	subs	r0, #39	@ 0x27
 800a51e:	e7f1      	b.n	800a504 <__hexdig_fun+0xa>
 800a520:	2000      	movs	r0, #0
 800a522:	4770      	bx	lr

0800a524 <__gethex>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	468a      	mov	sl, r1
 800a52a:	4690      	mov	r8, r2
 800a52c:	b085      	sub	sp, #20
 800a52e:	9302      	str	r3, [sp, #8]
 800a530:	680b      	ldr	r3, [r1, #0]
 800a532:	9001      	str	r0, [sp, #4]
 800a534:	1c9c      	adds	r4, r3, #2
 800a536:	46a1      	mov	r9, r4
 800a538:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a53c:	2830      	cmp	r0, #48	@ 0x30
 800a53e:	d0fa      	beq.n	800a536 <__gethex+0x12>
 800a540:	eba9 0303 	sub.w	r3, r9, r3
 800a544:	f1a3 0b02 	sub.w	fp, r3, #2
 800a548:	f7ff ffd7 	bl	800a4fa <__hexdig_fun>
 800a54c:	4605      	mov	r5, r0
 800a54e:	2800      	cmp	r0, #0
 800a550:	d168      	bne.n	800a624 <__gethex+0x100>
 800a552:	2201      	movs	r2, #1
 800a554:	4648      	mov	r0, r9
 800a556:	499f      	ldr	r1, [pc, #636]	@ (800a7d4 <__gethex+0x2b0>)
 800a558:	f7fd fa77 	bl	8007a4a <strncmp>
 800a55c:	4607      	mov	r7, r0
 800a55e:	2800      	cmp	r0, #0
 800a560:	d167      	bne.n	800a632 <__gethex+0x10e>
 800a562:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a566:	4626      	mov	r6, r4
 800a568:	f7ff ffc7 	bl	800a4fa <__hexdig_fun>
 800a56c:	2800      	cmp	r0, #0
 800a56e:	d062      	beq.n	800a636 <__gethex+0x112>
 800a570:	4623      	mov	r3, r4
 800a572:	7818      	ldrb	r0, [r3, #0]
 800a574:	4699      	mov	r9, r3
 800a576:	2830      	cmp	r0, #48	@ 0x30
 800a578:	f103 0301 	add.w	r3, r3, #1
 800a57c:	d0f9      	beq.n	800a572 <__gethex+0x4e>
 800a57e:	f7ff ffbc 	bl	800a4fa <__hexdig_fun>
 800a582:	fab0 f580 	clz	r5, r0
 800a586:	f04f 0b01 	mov.w	fp, #1
 800a58a:	096d      	lsrs	r5, r5, #5
 800a58c:	464a      	mov	r2, r9
 800a58e:	4616      	mov	r6, r2
 800a590:	7830      	ldrb	r0, [r6, #0]
 800a592:	3201      	adds	r2, #1
 800a594:	f7ff ffb1 	bl	800a4fa <__hexdig_fun>
 800a598:	2800      	cmp	r0, #0
 800a59a:	d1f8      	bne.n	800a58e <__gethex+0x6a>
 800a59c:	2201      	movs	r2, #1
 800a59e:	4630      	mov	r0, r6
 800a5a0:	498c      	ldr	r1, [pc, #560]	@ (800a7d4 <__gethex+0x2b0>)
 800a5a2:	f7fd fa52 	bl	8007a4a <strncmp>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d13f      	bne.n	800a62a <__gethex+0x106>
 800a5aa:	b944      	cbnz	r4, 800a5be <__gethex+0x9a>
 800a5ac:	1c74      	adds	r4, r6, #1
 800a5ae:	4622      	mov	r2, r4
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	7830      	ldrb	r0, [r6, #0]
 800a5b4:	3201      	adds	r2, #1
 800a5b6:	f7ff ffa0 	bl	800a4fa <__hexdig_fun>
 800a5ba:	2800      	cmp	r0, #0
 800a5bc:	d1f8      	bne.n	800a5b0 <__gethex+0x8c>
 800a5be:	1ba4      	subs	r4, r4, r6
 800a5c0:	00a7      	lsls	r7, r4, #2
 800a5c2:	7833      	ldrb	r3, [r6, #0]
 800a5c4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a5c8:	2b50      	cmp	r3, #80	@ 0x50
 800a5ca:	d13e      	bne.n	800a64a <__gethex+0x126>
 800a5cc:	7873      	ldrb	r3, [r6, #1]
 800a5ce:	2b2b      	cmp	r3, #43	@ 0x2b
 800a5d0:	d033      	beq.n	800a63a <__gethex+0x116>
 800a5d2:	2b2d      	cmp	r3, #45	@ 0x2d
 800a5d4:	d034      	beq.n	800a640 <__gethex+0x11c>
 800a5d6:	2400      	movs	r4, #0
 800a5d8:	1c71      	adds	r1, r6, #1
 800a5da:	7808      	ldrb	r0, [r1, #0]
 800a5dc:	f7ff ff8d 	bl	800a4fa <__hexdig_fun>
 800a5e0:	1e43      	subs	r3, r0, #1
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b18      	cmp	r3, #24
 800a5e6:	d830      	bhi.n	800a64a <__gethex+0x126>
 800a5e8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5f0:	f7ff ff83 	bl	800a4fa <__hexdig_fun>
 800a5f4:	f100 3cff 	add.w	ip, r0, #4294967295
 800a5f8:	fa5f fc8c 	uxtb.w	ip, ip
 800a5fc:	f1bc 0f18 	cmp.w	ip, #24
 800a600:	f04f 030a 	mov.w	r3, #10
 800a604:	d91e      	bls.n	800a644 <__gethex+0x120>
 800a606:	b104      	cbz	r4, 800a60a <__gethex+0xe6>
 800a608:	4252      	negs	r2, r2
 800a60a:	4417      	add	r7, r2
 800a60c:	f8ca 1000 	str.w	r1, [sl]
 800a610:	b1ed      	cbz	r5, 800a64e <__gethex+0x12a>
 800a612:	f1bb 0f00 	cmp.w	fp, #0
 800a616:	bf0c      	ite	eq
 800a618:	2506      	moveq	r5, #6
 800a61a:	2500      	movne	r5, #0
 800a61c:	4628      	mov	r0, r5
 800a61e:	b005      	add	sp, #20
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a624:	2500      	movs	r5, #0
 800a626:	462c      	mov	r4, r5
 800a628:	e7b0      	b.n	800a58c <__gethex+0x68>
 800a62a:	2c00      	cmp	r4, #0
 800a62c:	d1c7      	bne.n	800a5be <__gethex+0x9a>
 800a62e:	4627      	mov	r7, r4
 800a630:	e7c7      	b.n	800a5c2 <__gethex+0x9e>
 800a632:	464e      	mov	r6, r9
 800a634:	462f      	mov	r7, r5
 800a636:	2501      	movs	r5, #1
 800a638:	e7c3      	b.n	800a5c2 <__gethex+0x9e>
 800a63a:	2400      	movs	r4, #0
 800a63c:	1cb1      	adds	r1, r6, #2
 800a63e:	e7cc      	b.n	800a5da <__gethex+0xb6>
 800a640:	2401      	movs	r4, #1
 800a642:	e7fb      	b.n	800a63c <__gethex+0x118>
 800a644:	fb03 0002 	mla	r0, r3, r2, r0
 800a648:	e7ce      	b.n	800a5e8 <__gethex+0xc4>
 800a64a:	4631      	mov	r1, r6
 800a64c:	e7de      	b.n	800a60c <__gethex+0xe8>
 800a64e:	4629      	mov	r1, r5
 800a650:	eba6 0309 	sub.w	r3, r6, r9
 800a654:	3b01      	subs	r3, #1
 800a656:	2b07      	cmp	r3, #7
 800a658:	dc0a      	bgt.n	800a670 <__gethex+0x14c>
 800a65a:	9801      	ldr	r0, [sp, #4]
 800a65c:	f7fe f9e2 	bl	8008a24 <_Balloc>
 800a660:	4604      	mov	r4, r0
 800a662:	b940      	cbnz	r0, 800a676 <__gethex+0x152>
 800a664:	4602      	mov	r2, r0
 800a666:	21e4      	movs	r1, #228	@ 0xe4
 800a668:	4b5b      	ldr	r3, [pc, #364]	@ (800a7d8 <__gethex+0x2b4>)
 800a66a:	485c      	ldr	r0, [pc, #368]	@ (800a7dc <__gethex+0x2b8>)
 800a66c:	f7ff fec0 	bl	800a3f0 <__assert_func>
 800a670:	3101      	adds	r1, #1
 800a672:	105b      	asrs	r3, r3, #1
 800a674:	e7ef      	b.n	800a656 <__gethex+0x132>
 800a676:	2300      	movs	r3, #0
 800a678:	f100 0a14 	add.w	sl, r0, #20
 800a67c:	4655      	mov	r5, sl
 800a67e:	469b      	mov	fp, r3
 800a680:	45b1      	cmp	r9, r6
 800a682:	d337      	bcc.n	800a6f4 <__gethex+0x1d0>
 800a684:	f845 bb04 	str.w	fp, [r5], #4
 800a688:	eba5 050a 	sub.w	r5, r5, sl
 800a68c:	10ad      	asrs	r5, r5, #2
 800a68e:	6125      	str	r5, [r4, #16]
 800a690:	4658      	mov	r0, fp
 800a692:	f7fe fab9 	bl	8008c08 <__hi0bits>
 800a696:	016d      	lsls	r5, r5, #5
 800a698:	f8d8 6000 	ldr.w	r6, [r8]
 800a69c:	1a2d      	subs	r5, r5, r0
 800a69e:	42b5      	cmp	r5, r6
 800a6a0:	dd54      	ble.n	800a74c <__gethex+0x228>
 800a6a2:	1bad      	subs	r5, r5, r6
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7fe fe41 	bl	800932e <__any_on>
 800a6ac:	4681      	mov	r9, r0
 800a6ae:	b178      	cbz	r0, 800a6d0 <__gethex+0x1ac>
 800a6b0:	f04f 0901 	mov.w	r9, #1
 800a6b4:	1e6b      	subs	r3, r5, #1
 800a6b6:	1159      	asrs	r1, r3, #5
 800a6b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a6bc:	f003 021f 	and.w	r2, r3, #31
 800a6c0:	fa09 f202 	lsl.w	r2, r9, r2
 800a6c4:	420a      	tst	r2, r1
 800a6c6:	d003      	beq.n	800a6d0 <__gethex+0x1ac>
 800a6c8:	454b      	cmp	r3, r9
 800a6ca:	dc36      	bgt.n	800a73a <__gethex+0x216>
 800a6cc:	f04f 0902 	mov.w	r9, #2
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	f7ff febe 	bl	800a454 <rshift>
 800a6d8:	442f      	add	r7, r5
 800a6da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6de:	42bb      	cmp	r3, r7
 800a6e0:	da42      	bge.n	800a768 <__gethex+0x244>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	9801      	ldr	r0, [sp, #4]
 800a6e6:	f7fe f9dd 	bl	8008aa4 <_Bfree>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6ee:	25a3      	movs	r5, #163	@ 0xa3
 800a6f0:	6013      	str	r3, [r2, #0]
 800a6f2:	e793      	b.n	800a61c <__gethex+0xf8>
 800a6f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a6f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800a6fa:	d012      	beq.n	800a722 <__gethex+0x1fe>
 800a6fc:	2b20      	cmp	r3, #32
 800a6fe:	d104      	bne.n	800a70a <__gethex+0x1e6>
 800a700:	f845 bb04 	str.w	fp, [r5], #4
 800a704:	f04f 0b00 	mov.w	fp, #0
 800a708:	465b      	mov	r3, fp
 800a70a:	7830      	ldrb	r0, [r6, #0]
 800a70c:	9303      	str	r3, [sp, #12]
 800a70e:	f7ff fef4 	bl	800a4fa <__hexdig_fun>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	f000 000f 	and.w	r0, r0, #15
 800a718:	4098      	lsls	r0, r3
 800a71a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a71e:	3304      	adds	r3, #4
 800a720:	e7ae      	b.n	800a680 <__gethex+0x15c>
 800a722:	45b1      	cmp	r9, r6
 800a724:	d8ea      	bhi.n	800a6fc <__gethex+0x1d8>
 800a726:	2201      	movs	r2, #1
 800a728:	4630      	mov	r0, r6
 800a72a:	492a      	ldr	r1, [pc, #168]	@ (800a7d4 <__gethex+0x2b0>)
 800a72c:	9303      	str	r3, [sp, #12]
 800a72e:	f7fd f98c 	bl	8007a4a <strncmp>
 800a732:	9b03      	ldr	r3, [sp, #12]
 800a734:	2800      	cmp	r0, #0
 800a736:	d1e1      	bne.n	800a6fc <__gethex+0x1d8>
 800a738:	e7a2      	b.n	800a680 <__gethex+0x15c>
 800a73a:	4620      	mov	r0, r4
 800a73c:	1ea9      	subs	r1, r5, #2
 800a73e:	f7fe fdf6 	bl	800932e <__any_on>
 800a742:	2800      	cmp	r0, #0
 800a744:	d0c2      	beq.n	800a6cc <__gethex+0x1a8>
 800a746:	f04f 0903 	mov.w	r9, #3
 800a74a:	e7c1      	b.n	800a6d0 <__gethex+0x1ac>
 800a74c:	da09      	bge.n	800a762 <__gethex+0x23e>
 800a74e:	1b75      	subs	r5, r6, r5
 800a750:	4621      	mov	r1, r4
 800a752:	462a      	mov	r2, r5
 800a754:	9801      	ldr	r0, [sp, #4]
 800a756:	f7fe fbbb 	bl	8008ed0 <__lshift>
 800a75a:	4604      	mov	r4, r0
 800a75c:	1b7f      	subs	r7, r7, r5
 800a75e:	f100 0a14 	add.w	sl, r0, #20
 800a762:	f04f 0900 	mov.w	r9, #0
 800a766:	e7b8      	b.n	800a6da <__gethex+0x1b6>
 800a768:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a76c:	42bd      	cmp	r5, r7
 800a76e:	dd6f      	ble.n	800a850 <__gethex+0x32c>
 800a770:	1bed      	subs	r5, r5, r7
 800a772:	42ae      	cmp	r6, r5
 800a774:	dc34      	bgt.n	800a7e0 <__gethex+0x2bc>
 800a776:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d022      	beq.n	800a7c4 <__gethex+0x2a0>
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d024      	beq.n	800a7cc <__gethex+0x2a8>
 800a782:	2b01      	cmp	r3, #1
 800a784:	d115      	bne.n	800a7b2 <__gethex+0x28e>
 800a786:	42ae      	cmp	r6, r5
 800a788:	d113      	bne.n	800a7b2 <__gethex+0x28e>
 800a78a:	2e01      	cmp	r6, #1
 800a78c:	d10b      	bne.n	800a7a6 <__gethex+0x282>
 800a78e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a792:	9a02      	ldr	r2, [sp, #8]
 800a794:	2562      	movs	r5, #98	@ 0x62
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	2301      	movs	r3, #1
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	f8ca 3000 	str.w	r3, [sl]
 800a7a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7a2:	601c      	str	r4, [r3, #0]
 800a7a4:	e73a      	b.n	800a61c <__gethex+0xf8>
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	1e71      	subs	r1, r6, #1
 800a7aa:	f7fe fdc0 	bl	800932e <__any_on>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d1ed      	bne.n	800a78e <__gethex+0x26a>
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	9801      	ldr	r0, [sp, #4]
 800a7b6:	f7fe f975 	bl	8008aa4 <_Bfree>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7be:	2550      	movs	r5, #80	@ 0x50
 800a7c0:	6013      	str	r3, [r2, #0]
 800a7c2:	e72b      	b.n	800a61c <__gethex+0xf8>
 800a7c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1f3      	bne.n	800a7b2 <__gethex+0x28e>
 800a7ca:	e7e0      	b.n	800a78e <__gethex+0x26a>
 800a7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1dd      	bne.n	800a78e <__gethex+0x26a>
 800a7d2:	e7ee      	b.n	800a7b2 <__gethex+0x28e>
 800a7d4:	0800b648 	.word	0x0800b648
 800a7d8:	0800b4e0 	.word	0x0800b4e0
 800a7dc:	0800b6f5 	.word	0x0800b6f5
 800a7e0:	1e6f      	subs	r7, r5, #1
 800a7e2:	f1b9 0f00 	cmp.w	r9, #0
 800a7e6:	d130      	bne.n	800a84a <__gethex+0x326>
 800a7e8:	b127      	cbz	r7, 800a7f4 <__gethex+0x2d0>
 800a7ea:	4639      	mov	r1, r7
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f7fe fd9e 	bl	800932e <__any_on>
 800a7f2:	4681      	mov	r9, r0
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	1b76      	subs	r6, r6, r5
 800a7fa:	2502      	movs	r5, #2
 800a7fc:	117a      	asrs	r2, r7, #5
 800a7fe:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a802:	f007 071f 	and.w	r7, r7, #31
 800a806:	40bb      	lsls	r3, r7
 800a808:	4213      	tst	r3, r2
 800a80a:	4620      	mov	r0, r4
 800a80c:	bf18      	it	ne
 800a80e:	f049 0902 	orrne.w	r9, r9, #2
 800a812:	f7ff fe1f 	bl	800a454 <rshift>
 800a816:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a81a:	f1b9 0f00 	cmp.w	r9, #0
 800a81e:	d047      	beq.n	800a8b0 <__gethex+0x38c>
 800a820:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a824:	2b02      	cmp	r3, #2
 800a826:	d015      	beq.n	800a854 <__gethex+0x330>
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d017      	beq.n	800a85c <__gethex+0x338>
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d109      	bne.n	800a844 <__gethex+0x320>
 800a830:	f019 0f02 	tst.w	r9, #2
 800a834:	d006      	beq.n	800a844 <__gethex+0x320>
 800a836:	f8da 3000 	ldr.w	r3, [sl]
 800a83a:	ea49 0903 	orr.w	r9, r9, r3
 800a83e:	f019 0f01 	tst.w	r9, #1
 800a842:	d10e      	bne.n	800a862 <__gethex+0x33e>
 800a844:	f045 0510 	orr.w	r5, r5, #16
 800a848:	e032      	b.n	800a8b0 <__gethex+0x38c>
 800a84a:	f04f 0901 	mov.w	r9, #1
 800a84e:	e7d1      	b.n	800a7f4 <__gethex+0x2d0>
 800a850:	2501      	movs	r5, #1
 800a852:	e7e2      	b.n	800a81a <__gethex+0x2f6>
 800a854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a856:	f1c3 0301 	rsb	r3, r3, #1
 800a85a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a85c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d0f0      	beq.n	800a844 <__gethex+0x320>
 800a862:	f04f 0c00 	mov.w	ip, #0
 800a866:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a86a:	f104 0314 	add.w	r3, r4, #20
 800a86e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a872:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a876:	4618      	mov	r0, r3
 800a878:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a880:	d01b      	beq.n	800a8ba <__gethex+0x396>
 800a882:	3201      	adds	r2, #1
 800a884:	6002      	str	r2, [r0, #0]
 800a886:	2d02      	cmp	r5, #2
 800a888:	f104 0314 	add.w	r3, r4, #20
 800a88c:	d13c      	bne.n	800a908 <__gethex+0x3e4>
 800a88e:	f8d8 2000 	ldr.w	r2, [r8]
 800a892:	3a01      	subs	r2, #1
 800a894:	42b2      	cmp	r2, r6
 800a896:	d109      	bne.n	800a8ac <__gethex+0x388>
 800a898:	2201      	movs	r2, #1
 800a89a:	1171      	asrs	r1, r6, #5
 800a89c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a8a0:	f006 061f 	and.w	r6, r6, #31
 800a8a4:	fa02 f606 	lsl.w	r6, r2, r6
 800a8a8:	421e      	tst	r6, r3
 800a8aa:	d13a      	bne.n	800a922 <__gethex+0x3fe>
 800a8ac:	f045 0520 	orr.w	r5, r5, #32
 800a8b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8b2:	601c      	str	r4, [r3, #0]
 800a8b4:	9b02      	ldr	r3, [sp, #8]
 800a8b6:	601f      	str	r7, [r3, #0]
 800a8b8:	e6b0      	b.n	800a61c <__gethex+0xf8>
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8c0:	d8d9      	bhi.n	800a876 <__gethex+0x352>
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	459b      	cmp	fp, r3
 800a8c6:	db17      	blt.n	800a8f8 <__gethex+0x3d4>
 800a8c8:	6861      	ldr	r1, [r4, #4]
 800a8ca:	9801      	ldr	r0, [sp, #4]
 800a8cc:	3101      	adds	r1, #1
 800a8ce:	f7fe f8a9 	bl	8008a24 <_Balloc>
 800a8d2:	4681      	mov	r9, r0
 800a8d4:	b918      	cbnz	r0, 800a8de <__gethex+0x3ba>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	2184      	movs	r1, #132	@ 0x84
 800a8da:	4b19      	ldr	r3, [pc, #100]	@ (800a940 <__gethex+0x41c>)
 800a8dc:	e6c5      	b.n	800a66a <__gethex+0x146>
 800a8de:	6922      	ldr	r2, [r4, #16]
 800a8e0:	f104 010c 	add.w	r1, r4, #12
 800a8e4:	3202      	adds	r2, #2
 800a8e6:	0092      	lsls	r2, r2, #2
 800a8e8:	300c      	adds	r0, #12
 800a8ea:	f7ff fd6d 	bl	800a3c8 <memcpy>
 800a8ee:	4621      	mov	r1, r4
 800a8f0:	9801      	ldr	r0, [sp, #4]
 800a8f2:	f7fe f8d7 	bl	8008aa4 <_Bfree>
 800a8f6:	464c      	mov	r4, r9
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	1c5a      	adds	r2, r3, #1
 800a8fc:	6122      	str	r2, [r4, #16]
 800a8fe:	2201      	movs	r2, #1
 800a900:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a904:	615a      	str	r2, [r3, #20]
 800a906:	e7be      	b.n	800a886 <__gethex+0x362>
 800a908:	6922      	ldr	r2, [r4, #16]
 800a90a:	455a      	cmp	r2, fp
 800a90c:	dd0b      	ble.n	800a926 <__gethex+0x402>
 800a90e:	2101      	movs	r1, #1
 800a910:	4620      	mov	r0, r4
 800a912:	f7ff fd9f 	bl	800a454 <rshift>
 800a916:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a91a:	3701      	adds	r7, #1
 800a91c:	42bb      	cmp	r3, r7
 800a91e:	f6ff aee0 	blt.w	800a6e2 <__gethex+0x1be>
 800a922:	2501      	movs	r5, #1
 800a924:	e7c2      	b.n	800a8ac <__gethex+0x388>
 800a926:	f016 061f 	ands.w	r6, r6, #31
 800a92a:	d0fa      	beq.n	800a922 <__gethex+0x3fe>
 800a92c:	4453      	add	r3, sl
 800a92e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a932:	f7fe f969 	bl	8008c08 <__hi0bits>
 800a936:	f1c6 0620 	rsb	r6, r6, #32
 800a93a:	42b0      	cmp	r0, r6
 800a93c:	dbe7      	blt.n	800a90e <__gethex+0x3ea>
 800a93e:	e7f0      	b.n	800a922 <__gethex+0x3fe>
 800a940:	0800b4e0 	.word	0x0800b4e0

0800a944 <L_shift>:
 800a944:	f1c2 0208 	rsb	r2, r2, #8
 800a948:	0092      	lsls	r2, r2, #2
 800a94a:	b570      	push	{r4, r5, r6, lr}
 800a94c:	f1c2 0620 	rsb	r6, r2, #32
 800a950:	6843      	ldr	r3, [r0, #4]
 800a952:	6804      	ldr	r4, [r0, #0]
 800a954:	fa03 f506 	lsl.w	r5, r3, r6
 800a958:	432c      	orrs	r4, r5
 800a95a:	40d3      	lsrs	r3, r2
 800a95c:	6004      	str	r4, [r0, #0]
 800a95e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a962:	4288      	cmp	r0, r1
 800a964:	d3f4      	bcc.n	800a950 <L_shift+0xc>
 800a966:	bd70      	pop	{r4, r5, r6, pc}

0800a968 <__match>:
 800a968:	b530      	push	{r4, r5, lr}
 800a96a:	6803      	ldr	r3, [r0, #0]
 800a96c:	3301      	adds	r3, #1
 800a96e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a972:	b914      	cbnz	r4, 800a97a <__match+0x12>
 800a974:	6003      	str	r3, [r0, #0]
 800a976:	2001      	movs	r0, #1
 800a978:	bd30      	pop	{r4, r5, pc}
 800a97a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a97e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a982:	2d19      	cmp	r5, #25
 800a984:	bf98      	it	ls
 800a986:	3220      	addls	r2, #32
 800a988:	42a2      	cmp	r2, r4
 800a98a:	d0f0      	beq.n	800a96e <__match+0x6>
 800a98c:	2000      	movs	r0, #0
 800a98e:	e7f3      	b.n	800a978 <__match+0x10>

0800a990 <__hexnan>:
 800a990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a994:	2500      	movs	r5, #0
 800a996:	680b      	ldr	r3, [r1, #0]
 800a998:	4682      	mov	sl, r0
 800a99a:	115e      	asrs	r6, r3, #5
 800a99c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9a0:	f013 031f 	ands.w	r3, r3, #31
 800a9a4:	bf18      	it	ne
 800a9a6:	3604      	addne	r6, #4
 800a9a8:	1f37      	subs	r7, r6, #4
 800a9aa:	4690      	mov	r8, r2
 800a9ac:	46b9      	mov	r9, r7
 800a9ae:	463c      	mov	r4, r7
 800a9b0:	46ab      	mov	fp, r5
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	6801      	ldr	r1, [r0, #0]
 800a9b6:	9301      	str	r3, [sp, #4]
 800a9b8:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9bc:	9502      	str	r5, [sp, #8]
 800a9be:	784a      	ldrb	r2, [r1, #1]
 800a9c0:	1c4b      	adds	r3, r1, #1
 800a9c2:	9303      	str	r3, [sp, #12]
 800a9c4:	b342      	cbz	r2, 800aa18 <__hexnan+0x88>
 800a9c6:	4610      	mov	r0, r2
 800a9c8:	9105      	str	r1, [sp, #20]
 800a9ca:	9204      	str	r2, [sp, #16]
 800a9cc:	f7ff fd95 	bl	800a4fa <__hexdig_fun>
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	d151      	bne.n	800aa78 <__hexnan+0xe8>
 800a9d4:	9a04      	ldr	r2, [sp, #16]
 800a9d6:	9905      	ldr	r1, [sp, #20]
 800a9d8:	2a20      	cmp	r2, #32
 800a9da:	d818      	bhi.n	800aa0e <__hexnan+0x7e>
 800a9dc:	9b02      	ldr	r3, [sp, #8]
 800a9de:	459b      	cmp	fp, r3
 800a9e0:	dd13      	ble.n	800aa0a <__hexnan+0x7a>
 800a9e2:	454c      	cmp	r4, r9
 800a9e4:	d206      	bcs.n	800a9f4 <__hexnan+0x64>
 800a9e6:	2d07      	cmp	r5, #7
 800a9e8:	dc04      	bgt.n	800a9f4 <__hexnan+0x64>
 800a9ea:	462a      	mov	r2, r5
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f7ff ffa8 	bl	800a944 <L_shift>
 800a9f4:	4544      	cmp	r4, r8
 800a9f6:	d952      	bls.n	800aa9e <__hexnan+0x10e>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f1a4 0904 	sub.w	r9, r4, #4
 800a9fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa02:	461d      	mov	r5, r3
 800aa04:	464c      	mov	r4, r9
 800aa06:	f8cd b008 	str.w	fp, [sp, #8]
 800aa0a:	9903      	ldr	r1, [sp, #12]
 800aa0c:	e7d7      	b.n	800a9be <__hexnan+0x2e>
 800aa0e:	2a29      	cmp	r2, #41	@ 0x29
 800aa10:	d157      	bne.n	800aac2 <__hexnan+0x132>
 800aa12:	3102      	adds	r1, #2
 800aa14:	f8ca 1000 	str.w	r1, [sl]
 800aa18:	f1bb 0f00 	cmp.w	fp, #0
 800aa1c:	d051      	beq.n	800aac2 <__hexnan+0x132>
 800aa1e:	454c      	cmp	r4, r9
 800aa20:	d206      	bcs.n	800aa30 <__hexnan+0xa0>
 800aa22:	2d07      	cmp	r5, #7
 800aa24:	dc04      	bgt.n	800aa30 <__hexnan+0xa0>
 800aa26:	462a      	mov	r2, r5
 800aa28:	4649      	mov	r1, r9
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	f7ff ff8a 	bl	800a944 <L_shift>
 800aa30:	4544      	cmp	r4, r8
 800aa32:	d936      	bls.n	800aaa2 <__hexnan+0x112>
 800aa34:	4623      	mov	r3, r4
 800aa36:	f1a8 0204 	sub.w	r2, r8, #4
 800aa3a:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa3e:	429f      	cmp	r7, r3
 800aa40:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa44:	d2f9      	bcs.n	800aa3a <__hexnan+0xaa>
 800aa46:	1b3b      	subs	r3, r7, r4
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	3304      	adds	r3, #4
 800aa4e:	3401      	adds	r4, #1
 800aa50:	3e03      	subs	r6, #3
 800aa52:	42b4      	cmp	r4, r6
 800aa54:	bf88      	it	hi
 800aa56:	2304      	movhi	r3, #4
 800aa58:	2200      	movs	r2, #0
 800aa5a:	4443      	add	r3, r8
 800aa5c:	f843 2b04 	str.w	r2, [r3], #4
 800aa60:	429f      	cmp	r7, r3
 800aa62:	d2fb      	bcs.n	800aa5c <__hexnan+0xcc>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	b91b      	cbnz	r3, 800aa70 <__hexnan+0xe0>
 800aa68:	4547      	cmp	r7, r8
 800aa6a:	d128      	bne.n	800aabe <__hexnan+0x12e>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	603b      	str	r3, [r7, #0]
 800aa70:	2005      	movs	r0, #5
 800aa72:	b007      	add	sp, #28
 800aa74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2d08      	cmp	r5, #8
 800aa7c:	f10b 0b01 	add.w	fp, fp, #1
 800aa80:	dd06      	ble.n	800aa90 <__hexnan+0x100>
 800aa82:	4544      	cmp	r4, r8
 800aa84:	d9c1      	bls.n	800aa0a <__hexnan+0x7a>
 800aa86:	2300      	movs	r3, #0
 800aa88:	2501      	movs	r5, #1
 800aa8a:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa8e:	3c04      	subs	r4, #4
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	f000 000f 	and.w	r0, r0, #15
 800aa96:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800aa9a:	6020      	str	r0, [r4, #0]
 800aa9c:	e7b5      	b.n	800aa0a <__hexnan+0x7a>
 800aa9e:	2508      	movs	r5, #8
 800aaa0:	e7b3      	b.n	800aa0a <__hexnan+0x7a>
 800aaa2:	9b01      	ldr	r3, [sp, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0dd      	beq.n	800aa64 <__hexnan+0xd4>
 800aaa8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaac:	f1c3 0320 	rsb	r3, r3, #32
 800aab0:	40da      	lsrs	r2, r3
 800aab2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800aab6:	4013      	ands	r3, r2
 800aab8:	f846 3c04 	str.w	r3, [r6, #-4]
 800aabc:	e7d2      	b.n	800aa64 <__hexnan+0xd4>
 800aabe:	3f04      	subs	r7, #4
 800aac0:	e7d0      	b.n	800aa64 <__hexnan+0xd4>
 800aac2:	2004      	movs	r0, #4
 800aac4:	e7d5      	b.n	800aa72 <__hexnan+0xe2>

0800aac6 <__ascii_mbtowc>:
 800aac6:	b082      	sub	sp, #8
 800aac8:	b901      	cbnz	r1, 800aacc <__ascii_mbtowc+0x6>
 800aaca:	a901      	add	r1, sp, #4
 800aacc:	b142      	cbz	r2, 800aae0 <__ascii_mbtowc+0x1a>
 800aace:	b14b      	cbz	r3, 800aae4 <__ascii_mbtowc+0x1e>
 800aad0:	7813      	ldrb	r3, [r2, #0]
 800aad2:	600b      	str	r3, [r1, #0]
 800aad4:	7812      	ldrb	r2, [r2, #0]
 800aad6:	1e10      	subs	r0, r2, #0
 800aad8:	bf18      	it	ne
 800aada:	2001      	movne	r0, #1
 800aadc:	b002      	add	sp, #8
 800aade:	4770      	bx	lr
 800aae0:	4610      	mov	r0, r2
 800aae2:	e7fb      	b.n	800aadc <__ascii_mbtowc+0x16>
 800aae4:	f06f 0001 	mvn.w	r0, #1
 800aae8:	e7f8      	b.n	800aadc <__ascii_mbtowc+0x16>

0800aaea <_realloc_r>:
 800aaea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaee:	4680      	mov	r8, r0
 800aaf0:	4615      	mov	r5, r2
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b921      	cbnz	r1, 800ab00 <_realloc_r+0x16>
 800aaf6:	4611      	mov	r1, r2
 800aaf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aafc:	f7fd bf06 	b.w	800890c <_malloc_r>
 800ab00:	b92a      	cbnz	r2, 800ab0e <_realloc_r+0x24>
 800ab02:	f7fd fe91 	bl	8008828 <_free_r>
 800ab06:	2400      	movs	r4, #0
 800ab08:	4620      	mov	r0, r4
 800ab0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab0e:	f000 f840 	bl	800ab92 <_malloc_usable_size_r>
 800ab12:	4285      	cmp	r5, r0
 800ab14:	4606      	mov	r6, r0
 800ab16:	d802      	bhi.n	800ab1e <_realloc_r+0x34>
 800ab18:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab1c:	d8f4      	bhi.n	800ab08 <_realloc_r+0x1e>
 800ab1e:	4629      	mov	r1, r5
 800ab20:	4640      	mov	r0, r8
 800ab22:	f7fd fef3 	bl	800890c <_malloc_r>
 800ab26:	4607      	mov	r7, r0
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d0ec      	beq.n	800ab06 <_realloc_r+0x1c>
 800ab2c:	42b5      	cmp	r5, r6
 800ab2e:	462a      	mov	r2, r5
 800ab30:	4621      	mov	r1, r4
 800ab32:	bf28      	it	cs
 800ab34:	4632      	movcs	r2, r6
 800ab36:	f7ff fc47 	bl	800a3c8 <memcpy>
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	f7fd fe73 	bl	8008828 <_free_r>
 800ab42:	463c      	mov	r4, r7
 800ab44:	e7e0      	b.n	800ab08 <_realloc_r+0x1e>

0800ab46 <__ascii_wctomb>:
 800ab46:	4603      	mov	r3, r0
 800ab48:	4608      	mov	r0, r1
 800ab4a:	b141      	cbz	r1, 800ab5e <__ascii_wctomb+0x18>
 800ab4c:	2aff      	cmp	r2, #255	@ 0xff
 800ab4e:	d904      	bls.n	800ab5a <__ascii_wctomb+0x14>
 800ab50:	228a      	movs	r2, #138	@ 0x8a
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	4770      	bx	lr
 800ab5a:	2001      	movs	r0, #1
 800ab5c:	700a      	strb	r2, [r1, #0]
 800ab5e:	4770      	bx	lr

0800ab60 <fiprintf>:
 800ab60:	b40e      	push	{r1, r2, r3}
 800ab62:	b503      	push	{r0, r1, lr}
 800ab64:	4601      	mov	r1, r0
 800ab66:	ab03      	add	r3, sp, #12
 800ab68:	4805      	ldr	r0, [pc, #20]	@ (800ab80 <fiprintf+0x20>)
 800ab6a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab6e:	6800      	ldr	r0, [r0, #0]
 800ab70:	9301      	str	r3, [sp, #4]
 800ab72:	f000 f83d 	bl	800abf0 <_vfiprintf_r>
 800ab76:	b002      	add	sp, #8
 800ab78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab7c:	b003      	add	sp, #12
 800ab7e:	4770      	bx	lr
 800ab80:	20000048 	.word	0x20000048

0800ab84 <abort>:
 800ab84:	2006      	movs	r0, #6
 800ab86:	b508      	push	{r3, lr}
 800ab88:	f000 fa06 	bl	800af98 <raise>
 800ab8c:	2001      	movs	r0, #1
 800ab8e:	f7f7 fcde 	bl	800254e <_exit>

0800ab92 <_malloc_usable_size_r>:
 800ab92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab96:	1f18      	subs	r0, r3, #4
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bfbc      	itt	lt
 800ab9c:	580b      	ldrlt	r3, [r1, r0]
 800ab9e:	18c0      	addlt	r0, r0, r3
 800aba0:	4770      	bx	lr

0800aba2 <__sfputc_r>:
 800aba2:	6893      	ldr	r3, [r2, #8]
 800aba4:	b410      	push	{r4}
 800aba6:	3b01      	subs	r3, #1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	6093      	str	r3, [r2, #8]
 800abac:	da07      	bge.n	800abbe <__sfputc_r+0x1c>
 800abae:	6994      	ldr	r4, [r2, #24]
 800abb0:	42a3      	cmp	r3, r4
 800abb2:	db01      	blt.n	800abb8 <__sfputc_r+0x16>
 800abb4:	290a      	cmp	r1, #10
 800abb6:	d102      	bne.n	800abbe <__sfputc_r+0x1c>
 800abb8:	bc10      	pop	{r4}
 800abba:	f000 b931 	b.w	800ae20 <__swbuf_r>
 800abbe:	6813      	ldr	r3, [r2, #0]
 800abc0:	1c58      	adds	r0, r3, #1
 800abc2:	6010      	str	r0, [r2, #0]
 800abc4:	7019      	strb	r1, [r3, #0]
 800abc6:	4608      	mov	r0, r1
 800abc8:	bc10      	pop	{r4}
 800abca:	4770      	bx	lr

0800abcc <__sfputs_r>:
 800abcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abce:	4606      	mov	r6, r0
 800abd0:	460f      	mov	r7, r1
 800abd2:	4614      	mov	r4, r2
 800abd4:	18d5      	adds	r5, r2, r3
 800abd6:	42ac      	cmp	r4, r5
 800abd8:	d101      	bne.n	800abde <__sfputs_r+0x12>
 800abda:	2000      	movs	r0, #0
 800abdc:	e007      	b.n	800abee <__sfputs_r+0x22>
 800abde:	463a      	mov	r2, r7
 800abe0:	4630      	mov	r0, r6
 800abe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe6:	f7ff ffdc 	bl	800aba2 <__sfputc_r>
 800abea:	1c43      	adds	r3, r0, #1
 800abec:	d1f3      	bne.n	800abd6 <__sfputs_r+0xa>
 800abee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800abf0 <_vfiprintf_r>:
 800abf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf4:	460d      	mov	r5, r1
 800abf6:	4614      	mov	r4, r2
 800abf8:	4698      	mov	r8, r3
 800abfa:	4606      	mov	r6, r0
 800abfc:	b09d      	sub	sp, #116	@ 0x74
 800abfe:	b118      	cbz	r0, 800ac08 <_vfiprintf_r+0x18>
 800ac00:	6a03      	ldr	r3, [r0, #32]
 800ac02:	b90b      	cbnz	r3, 800ac08 <_vfiprintf_r+0x18>
 800ac04:	f7fc fe80 	bl	8007908 <__sinit>
 800ac08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac0a:	07d9      	lsls	r1, r3, #31
 800ac0c:	d405      	bmi.n	800ac1a <_vfiprintf_r+0x2a>
 800ac0e:	89ab      	ldrh	r3, [r5, #12]
 800ac10:	059a      	lsls	r2, r3, #22
 800ac12:	d402      	bmi.n	800ac1a <_vfiprintf_r+0x2a>
 800ac14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac16:	f7fc ffa0 	bl	8007b5a <__retarget_lock_acquire_recursive>
 800ac1a:	89ab      	ldrh	r3, [r5, #12]
 800ac1c:	071b      	lsls	r3, r3, #28
 800ac1e:	d501      	bpl.n	800ac24 <_vfiprintf_r+0x34>
 800ac20:	692b      	ldr	r3, [r5, #16]
 800ac22:	b99b      	cbnz	r3, 800ac4c <_vfiprintf_r+0x5c>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4630      	mov	r0, r6
 800ac28:	f000 f938 	bl	800ae9c <__swsetup_r>
 800ac2c:	b170      	cbz	r0, 800ac4c <_vfiprintf_r+0x5c>
 800ac2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac30:	07dc      	lsls	r4, r3, #31
 800ac32:	d504      	bpl.n	800ac3e <_vfiprintf_r+0x4e>
 800ac34:	f04f 30ff 	mov.w	r0, #4294967295
 800ac38:	b01d      	add	sp, #116	@ 0x74
 800ac3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	0598      	lsls	r0, r3, #22
 800ac42:	d4f7      	bmi.n	800ac34 <_vfiprintf_r+0x44>
 800ac44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac46:	f7fc ff89 	bl	8007b5c <__retarget_lock_release_recursive>
 800ac4a:	e7f3      	b.n	800ac34 <_vfiprintf_r+0x44>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac50:	2320      	movs	r3, #32
 800ac52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac56:	2330      	movs	r3, #48	@ 0x30
 800ac58:	f04f 0901 	mov.w	r9, #1
 800ac5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac60:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ae0c <_vfiprintf_r+0x21c>
 800ac64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac68:	4623      	mov	r3, r4
 800ac6a:	469a      	mov	sl, r3
 800ac6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac70:	b10a      	cbz	r2, 800ac76 <_vfiprintf_r+0x86>
 800ac72:	2a25      	cmp	r2, #37	@ 0x25
 800ac74:	d1f9      	bne.n	800ac6a <_vfiprintf_r+0x7a>
 800ac76:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7a:	d00b      	beq.n	800ac94 <_vfiprintf_r+0xa4>
 800ac7c:	465b      	mov	r3, fp
 800ac7e:	4622      	mov	r2, r4
 800ac80:	4629      	mov	r1, r5
 800ac82:	4630      	mov	r0, r6
 800ac84:	f7ff ffa2 	bl	800abcc <__sfputs_r>
 800ac88:	3001      	adds	r0, #1
 800ac8a:	f000 80a7 	beq.w	800addc <_vfiprintf_r+0x1ec>
 800ac8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac90:	445a      	add	r2, fp
 800ac92:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac94:	f89a 3000 	ldrb.w	r3, [sl]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 809f 	beq.w	800addc <_vfiprintf_r+0x1ec>
 800ac9e:	2300      	movs	r3, #0
 800aca0:	f04f 32ff 	mov.w	r2, #4294967295
 800aca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aca8:	f10a 0a01 	add.w	sl, sl, #1
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acb4:	931a      	str	r3, [sp, #104]	@ 0x68
 800acb6:	4654      	mov	r4, sl
 800acb8:	2205      	movs	r2, #5
 800acba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acbe:	4853      	ldr	r0, [pc, #332]	@ (800ae0c <_vfiprintf_r+0x21c>)
 800acc0:	f7fc ff4d 	bl	8007b5e <memchr>
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	b9d8      	cbnz	r0, 800ad00 <_vfiprintf_r+0x110>
 800acc8:	06d1      	lsls	r1, r2, #27
 800acca:	bf44      	itt	mi
 800accc:	2320      	movmi	r3, #32
 800acce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acd2:	0713      	lsls	r3, r2, #28
 800acd4:	bf44      	itt	mi
 800acd6:	232b      	movmi	r3, #43	@ 0x2b
 800acd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acdc:	f89a 3000 	ldrb.w	r3, [sl]
 800ace0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ace2:	d015      	beq.n	800ad10 <_vfiprintf_r+0x120>
 800ace4:	4654      	mov	r4, sl
 800ace6:	2000      	movs	r0, #0
 800ace8:	f04f 0c0a 	mov.w	ip, #10
 800acec:	9a07      	ldr	r2, [sp, #28]
 800acee:	4621      	mov	r1, r4
 800acf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf4:	3b30      	subs	r3, #48	@ 0x30
 800acf6:	2b09      	cmp	r3, #9
 800acf8:	d94b      	bls.n	800ad92 <_vfiprintf_r+0x1a2>
 800acfa:	b1b0      	cbz	r0, 800ad2a <_vfiprintf_r+0x13a>
 800acfc:	9207      	str	r2, [sp, #28]
 800acfe:	e014      	b.n	800ad2a <_vfiprintf_r+0x13a>
 800ad00:	eba0 0308 	sub.w	r3, r0, r8
 800ad04:	fa09 f303 	lsl.w	r3, r9, r3
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	46a2      	mov	sl, r4
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	e7d2      	b.n	800acb6 <_vfiprintf_r+0xc6>
 800ad10:	9b03      	ldr	r3, [sp, #12]
 800ad12:	1d19      	adds	r1, r3, #4
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	9103      	str	r1, [sp, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bfbb      	ittet	lt
 800ad1c:	425b      	neglt	r3, r3
 800ad1e:	f042 0202 	orrlt.w	r2, r2, #2
 800ad22:	9307      	strge	r3, [sp, #28]
 800ad24:	9307      	strlt	r3, [sp, #28]
 800ad26:	bfb8      	it	lt
 800ad28:	9204      	strlt	r2, [sp, #16]
 800ad2a:	7823      	ldrb	r3, [r4, #0]
 800ad2c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad2e:	d10a      	bne.n	800ad46 <_vfiprintf_r+0x156>
 800ad30:	7863      	ldrb	r3, [r4, #1]
 800ad32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad34:	d132      	bne.n	800ad9c <_vfiprintf_r+0x1ac>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	3402      	adds	r4, #2
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	9203      	str	r2, [sp, #12]
 800ad40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad44:	9305      	str	r3, [sp, #20]
 800ad46:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ae10 <_vfiprintf_r+0x220>
 800ad4a:	2203      	movs	r2, #3
 800ad4c:	4650      	mov	r0, sl
 800ad4e:	7821      	ldrb	r1, [r4, #0]
 800ad50:	f7fc ff05 	bl	8007b5e <memchr>
 800ad54:	b138      	cbz	r0, 800ad66 <_vfiprintf_r+0x176>
 800ad56:	2240      	movs	r2, #64	@ 0x40
 800ad58:	9b04      	ldr	r3, [sp, #16]
 800ad5a:	eba0 000a 	sub.w	r0, r0, sl
 800ad5e:	4082      	lsls	r2, r0
 800ad60:	4313      	orrs	r3, r2
 800ad62:	3401      	adds	r4, #1
 800ad64:	9304      	str	r3, [sp, #16]
 800ad66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6a:	2206      	movs	r2, #6
 800ad6c:	4829      	ldr	r0, [pc, #164]	@ (800ae14 <_vfiprintf_r+0x224>)
 800ad6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad72:	f7fc fef4 	bl	8007b5e <memchr>
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d03f      	beq.n	800adfa <_vfiprintf_r+0x20a>
 800ad7a:	4b27      	ldr	r3, [pc, #156]	@ (800ae18 <_vfiprintf_r+0x228>)
 800ad7c:	bb1b      	cbnz	r3, 800adc6 <_vfiprintf_r+0x1d6>
 800ad7e:	9b03      	ldr	r3, [sp, #12]
 800ad80:	3307      	adds	r3, #7
 800ad82:	f023 0307 	bic.w	r3, r3, #7
 800ad86:	3308      	adds	r3, #8
 800ad88:	9303      	str	r3, [sp, #12]
 800ad8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8c:	443b      	add	r3, r7
 800ad8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad90:	e76a      	b.n	800ac68 <_vfiprintf_r+0x78>
 800ad92:	460c      	mov	r4, r1
 800ad94:	2001      	movs	r0, #1
 800ad96:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad9a:	e7a8      	b.n	800acee <_vfiprintf_r+0xfe>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f04f 0c0a 	mov.w	ip, #10
 800ada2:	4619      	mov	r1, r3
 800ada4:	3401      	adds	r4, #1
 800ada6:	9305      	str	r3, [sp, #20]
 800ada8:	4620      	mov	r0, r4
 800adaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adae:	3a30      	subs	r2, #48	@ 0x30
 800adb0:	2a09      	cmp	r2, #9
 800adb2:	d903      	bls.n	800adbc <_vfiprintf_r+0x1cc>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d0c6      	beq.n	800ad46 <_vfiprintf_r+0x156>
 800adb8:	9105      	str	r1, [sp, #20]
 800adba:	e7c4      	b.n	800ad46 <_vfiprintf_r+0x156>
 800adbc:	4604      	mov	r4, r0
 800adbe:	2301      	movs	r3, #1
 800adc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc4:	e7f0      	b.n	800ada8 <_vfiprintf_r+0x1b8>
 800adc6:	ab03      	add	r3, sp, #12
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	462a      	mov	r2, r5
 800adcc:	4630      	mov	r0, r6
 800adce:	4b13      	ldr	r3, [pc, #76]	@ (800ae1c <_vfiprintf_r+0x22c>)
 800add0:	a904      	add	r1, sp, #16
 800add2:	f7fb ff3f 	bl	8006c54 <_printf_float>
 800add6:	4607      	mov	r7, r0
 800add8:	1c78      	adds	r0, r7, #1
 800adda:	d1d6      	bne.n	800ad8a <_vfiprintf_r+0x19a>
 800addc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adde:	07d9      	lsls	r1, r3, #31
 800ade0:	d405      	bmi.n	800adee <_vfiprintf_r+0x1fe>
 800ade2:	89ab      	ldrh	r3, [r5, #12]
 800ade4:	059a      	lsls	r2, r3, #22
 800ade6:	d402      	bmi.n	800adee <_vfiprintf_r+0x1fe>
 800ade8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adea:	f7fc feb7 	bl	8007b5c <__retarget_lock_release_recursive>
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	065b      	lsls	r3, r3, #25
 800adf2:	f53f af1f 	bmi.w	800ac34 <_vfiprintf_r+0x44>
 800adf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adf8:	e71e      	b.n	800ac38 <_vfiprintf_r+0x48>
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	462a      	mov	r2, r5
 800ae00:	4630      	mov	r0, r6
 800ae02:	4b06      	ldr	r3, [pc, #24]	@ (800ae1c <_vfiprintf_r+0x22c>)
 800ae04:	a904      	add	r1, sp, #16
 800ae06:	f7fc f9c3 	bl	8007190 <_printf_i>
 800ae0a:	e7e4      	b.n	800add6 <_vfiprintf_r+0x1e6>
 800ae0c:	0800b6a0 	.word	0x0800b6a0
 800ae10:	0800b6a6 	.word	0x0800b6a6
 800ae14:	0800b6aa 	.word	0x0800b6aa
 800ae18:	08006c55 	.word	0x08006c55
 800ae1c:	0800abcd 	.word	0x0800abcd

0800ae20 <__swbuf_r>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	460e      	mov	r6, r1
 800ae24:	4614      	mov	r4, r2
 800ae26:	4605      	mov	r5, r0
 800ae28:	b118      	cbz	r0, 800ae32 <__swbuf_r+0x12>
 800ae2a:	6a03      	ldr	r3, [r0, #32]
 800ae2c:	b90b      	cbnz	r3, 800ae32 <__swbuf_r+0x12>
 800ae2e:	f7fc fd6b 	bl	8007908 <__sinit>
 800ae32:	69a3      	ldr	r3, [r4, #24]
 800ae34:	60a3      	str	r3, [r4, #8]
 800ae36:	89a3      	ldrh	r3, [r4, #12]
 800ae38:	071a      	lsls	r2, r3, #28
 800ae3a:	d501      	bpl.n	800ae40 <__swbuf_r+0x20>
 800ae3c:	6923      	ldr	r3, [r4, #16]
 800ae3e:	b943      	cbnz	r3, 800ae52 <__swbuf_r+0x32>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 f82a 	bl	800ae9c <__swsetup_r>
 800ae48:	b118      	cbz	r0, 800ae52 <__swbuf_r+0x32>
 800ae4a:	f04f 37ff 	mov.w	r7, #4294967295
 800ae4e:	4638      	mov	r0, r7
 800ae50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae52:	6823      	ldr	r3, [r4, #0]
 800ae54:	6922      	ldr	r2, [r4, #16]
 800ae56:	b2f6      	uxtb	r6, r6
 800ae58:	1a98      	subs	r0, r3, r2
 800ae5a:	6963      	ldr	r3, [r4, #20]
 800ae5c:	4637      	mov	r7, r6
 800ae5e:	4283      	cmp	r3, r0
 800ae60:	dc05      	bgt.n	800ae6e <__swbuf_r+0x4e>
 800ae62:	4621      	mov	r1, r4
 800ae64:	4628      	mov	r0, r5
 800ae66:	f7ff fa5d 	bl	800a324 <_fflush_r>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	d1ed      	bne.n	800ae4a <__swbuf_r+0x2a>
 800ae6e:	68a3      	ldr	r3, [r4, #8]
 800ae70:	3b01      	subs	r3, #1
 800ae72:	60a3      	str	r3, [r4, #8]
 800ae74:	6823      	ldr	r3, [r4, #0]
 800ae76:	1c5a      	adds	r2, r3, #1
 800ae78:	6022      	str	r2, [r4, #0]
 800ae7a:	701e      	strb	r6, [r3, #0]
 800ae7c:	6962      	ldr	r2, [r4, #20]
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d004      	beq.n	800ae8e <__swbuf_r+0x6e>
 800ae84:	89a3      	ldrh	r3, [r4, #12]
 800ae86:	07db      	lsls	r3, r3, #31
 800ae88:	d5e1      	bpl.n	800ae4e <__swbuf_r+0x2e>
 800ae8a:	2e0a      	cmp	r6, #10
 800ae8c:	d1df      	bne.n	800ae4e <__swbuf_r+0x2e>
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4628      	mov	r0, r5
 800ae92:	f7ff fa47 	bl	800a324 <_fflush_r>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d0d9      	beq.n	800ae4e <__swbuf_r+0x2e>
 800ae9a:	e7d6      	b.n	800ae4a <__swbuf_r+0x2a>

0800ae9c <__swsetup_r>:
 800ae9c:	b538      	push	{r3, r4, r5, lr}
 800ae9e:	4b29      	ldr	r3, [pc, #164]	@ (800af44 <__swsetup_r+0xa8>)
 800aea0:	4605      	mov	r5, r0
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	460c      	mov	r4, r1
 800aea6:	b118      	cbz	r0, 800aeb0 <__swsetup_r+0x14>
 800aea8:	6a03      	ldr	r3, [r0, #32]
 800aeaa:	b90b      	cbnz	r3, 800aeb0 <__swsetup_r+0x14>
 800aeac:	f7fc fd2c 	bl	8007908 <__sinit>
 800aeb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb4:	0719      	lsls	r1, r3, #28
 800aeb6:	d422      	bmi.n	800aefe <__swsetup_r+0x62>
 800aeb8:	06da      	lsls	r2, r3, #27
 800aeba:	d407      	bmi.n	800aecc <__swsetup_r+0x30>
 800aebc:	2209      	movs	r2, #9
 800aebe:	602a      	str	r2, [r5, #0]
 800aec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	e033      	b.n	800af34 <__swsetup_r+0x98>
 800aecc:	0758      	lsls	r0, r3, #29
 800aece:	d512      	bpl.n	800aef6 <__swsetup_r+0x5a>
 800aed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aed2:	b141      	cbz	r1, 800aee6 <__swsetup_r+0x4a>
 800aed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aed8:	4299      	cmp	r1, r3
 800aeda:	d002      	beq.n	800aee2 <__swsetup_r+0x46>
 800aedc:	4628      	mov	r0, r5
 800aede:	f7fd fca3 	bl	8008828 <_free_r>
 800aee2:	2300      	movs	r3, #0
 800aee4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	2300      	movs	r3, #0
 800aef0:	6063      	str	r3, [r4, #4]
 800aef2:	6923      	ldr	r3, [r4, #16]
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f043 0308 	orr.w	r3, r3, #8
 800aefc:	81a3      	strh	r3, [r4, #12]
 800aefe:	6923      	ldr	r3, [r4, #16]
 800af00:	b94b      	cbnz	r3, 800af16 <__swsetup_r+0x7a>
 800af02:	89a3      	ldrh	r3, [r4, #12]
 800af04:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af0c:	d003      	beq.n	800af16 <__swsetup_r+0x7a>
 800af0e:	4621      	mov	r1, r4
 800af10:	4628      	mov	r0, r5
 800af12:	f000 f882 	bl	800b01a <__smakebuf_r>
 800af16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af1a:	f013 0201 	ands.w	r2, r3, #1
 800af1e:	d00a      	beq.n	800af36 <__swsetup_r+0x9a>
 800af20:	2200      	movs	r2, #0
 800af22:	60a2      	str	r2, [r4, #8]
 800af24:	6962      	ldr	r2, [r4, #20]
 800af26:	4252      	negs	r2, r2
 800af28:	61a2      	str	r2, [r4, #24]
 800af2a:	6922      	ldr	r2, [r4, #16]
 800af2c:	b942      	cbnz	r2, 800af40 <__swsetup_r+0xa4>
 800af2e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af32:	d1c5      	bne.n	800aec0 <__swsetup_r+0x24>
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	0799      	lsls	r1, r3, #30
 800af38:	bf58      	it	pl
 800af3a:	6962      	ldrpl	r2, [r4, #20]
 800af3c:	60a2      	str	r2, [r4, #8]
 800af3e:	e7f4      	b.n	800af2a <__swsetup_r+0x8e>
 800af40:	2000      	movs	r0, #0
 800af42:	e7f7      	b.n	800af34 <__swsetup_r+0x98>
 800af44:	20000048 	.word	0x20000048

0800af48 <_raise_r>:
 800af48:	291f      	cmp	r1, #31
 800af4a:	b538      	push	{r3, r4, r5, lr}
 800af4c:	4605      	mov	r5, r0
 800af4e:	460c      	mov	r4, r1
 800af50:	d904      	bls.n	800af5c <_raise_r+0x14>
 800af52:	2316      	movs	r3, #22
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	f04f 30ff 	mov.w	r0, #4294967295
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af5e:	b112      	cbz	r2, 800af66 <_raise_r+0x1e>
 800af60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af64:	b94b      	cbnz	r3, 800af7a <_raise_r+0x32>
 800af66:	4628      	mov	r0, r5
 800af68:	f000 f830 	bl	800afcc <_getpid_r>
 800af6c:	4622      	mov	r2, r4
 800af6e:	4601      	mov	r1, r0
 800af70:	4628      	mov	r0, r5
 800af72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af76:	f000 b817 	b.w	800afa8 <_kill_r>
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d00a      	beq.n	800af94 <_raise_r+0x4c>
 800af7e:	1c59      	adds	r1, r3, #1
 800af80:	d103      	bne.n	800af8a <_raise_r+0x42>
 800af82:	2316      	movs	r3, #22
 800af84:	6003      	str	r3, [r0, #0]
 800af86:	2001      	movs	r0, #1
 800af88:	e7e7      	b.n	800af5a <_raise_r+0x12>
 800af8a:	2100      	movs	r1, #0
 800af8c:	4620      	mov	r0, r4
 800af8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af92:	4798      	blx	r3
 800af94:	2000      	movs	r0, #0
 800af96:	e7e0      	b.n	800af5a <_raise_r+0x12>

0800af98 <raise>:
 800af98:	4b02      	ldr	r3, [pc, #8]	@ (800afa4 <raise+0xc>)
 800af9a:	4601      	mov	r1, r0
 800af9c:	6818      	ldr	r0, [r3, #0]
 800af9e:	f7ff bfd3 	b.w	800af48 <_raise_r>
 800afa2:	bf00      	nop
 800afa4:	20000048 	.word	0x20000048

0800afa8 <_kill_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	2300      	movs	r3, #0
 800afac:	4d06      	ldr	r5, [pc, #24]	@ (800afc8 <_kill_r+0x20>)
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	4611      	mov	r1, r2
 800afb4:	602b      	str	r3, [r5, #0]
 800afb6:	f7f7 faba 	bl	800252e <_kill>
 800afba:	1c43      	adds	r3, r0, #1
 800afbc:	d102      	bne.n	800afc4 <_kill_r+0x1c>
 800afbe:	682b      	ldr	r3, [r5, #0]
 800afc0:	b103      	cbz	r3, 800afc4 <_kill_r+0x1c>
 800afc2:	6023      	str	r3, [r4, #0]
 800afc4:	bd38      	pop	{r3, r4, r5, pc}
 800afc6:	bf00      	nop
 800afc8:	20000a28 	.word	0x20000a28

0800afcc <_getpid_r>:
 800afcc:	f7f7 baa8 	b.w	8002520 <_getpid>

0800afd0 <__swhatbuf_r>:
 800afd0:	b570      	push	{r4, r5, r6, lr}
 800afd2:	460c      	mov	r4, r1
 800afd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afd8:	4615      	mov	r5, r2
 800afda:	2900      	cmp	r1, #0
 800afdc:	461e      	mov	r6, r3
 800afde:	b096      	sub	sp, #88	@ 0x58
 800afe0:	da0c      	bge.n	800affc <__swhatbuf_r+0x2c>
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	2100      	movs	r1, #0
 800afe6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afea:	bf14      	ite	ne
 800afec:	2340      	movne	r3, #64	@ 0x40
 800afee:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aff2:	2000      	movs	r0, #0
 800aff4:	6031      	str	r1, [r6, #0]
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	b016      	add	sp, #88	@ 0x58
 800affa:	bd70      	pop	{r4, r5, r6, pc}
 800affc:	466a      	mov	r2, sp
 800affe:	f000 f849 	bl	800b094 <_fstat_r>
 800b002:	2800      	cmp	r0, #0
 800b004:	dbed      	blt.n	800afe2 <__swhatbuf_r+0x12>
 800b006:	9901      	ldr	r1, [sp, #4]
 800b008:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b00c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b010:	4259      	negs	r1, r3
 800b012:	4159      	adcs	r1, r3
 800b014:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b018:	e7eb      	b.n	800aff2 <__swhatbuf_r+0x22>

0800b01a <__smakebuf_r>:
 800b01a:	898b      	ldrh	r3, [r1, #12]
 800b01c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b01e:	079d      	lsls	r5, r3, #30
 800b020:	4606      	mov	r6, r0
 800b022:	460c      	mov	r4, r1
 800b024:	d507      	bpl.n	800b036 <__smakebuf_r+0x1c>
 800b026:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b02a:	6023      	str	r3, [r4, #0]
 800b02c:	6123      	str	r3, [r4, #16]
 800b02e:	2301      	movs	r3, #1
 800b030:	6163      	str	r3, [r4, #20]
 800b032:	b003      	add	sp, #12
 800b034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b036:	466a      	mov	r2, sp
 800b038:	ab01      	add	r3, sp, #4
 800b03a:	f7ff ffc9 	bl	800afd0 <__swhatbuf_r>
 800b03e:	9f00      	ldr	r7, [sp, #0]
 800b040:	4605      	mov	r5, r0
 800b042:	4639      	mov	r1, r7
 800b044:	4630      	mov	r0, r6
 800b046:	f7fd fc61 	bl	800890c <_malloc_r>
 800b04a:	b948      	cbnz	r0, 800b060 <__smakebuf_r+0x46>
 800b04c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b050:	059a      	lsls	r2, r3, #22
 800b052:	d4ee      	bmi.n	800b032 <__smakebuf_r+0x18>
 800b054:	f023 0303 	bic.w	r3, r3, #3
 800b058:	f043 0302 	orr.w	r3, r3, #2
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	e7e2      	b.n	800b026 <__smakebuf_r+0xc>
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b06a:	81a3      	strh	r3, [r4, #12]
 800b06c:	9b01      	ldr	r3, [sp, #4]
 800b06e:	6020      	str	r0, [r4, #0]
 800b070:	b15b      	cbz	r3, 800b08a <__smakebuf_r+0x70>
 800b072:	4630      	mov	r0, r6
 800b074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b078:	f000 f81e 	bl	800b0b8 <_isatty_r>
 800b07c:	b128      	cbz	r0, 800b08a <__smakebuf_r+0x70>
 800b07e:	89a3      	ldrh	r3, [r4, #12]
 800b080:	f023 0303 	bic.w	r3, r3, #3
 800b084:	f043 0301 	orr.w	r3, r3, #1
 800b088:	81a3      	strh	r3, [r4, #12]
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	431d      	orrs	r5, r3
 800b08e:	81a5      	strh	r5, [r4, #12]
 800b090:	e7cf      	b.n	800b032 <__smakebuf_r+0x18>
	...

0800b094 <_fstat_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	2300      	movs	r3, #0
 800b098:	4d06      	ldr	r5, [pc, #24]	@ (800b0b4 <_fstat_r+0x20>)
 800b09a:	4604      	mov	r4, r0
 800b09c:	4608      	mov	r0, r1
 800b09e:	4611      	mov	r1, r2
 800b0a0:	602b      	str	r3, [r5, #0]
 800b0a2:	f7f7 faa3 	bl	80025ec <_fstat>
 800b0a6:	1c43      	adds	r3, r0, #1
 800b0a8:	d102      	bne.n	800b0b0 <_fstat_r+0x1c>
 800b0aa:	682b      	ldr	r3, [r5, #0]
 800b0ac:	b103      	cbz	r3, 800b0b0 <_fstat_r+0x1c>
 800b0ae:	6023      	str	r3, [r4, #0]
 800b0b0:	bd38      	pop	{r3, r4, r5, pc}
 800b0b2:	bf00      	nop
 800b0b4:	20000a28 	.word	0x20000a28

0800b0b8 <_isatty_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	4d05      	ldr	r5, [pc, #20]	@ (800b0d4 <_isatty_r+0x1c>)
 800b0be:	4604      	mov	r4, r0
 800b0c0:	4608      	mov	r0, r1
 800b0c2:	602b      	str	r3, [r5, #0]
 800b0c4:	f7f7 faa1 	bl	800260a <_isatty>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_isatty_r+0x1a>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_isatty_r+0x1a>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	20000a28 	.word	0x20000a28

0800b0d8 <sqrt>:
 800b0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0da:	4606      	mov	r6, r0
 800b0dc:	460f      	mov	r7, r1
 800b0de:	f000 f81f 	bl	800b120 <__ieee754_sqrt>
 800b0e2:	4632      	mov	r2, r6
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	460d      	mov	r5, r1
 800b0e8:	463b      	mov	r3, r7
 800b0ea:	4630      	mov	r0, r6
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	f7f5 fc8d 	bl	8000a0c <__aeabi_dcmpun>
 800b0f2:	b990      	cbnz	r0, 800b11a <sqrt+0x42>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	f7f5 fc5e 	bl	80009bc <__aeabi_dcmplt>
 800b100:	b158      	cbz	r0, 800b11a <sqrt+0x42>
 800b102:	f7fc fcff 	bl	8007b04 <__errno>
 800b106:	2321      	movs	r3, #33	@ 0x21
 800b108:	2200      	movs	r2, #0
 800b10a:	6003      	str	r3, [r0, #0]
 800b10c:	2300      	movs	r3, #0
 800b10e:	4610      	mov	r0, r2
 800b110:	4619      	mov	r1, r3
 800b112:	f7f5 fb0b 	bl	800072c <__aeabi_ddiv>
 800b116:	4604      	mov	r4, r0
 800b118:	460d      	mov	r5, r1
 800b11a:	4620      	mov	r0, r4
 800b11c:	4629      	mov	r1, r5
 800b11e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b120 <__ieee754_sqrt>:
 800b120:	4a67      	ldr	r2, [pc, #412]	@ (800b2c0 <__ieee754_sqrt+0x1a0>)
 800b122:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b126:	438a      	bics	r2, r1
 800b128:	4606      	mov	r6, r0
 800b12a:	460f      	mov	r7, r1
 800b12c:	460b      	mov	r3, r1
 800b12e:	4604      	mov	r4, r0
 800b130:	d10e      	bne.n	800b150 <__ieee754_sqrt+0x30>
 800b132:	4602      	mov	r2, r0
 800b134:	f7f5 f9d0 	bl	80004d8 <__aeabi_dmul>
 800b138:	4602      	mov	r2, r0
 800b13a:	460b      	mov	r3, r1
 800b13c:	4630      	mov	r0, r6
 800b13e:	4639      	mov	r1, r7
 800b140:	f7f5 f814 	bl	800016c <__adddf3>
 800b144:	4606      	mov	r6, r0
 800b146:	460f      	mov	r7, r1
 800b148:	4630      	mov	r0, r6
 800b14a:	4639      	mov	r1, r7
 800b14c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b150:	2900      	cmp	r1, #0
 800b152:	dc0c      	bgt.n	800b16e <__ieee754_sqrt+0x4e>
 800b154:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800b158:	4302      	orrs	r2, r0
 800b15a:	d0f5      	beq.n	800b148 <__ieee754_sqrt+0x28>
 800b15c:	b189      	cbz	r1, 800b182 <__ieee754_sqrt+0x62>
 800b15e:	4602      	mov	r2, r0
 800b160:	f7f5 f802 	bl	8000168 <__aeabi_dsub>
 800b164:	4602      	mov	r2, r0
 800b166:	460b      	mov	r3, r1
 800b168:	f7f5 fae0 	bl	800072c <__aeabi_ddiv>
 800b16c:	e7ea      	b.n	800b144 <__ieee754_sqrt+0x24>
 800b16e:	150a      	asrs	r2, r1, #20
 800b170:	d115      	bne.n	800b19e <__ieee754_sqrt+0x7e>
 800b172:	2100      	movs	r1, #0
 800b174:	e009      	b.n	800b18a <__ieee754_sqrt+0x6a>
 800b176:	0ae3      	lsrs	r3, r4, #11
 800b178:	3a15      	subs	r2, #21
 800b17a:	0564      	lsls	r4, r4, #21
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d0fa      	beq.n	800b176 <__ieee754_sqrt+0x56>
 800b180:	e7f7      	b.n	800b172 <__ieee754_sqrt+0x52>
 800b182:	460a      	mov	r2, r1
 800b184:	e7fa      	b.n	800b17c <__ieee754_sqrt+0x5c>
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	3101      	adds	r1, #1
 800b18a:	02d8      	lsls	r0, r3, #11
 800b18c:	d5fb      	bpl.n	800b186 <__ieee754_sqrt+0x66>
 800b18e:	1e48      	subs	r0, r1, #1
 800b190:	1a12      	subs	r2, r2, r0
 800b192:	f1c1 0020 	rsb	r0, r1, #32
 800b196:	fa24 f000 	lsr.w	r0, r4, r0
 800b19a:	4303      	orrs	r3, r0
 800b19c:	408c      	lsls	r4, r1
 800b19e:	2600      	movs	r6, #0
 800b1a0:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800b1a4:	2116      	movs	r1, #22
 800b1a6:	07d2      	lsls	r2, r2, #31
 800b1a8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800b1ac:	4632      	mov	r2, r6
 800b1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1b6:	bf5c      	itt	pl
 800b1b8:	005b      	lslpl	r3, r3, #1
 800b1ba:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 800b1be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1c2:	bf58      	it	pl
 800b1c4:	0064      	lslpl	r4, r4, #1
 800b1c6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800b1ca:	107f      	asrs	r7, r7, #1
 800b1cc:	0064      	lsls	r4, r4, #1
 800b1ce:	1815      	adds	r5, r2, r0
 800b1d0:	429d      	cmp	r5, r3
 800b1d2:	bfde      	ittt	le
 800b1d4:	182a      	addle	r2, r5, r0
 800b1d6:	1b5b      	suble	r3, r3, r5
 800b1d8:	1836      	addle	r6, r6, r0
 800b1da:	0fe5      	lsrs	r5, r4, #31
 800b1dc:	3901      	subs	r1, #1
 800b1de:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800b1e2:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b1e6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b1ea:	d1f0      	bne.n	800b1ce <__ieee754_sqrt+0xae>
 800b1ec:	460d      	mov	r5, r1
 800b1ee:	f04f 0a20 	mov.w	sl, #32
 800b1f2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	eb01 0c00 	add.w	ip, r1, r0
 800b1fc:	db02      	blt.n	800b204 <__ieee754_sqrt+0xe4>
 800b1fe:	d113      	bne.n	800b228 <__ieee754_sqrt+0x108>
 800b200:	45a4      	cmp	ip, r4
 800b202:	d811      	bhi.n	800b228 <__ieee754_sqrt+0x108>
 800b204:	f1bc 0f00 	cmp.w	ip, #0
 800b208:	eb0c 0100 	add.w	r1, ip, r0
 800b20c:	da42      	bge.n	800b294 <__ieee754_sqrt+0x174>
 800b20e:	2900      	cmp	r1, #0
 800b210:	db40      	blt.n	800b294 <__ieee754_sqrt+0x174>
 800b212:	f102 0e01 	add.w	lr, r2, #1
 800b216:	1a9b      	subs	r3, r3, r2
 800b218:	4672      	mov	r2, lr
 800b21a:	45a4      	cmp	ip, r4
 800b21c:	bf88      	it	hi
 800b21e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b222:	eba4 040c 	sub.w	r4, r4, ip
 800b226:	4405      	add	r5, r0
 800b228:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 800b22c:	f1ba 0a01 	subs.w	sl, sl, #1
 800b230:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 800b234:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800b238:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b23c:	d1db      	bne.n	800b1f6 <__ieee754_sqrt+0xd6>
 800b23e:	431c      	orrs	r4, r3
 800b240:	d01a      	beq.n	800b278 <__ieee754_sqrt+0x158>
 800b242:	4c20      	ldr	r4, [pc, #128]	@ (800b2c4 <__ieee754_sqrt+0x1a4>)
 800b244:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800b2c8 <__ieee754_sqrt+0x1a8>
 800b248:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b24c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b250:	f7f4 ff8a 	bl	8000168 <__aeabi_dsub>
 800b254:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b258:	4602      	mov	r2, r0
 800b25a:	460b      	mov	r3, r1
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 fbb6 	bl	80009d0 <__aeabi_dcmple>
 800b264:	b140      	cbz	r0, 800b278 <__ieee754_sqrt+0x158>
 800b266:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b26a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b26e:	f1b5 3fff 	cmp.w	r5, #4294967295
 800b272:	d111      	bne.n	800b298 <__ieee754_sqrt+0x178>
 800b274:	4655      	mov	r5, sl
 800b276:	3601      	adds	r6, #1
 800b278:	1072      	asrs	r2, r6, #1
 800b27a:	086b      	lsrs	r3, r5, #1
 800b27c:	07f1      	lsls	r1, r6, #31
 800b27e:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b282:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b286:	bf48      	it	mi
 800b288:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b28c:	4618      	mov	r0, r3
 800b28e:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 800b292:	e757      	b.n	800b144 <__ieee754_sqrt+0x24>
 800b294:	4696      	mov	lr, r2
 800b296:	e7be      	b.n	800b216 <__ieee754_sqrt+0xf6>
 800b298:	f7f4 ff68 	bl	800016c <__adddf3>
 800b29c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b2a0:	4602      	mov	r2, r0
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4640      	mov	r0, r8
 800b2a6:	4649      	mov	r1, r9
 800b2a8:	f7f5 fb88 	bl	80009bc <__aeabi_dcmplt>
 800b2ac:	b120      	cbz	r0, 800b2b8 <__ieee754_sqrt+0x198>
 800b2ae:	1ca8      	adds	r0, r5, #2
 800b2b0:	bf08      	it	eq
 800b2b2:	3601      	addeq	r6, #1
 800b2b4:	3502      	adds	r5, #2
 800b2b6:	e7df      	b.n	800b278 <__ieee754_sqrt+0x158>
 800b2b8:	1c6b      	adds	r3, r5, #1
 800b2ba:	f023 0501 	bic.w	r5, r3, #1
 800b2be:	e7db      	b.n	800b278 <__ieee754_sqrt+0x158>
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	20000210 	.word	0x20000210
 800b2c8:	20000208 	.word	0x20000208

0800b2cc <_init>:
 800b2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ce:	bf00      	nop
 800b2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2d2:	bc08      	pop	{r3}
 800b2d4:	469e      	mov	lr, r3
 800b2d6:	4770      	bx	lr

0800b2d8 <_fini>:
 800b2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2da:	bf00      	nop
 800b2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2de:	bc08      	pop	{r3}
 800b2e0:	469e      	mov	lr, r3
 800b2e2:	4770      	bx	lr
