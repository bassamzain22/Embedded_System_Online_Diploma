
STM32F103C8T6_HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001d20  08001d20  00002d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d44  08001d44  00003034  2**0
                  CONTENTS
  4 .ARM          00000000  08001d44  08001d44  00003034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d44  08001d44  00003034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d44  08001d44  00002d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d48  08001d48  00002d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001d4c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000034  08001d80  00003034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  08001d80  000030ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5a1  00000000  00000000  0000305d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b40  00000000  00000000  0000e5fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00005639  00000000  00000000  0001013e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009a0  00000000  00000000  00015778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000074f  00000000  00000000  00016118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016abf  00000000  00000000  00016867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdcb  00000000  00000000  0002d326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084027  00000000  00000000  0003a0f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000be118  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000018f8  00000000  00000000  000be15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  000bfa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08001d08 	.word	0x08001d08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08001d08 	.word	0x08001d08

0800014c <Set_Speed>:
}

// Set speed for all motors (duty cycle 0-100)
void Set_Speed(uint8_t duty_cycle) {
	// Ensure duty cycle is within bounds
	if (duty_cycle > 100) {
 800014c:	2864      	cmp	r0, #100	@ 0x64
 800014e:	d900      	bls.n	8000152 <Set_Speed+0x6>
		duty_cycle = 100;
 8000150:	2064      	movs	r0, #100	@ 0x64
	}

	// Calculate compare value based on timer period
	uint16_t timer_period = htim1.Instance->ARR;
 8000152:	f240 0398 	movw	r3, #152	@ 0x98
 8000156:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800015a:	6819      	ldr	r1, [r3, #0]
 800015c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
	uint16_t pulse = (timer_period * duty_cycle) / 100;
 800015e:	b29b      	uxth	r3, r3
 8000160:	fb03 f000 	mul.w	r0, r3, r0
 8000164:	f248 531f 	movw	r3, #34079	@ 0x851f
 8000168:	f2c5 13eb 	movt	r3, #20971	@ 0x51eb
 800016c:	fb83 3200 	smull	r3, r2, r3, r0
 8000170:	17c3      	asrs	r3, r0, #31
 8000172:	ebc3 1362 	rsb	r3, r3, r2, asr #5

	// Set PWM duty cycle for both channels
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000176:	b29b      	uxth	r3, r3
 8000178:	634b      	str	r3, [r1, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse);
 800017a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800017c:	4770      	bx	lr

0800017e <Move_Forward>:

// Move all motors forward
void Move_Forward(void) {
 800017e:	b510      	push	{r4, lr}
	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000180:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 8000184:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000188:	2201      	movs	r2, #1
 800018a:	2108      	movs	r1, #8
 800018c:	4620      	mov	r0, r4
 800018e:	f000 fd72 	bl	8000c76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2110      	movs	r1, #16
 8000196:	4620      	mov	r0, r4
 8000198:	f000 fd6d 	bl	8000c76 <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 800019c:	2201      	movs	r2, #1
 800019e:	2120      	movs	r1, #32
 80001a0:	4620      	mov	r0, r4
 80001a2:	f000 fd68 	bl	8000c76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2140      	movs	r1, #64	@ 0x40
 80001aa:	4620      	mov	r0, r4
 80001ac:	f000 fd63 	bl	8000c76 <HAL_GPIO_WritePin>
}
 80001b0:	bd10      	pop	{r4, pc}

080001b2 <Stop_Motors>:
	else if (distance < min_distance){
		*current_speed = 0;
	}
}
// Stop all motors
void Stop_Motors(void) {
 80001b2:	b510      	push	{r4, lr}

	// Left motors stop (IN1 = LOW, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 80001b4:	f44f 6440 	mov.w	r4, #3072	@ 0xc00
 80001b8:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 80001bc:	2200      	movs	r2, #0
 80001be:	2108      	movs	r1, #8
 80001c0:	4620      	mov	r0, r4
 80001c2:	f000 fd58 	bl	8000c76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2110      	movs	r1, #16
 80001ca:	4620      	mov	r0, r4
 80001cc:	f000 fd53 	bl	8000c76 <HAL_GPIO_WritePin>

	// Right motors stop (IN3 = LOW, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2120      	movs	r1, #32
 80001d4:	4620      	mov	r0, r4
 80001d6:	f000 fd4e 	bl	8000c76 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2140      	movs	r1, #64	@ 0x40
 80001de:	4620      	mov	r0, r4
 80001e0:	f000 fd49 	bl	8000c76 <HAL_GPIO_WritePin>
}
 80001e4:	bd10      	pop	{r4, pc}

080001e6 <Motors_Init>:
void Motors_Init(void) {
 80001e6:	b510      	push	{r4, lr}
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80001e8:	f240 0498 	movw	r4, #152	@ 0x98
 80001ec:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 80001f0:	2100      	movs	r1, #0
 80001f2:	4620      	mov	r0, r4
 80001f4:	f001 fc7f 	bl	8001af6 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80001f8:	210c      	movs	r1, #12
 80001fa:	4620      	mov	r0, r4
 80001fc:	f001 fc7b 	bl	8001af6 <HAL_TIM_PWM_Start>
	Stop_Motors();
 8000200:	f7ff ffd7 	bl	80001b2 <Stop_Motors>
}
 8000204:	bd10      	pop	{r4, pc}

08000206 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000206:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800020a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	2400      	movs	r4, #0
 800020e:	9404      	str	r4, [sp, #16]
 8000210:	9405      	str	r4, [sp, #20]
 8000212:	9406      	str	r4, [sp, #24]
 8000214:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800021a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800021e:	699a      	ldr	r2, [r3, #24]
 8000220:	f042 0210 	orr.w	r2, r2, #16
 8000224:	619a      	str	r2, [r3, #24]
 8000226:	699a      	ldr	r2, [r3, #24]
 8000228:	f002 0210 	and.w	r2, r2, #16
 800022c:	9200      	str	r2, [sp, #0]
 800022e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000230:	699a      	ldr	r2, [r3, #24]
 8000232:	f042 0220 	orr.w	r2, r2, #32
 8000236:	619a      	str	r2, [r3, #24]
 8000238:	699a      	ldr	r2, [r3, #24]
 800023a:	f002 0220 	and.w	r2, r2, #32
 800023e:	9201      	str	r2, [sp, #4]
 8000240:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000242:	699a      	ldr	r2, [r3, #24]
 8000244:	f042 0204 	orr.w	r2, r2, #4
 8000248:	619a      	str	r2, [r3, #24]
 800024a:	699a      	ldr	r2, [r3, #24]
 800024c:	f002 0204 	and.w	r2, r2, #4
 8000250:	9202      	str	r2, [sp, #8]
 8000252:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000254:	699a      	ldr	r2, [r3, #24]
 8000256:	f042 0208 	orr.w	r2, r2, #8
 800025a:	619a      	str	r2, [r3, #24]
 800025c:	699b      	ldr	r3, [r3, #24]
 800025e:	f003 0308 	and.w	r3, r3, #8
 8000262:	9303      	str	r3, [sp, #12]
 8000264:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000266:	f44f 5780 	mov.w	r7, #4096	@ 0x1000
 800026a:	f2c4 0701 	movt	r7, #16385	@ 0x4001
 800026e:	4622      	mov	r2, r4
 8000270:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000274:	4638      	mov	r0, r7
 8000276:	f000 fcfe 	bl	8000c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger0_Pin|Trigger1_Pin|Trigger2_Pin, GPIO_PIN_RESET);
 800027a:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 800027e:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000282:	4622      	mov	r2, r4
 8000284:	212a      	movs	r1, #42	@ 0x2a
 8000286:	4628      	mov	r0, r5
 8000288:	f000 fcf5 	bl	8000c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800028c:	f44f 6640 	mov.w	r6, #3072	@ 0xc00
 8000290:	f2c4 0601 	movt	r6, #16385	@ 0x4001
 8000294:	4622      	mov	r2, r4
 8000296:	2178      	movs	r1, #120	@ 0x78
 8000298:	4630      	mov	r0, r6
 800029a:	f000 fcec 	bl	8000c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800029e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80002a2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	f04f 0801 	mov.w	r8, #1
 80002a8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ae:	f04f 0902 	mov.w	r9, #2
 80002b2:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002b6:	a904      	add	r1, sp, #16
 80002b8:	4638      	mov	r0, r7
 80002ba:	f000 fb9f 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger0_Pin Trigger1_Pin Trigger2_Pin */
  GPIO_InitStruct.Pin = Trigger0_Pin|Trigger1_Pin|Trigger2_Pin;
 80002be:	232a      	movs	r3, #42	@ 0x2a
 80002c0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c2:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002c8:	2303      	movs	r3, #3
 80002ca:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	a904      	add	r1, sp, #16
 80002ce:	4628      	mov	r0, r5
 80002d0:	f000 fb94 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pins : Echo0_Pin Echo1_Pin Echo2_Pin */
  GPIO_InitStruct.Pin = Echo0_Pin|Echo1_Pin|Echo2_Pin;
 80002d4:	2354      	movs	r3, #84	@ 0x54
 80002d6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002dc:	a904      	add	r1, sp, #16
 80002de:	4628      	mov	r0, r5
 80002e0:	f000 fb8c 	bl	80009fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80002e4:	2378      	movs	r3, #120	@ 0x78
 80002e6:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	f8cd 8014 	str.w	r8, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ee:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f2:	a904      	add	r1, sp, #16
 80002f4:	4630      	mov	r0, r6
 80002f6:	f000 fb81 	bl	80009fc <HAL_GPIO_Init>

}
 80002fa:	b009      	add	sp, #36	@ 0x24
 80002fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000300 <MX_TIM2_Init>:
{
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000304:	2500      	movs	r5, #0
 8000306:	9502      	str	r5, [sp, #8]
 8000308:	9503      	str	r5, [sp, #12]
 800030a:	9504      	str	r5, [sp, #16]
 800030c:	9505      	str	r5, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800030e:	9500      	str	r5, [sp, #0]
 8000310:	9501      	str	r5, [sp, #4]
  htim2.Instance = TIM2;
 8000312:	f240 0450 	movw	r4, #80	@ 0x50
 8000316:	f2c2 0400 	movt	r4, #8192	@ 0x2000
 800031a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800031e:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 72;
 8000320:	2348      	movs	r3, #72	@ 0x48
 8000322:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000324:	60a5      	str	r5, [r4, #8]
  htim2.Init.Period = 57;
 8000326:	2339      	movs	r3, #57	@ 0x39
 8000328:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800032a:	6125      	str	r5, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032c:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032e:	4620      	mov	r0, r4
 8000330:	f001 fa65 	bl	80017fe <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000334:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000338:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800033a:	a902      	add	r1, sp, #8
 800033c:	4620      	mov	r0, r4
 800033e:	f001 fb5e 	bl	80019fe <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000342:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000346:	4669      	mov	r1, sp
 8000348:	4620      	mov	r0, r4
 800034a:	f001 fc4b 	bl	8001be4 <HAL_TIMEx_MasterConfigSynchronization>
}
 800034e:	b007      	add	sp, #28
 8000350:	bd30      	pop	{r4, r5, pc}

08000352 <MX_TIM1_Init>:
{
 8000352:	b530      	push	{r4, r5, lr}
 8000354:	b097      	sub	sp, #92	@ 0x5c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000356:	2400      	movs	r4, #0
 8000358:	9412      	str	r4, [sp, #72]	@ 0x48
 800035a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800035c:	9414      	str	r4, [sp, #80]	@ 0x50
 800035e:	9415      	str	r4, [sp, #84]	@ 0x54
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000360:	9410      	str	r4, [sp, #64]	@ 0x40
 8000362:	9411      	str	r4, [sp, #68]	@ 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000364:	9409      	str	r4, [sp, #36]	@ 0x24
 8000366:	940a      	str	r4, [sp, #40]	@ 0x28
 8000368:	940b      	str	r4, [sp, #44]	@ 0x2c
 800036a:	940c      	str	r4, [sp, #48]	@ 0x30
 800036c:	940d      	str	r4, [sp, #52]	@ 0x34
 800036e:	940e      	str	r4, [sp, #56]	@ 0x38
 8000370:	940f      	str	r4, [sp, #60]	@ 0x3c
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000372:	2220      	movs	r2, #32
 8000374:	4621      	mov	r1, r4
 8000376:	a801      	add	r0, sp, #4
 8000378:	f001 fc99 	bl	8001cae <memset>
  htim1.Instance = TIM1;
 800037c:	f240 0598 	movw	r5, #152	@ 0x98
 8000380:	f2c2 0500 	movt	r5, #8192	@ 0x2000
 8000384:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8000388:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800038c:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 71;
 800038e:	2347      	movs	r3, #71	@ 0x47
 8000390:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000392:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 999;
 8000394:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000398:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039a:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 800039c:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003a0:	4628      	mov	r0, r5
 80003a2:	f001 fa2c 	bl	80017fe <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80003aa:	9312      	str	r3, [sp, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003ac:	a912      	add	r1, sp, #72	@ 0x48
 80003ae:	4628      	mov	r0, r5
 80003b0:	f001 fb25 	bl	80019fe <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003b4:	4628      	mov	r0, r5
 80003b6:	f001 fa4e 	bl	8001856 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003ba:	9410      	str	r4, [sp, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003bc:	9411      	str	r4, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003be:	a910      	add	r1, sp, #64	@ 0x40
 80003c0:	4628      	mov	r0, r5
 80003c2:	f001 fc0f 	bl	8001be4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003c6:	2360      	movs	r3, #96	@ 0x60
 80003c8:	9309      	str	r3, [sp, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80003ca:	940a      	str	r4, [sp, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003cc:	940b      	str	r4, [sp, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80003ce:	940c      	str	r4, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003d0:	940d      	str	r4, [sp, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80003d2:	940e      	str	r4, [sp, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80003d4:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003d6:	4622      	mov	r2, r4
 80003d8:	a909      	add	r1, sp, #36	@ 0x24
 80003da:	4628      	mov	r0, r5
 80003dc:	f001 fa9b 	bl	8001916 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80003e0:	220c      	movs	r2, #12
 80003e2:	a909      	add	r1, sp, #36	@ 0x24
 80003e4:	4628      	mov	r0, r5
 80003e6:	f001 fa96 	bl	8001916 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80003ea:	9401      	str	r4, [sp, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80003ec:	9402      	str	r4, [sp, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80003ee:	9403      	str	r4, [sp, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80003f0:	9404      	str	r4, [sp, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80003f2:	9405      	str	r4, [sp, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80003f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f8:	9306      	str	r3, [sp, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80003fa:	9408      	str	r4, [sp, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80003fc:	a901      	add	r1, sp, #4
 80003fe:	4628      	mov	r0, r5
 8000400:	f001 fc2a 	bl	8001c58 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8000404:	4628      	mov	r0, r5
 8000406:	f000 f985 	bl	8000714 <HAL_TIM_MspPostInit>
}
 800040a:	b017      	add	sp, #92	@ 0x5c
 800040c:	bd30      	pop	{r4, r5, pc}

0800040e <SystemClock_Config>:
{
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	a806      	add	r0, sp, #24
 8000418:	f001 fc49 	bl	8001cae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	2400      	movs	r4, #0
 800041e:	9401      	str	r4, [sp, #4]
 8000420:	9402      	str	r4, [sp, #8]
 8000422:	9403      	str	r4, [sp, #12]
 8000424:	9404      	str	r4, [sp, #16]
 8000426:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000428:	2201      	movs	r2, #1
 800042a:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000430:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000432:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000434:	2502      	movs	r5, #2
 8000436:	950d      	str	r5, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000438:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800043a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800043e:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000440:	a806      	add	r0, sp, #24
 8000442:	f000 fc36 	bl	8000cb2 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000446:	230f      	movs	r3, #15
 8000448:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044a:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800044c:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800044e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000452:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000454:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000456:	4629      	mov	r1, r5
 8000458:	a801      	add	r0, sp, #4
 800045a:	f000 fee5 	bl	8001228 <HAL_RCC_ClockConfig>
}
 800045e:	b011      	add	sp, #68	@ 0x44
 8000460:	bd30      	pop	{r4, r5, pc}

08000462 <main>:
{
 8000462:	b570      	push	{r4, r5, r6, lr}
 8000464:	b082      	sub	sp, #8
  HAL_Init();
 8000466:	f000 fa14 	bl	8000892 <HAL_Init>
  SystemClock_Config();
 800046a:	f7ff ffd0 	bl	800040e <SystemClock_Config>
  MX_GPIO_Init();
 800046e:	f7ff feca 	bl	8000206 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000472:	f7ff ff45 	bl	8000300 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000476:	f7ff ff6c 	bl	8000352 <MX_TIM1_Init>
  Motors_Init();
 800047a:	f7ff feb4 	bl	80001e6 <Motors_Init>
   Set_Speed(100);
 800047e:	2064      	movs	r0, #100	@ 0x64
 8000480:	f7ff fe64 	bl	800014c <Set_Speed>
   Move_Forward();
 8000484:	f7ff fe7b 	bl	800017e <Move_Forward>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000488:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800048c:	f2c4 0401 	movt	r4, #16385	@ 0x4001
 8000490:	2200      	movs	r2, #0
 8000492:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000496:	4620      	mov	r0, r4
 8000498:	f000 fbed 	bl	8000c76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004a2:	4620      	mov	r0, r4
 80004a4:	f000 fbe7 	bl	8000c76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004ae:	4620      	mov	r0, r4
 80004b0:	f000 fbe1 	bl	8000c76 <HAL_GPIO_WritePin>
	  for(uint16_t i=0; i<3; i++)
 80004b4:	2400      	movs	r4, #0
 80004b6:	e005      	b.n	80004c4 <main+0x62>
		  if (i==1&&distancesInCm[i]<40){
 80004b8:	2c01      	cmp	r4, #1
 80004ba:	d043      	beq.n	8000544 <main+0xe2>
		  if (i==2&&distancesInCm[i]<40){
 80004bc:	2c02      	cmp	r4, #2
 80004be:	d058      	beq.n	8000572 <main+0x110>
	  for(uint16_t i=0; i<3; i++)
 80004c0:	3401      	adds	r4, #1
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	2c02      	cmp	r4, #2
 80004c6:	d8f5      	bhi.n	80004b4 <main+0x52>
		  sensor = i;//update sensor index in timer2
 80004c8:	f240 03e0 	movw	r3, #224	@ 0xe0
 80004cc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80004d0:	801c      	strh	r4, [r3, #0]
		  distancesInCm[i] = measureDistance(triggerPorts[i], triggerPins[i], echoPorts[i], echoPins[i]);
 80004d2:	f240 0300 	movw	r3, #0
 80004d6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80004da:	f240 0208 	movw	r2, #8
 80004de:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80004e2:	f240 0114 	movw	r1, #20
 80004e6:	f2c2 0100 	movt	r1, #8192	@ 0x2000
 80004ea:	f240 001c 	movw	r0, #28
 80004ee:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80004f2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 80004f6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 80004fa:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 80004fe:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8000502:	f000 f85f 	bl	80005c4 <measureDistance>
 8000506:	4605      	mov	r5, r0
 8000508:	ab02      	add	r3, sp, #8
 800050a:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800050e:	f823 0c08 	strh.w	r0, [r3, #-8]
		  if (i==0&&distancesInCm[i]<40){
 8000512:	2c00      	cmp	r4, #0
 8000514:	d1d0      	bne.n	80004b8 <main+0x56>
 8000516:	2827      	cmp	r0, #39	@ 0x27
 8000518:	d8ce      	bhi.n	80004b8 <main+0x56>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800051a:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800051e:	f2c4 0601 	movt	r6, #16385	@ 0x4001
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000528:	4630      	mov	r0, r6
 800052a:	f000 fba4 	bl	8000c76 <HAL_GPIO_WritePin>
			  HAL_Delay(5000);
 800052e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000532:	f000 f9d4 	bl	80008de <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053c:	4630      	mov	r0, r6
 800053e:	f000 fb9a 	bl	8000c76 <HAL_GPIO_WritePin>
 8000542:	e7b9      	b.n	80004b8 <main+0x56>
		  if (i==1&&distancesInCm[i]<40){
 8000544:	2d27      	cmp	r5, #39	@ 0x27
 8000546:	d8b9      	bhi.n	80004bc <main+0x5a>
		  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8000548:	f44f 5680 	mov.w	r6, #4096	@ 0x1000
 800054c:	f2c4 0601 	movt	r6, #16385	@ 0x4001
 8000550:	2201      	movs	r2, #1
 8000552:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000556:	4630      	mov	r0, r6
 8000558:	f000 fb8d 	bl	8000c76 <HAL_GPIO_WritePin>
		  			  HAL_Delay(5000);
 800055c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000560:	f000 f9bd 	bl	80008de <HAL_Delay>
		  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800056a:	4630      	mov	r0, r6
 800056c:	f000 fb83 	bl	8000c76 <HAL_GPIO_WritePin>
 8000570:	e7a4      	b.n	80004bc <main+0x5a>
		  if (i==2&&distancesInCm[i]<40){
 8000572:	2d27      	cmp	r5, #39	@ 0x27
 8000574:	d8a4      	bhi.n	80004c0 <main+0x5e>
		  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8000576:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800057a:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000584:	4628      	mov	r0, r5
 8000586:	f000 fb76 	bl	8000c76 <HAL_GPIO_WritePin>
		  			  HAL_Delay(5000);
 800058a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800058e:	f000 f9a6 	bl	80008de <HAL_Delay>
		  			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000598:	4628      	mov	r0, r5
 800059a:	f000 fb6c 	bl	8000c76 <HAL_GPIO_WritePin>
 800059e:	e78f      	b.n	80004c0 <main+0x5e>

080005a0 <SysTickEnable>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a0:	b672      	cpsid	i
uint16_t echoPins[3] = {Echo0_Pin, Echo1_Pin, Echo2_Pin};

void SysTickEnable()
{
	__disable_irq();
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 80005a2:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80005a6:	6913      	ldr	r3, [r2, #16]
 80005a8:	f043 0305 	orr.w	r3, r3, #5
 80005ac:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80005ae:	b662      	cpsie	i
	__enable_irq();
}
 80005b0:	4770      	bx	lr

080005b2 <SysTickDisable>:
  __ASM volatile ("cpsid i" : : : "memory");
 80005b2:	b672      	cpsid	i

void SysTickDisable()
{
	__disable_irq();
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 80005b4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80005b8:	6913      	ldr	r3, [r2, #16]
 80005ba:	f023 0305 	bic.w	r3, r3, #5
 80005be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("cpsie i" : : : "memory");
 80005c0:	b662      	cpsie	i
	__enable_irq();
}
 80005c2:	4770      	bx	lr

080005c4 <measureDistance>:

uint16_t measureDistance(GPIO_TypeDef *triggerPort, uint16_t triggerPin, GPIO_TypeDef *echoPort, uint16_t echoPin)
{
 80005c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005c6:	4606      	mov	r6, r0
 80005c8:	460f      	mov	r7, r1
 80005ca:	4614      	mov	r4, r2
 80005cc:	461d      	mov	r5, r3
	if(!HAL_GPIO_ReadPin(echoPort, echoPin))//skip sensor if ECHO pin is still busy
 80005ce:	4619      	mov	r1, r3
 80005d0:	4610      	mov	r0, r2
 80005d2:	f000 fb49 	bl	8000c68 <HAL_GPIO_ReadPin>
 80005d6:	b160      	cbz	r0, 80005f2 <measureDistance+0x2e>
		while(HAL_GPIO_ReadPin(echoPort, echoPin));
		HAL_TIM_Base_Stop_IT(&htim2);
		SysTickEnable();
	}else//give max distance if ECHO pin is still busy
	{
		distance = 500;
 80005d8:	f240 03e4 	movw	r3, #228	@ 0xe4
 80005dc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80005e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005e4:	801a      	strh	r2, [r3, #0]
	}
	return distance;
 80005e6:	f240 03e4 	movw	r3, #228	@ 0xe4
 80005ea:	f2c2 0300 	movt	r3, #8192	@ 0x2000
}
 80005ee:	8818      	ldrh	r0, [r3, #0]
 80005f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SysTickDisable();
 80005f2:	f7ff ffde 	bl	80005b2 <SysTickDisable>
		HAL_TIM_Base_Start_IT(&htim2);
 80005f6:	f240 0050 	movw	r0, #80	@ 0x50
 80005fa:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80005fe:	f000 ffa2 	bl	8001546 <HAL_TIM_Base_Start_IT>
		HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_SET);
 8000602:	2201      	movs	r2, #1
 8000604:	4639      	mov	r1, r7
 8000606:	4630      	mov	r0, r6
 8000608:	f000 fb35 	bl	8000c76 <HAL_GPIO_WritePin>
		triggerTime = 0;//reset the variable
 800060c:	f240 03e2 	movw	r3, #226	@ 0xe2
 8000610:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000614:	2200      	movs	r2, #0
 8000616:	801a      	strh	r2, [r3, #0]
		asm ("nop");//to avoid program freezing
 8000618:	bf00      	nop
		while(triggerTime < TriggerDuration);
 800061a:	f240 0ce2 	movw	ip, #226	@ 0xe2
 800061e:	f2c2 0c00 	movt	ip, #8192	@ 0x2000
 8000622:	f8bc 3000 	ldrh.w	r3, [ip]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d9f7      	bls.n	800061a <measureDistance+0x56>
		HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	4639      	mov	r1, r7
 800062e:	4630      	mov	r0, r6
 8000630:	f000 fb21 	bl	8000c76 <HAL_GPIO_WritePin>
		while(!HAL_GPIO_ReadPin(echoPort, echoPin));
 8000634:	4629      	mov	r1, r5
 8000636:	4620      	mov	r0, r4
 8000638:	f000 fb16 	bl	8000c68 <HAL_GPIO_ReadPin>
 800063c:	2800      	cmp	r0, #0
 800063e:	d0f9      	beq.n	8000634 <measureDistance+0x70>
		distance = 0;//reset the variable
 8000640:	f240 03e4 	movw	r3, #228	@ 0xe4
 8000644:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000648:	2200      	movs	r2, #0
 800064a:	801a      	strh	r2, [r3, #0]
		while(HAL_GPIO_ReadPin(echoPort, echoPin));
 800064c:	4629      	mov	r1, r5
 800064e:	4620      	mov	r0, r4
 8000650:	f000 fb0a 	bl	8000c68 <HAL_GPIO_ReadPin>
 8000654:	2800      	cmp	r0, #0
 8000656:	d1f9      	bne.n	800064c <measureDistance+0x88>
		HAL_TIM_Base_Stop_IT(&htim2);
 8000658:	f240 0050 	movw	r0, #80	@ 0x50
 800065c:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 8000660:	f000 ffa9 	bl	80015b6 <HAL_TIM_Base_Stop_IT>
		SysTickEnable();
 8000664:	f7ff ff9c 	bl	80005a0 <SysTickEnable>
 8000668:	e7bd      	b.n	80005e6 <measureDistance+0x22>

0800066a <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800066a:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800066c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000670:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000674:	699a      	ldr	r2, [r3, #24]
 8000676:	f042 0201 	orr.w	r2, r2, #1
 800067a:	619a      	str	r2, [r3, #24]
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	f002 0201 	and.w	r2, r2, #1
 8000682:	9200      	str	r2, [sp, #0]
 8000684:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000686:	69da      	ldr	r2, [r3, #28]
 8000688:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800068c:	61da      	str	r2, [r3, #28]
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000694:	9301      	str	r3, [sp, #4]
 8000696:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000698:	2200      	movs	r2, #0
 800069a:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800069e:	6853      	ldr	r3, [r2, #4]
 80006a0:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006aa:	b002      	add	sp, #8
 80006ac:	4770      	bx	lr

080006ae <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006ae:	b500      	push	{lr}
 80006b0:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80006b2:	6802      	ldr	r2, [r0, #0]
 80006b4:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80006b8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80006bc:	429a      	cmp	r2, r3
 80006be:	d005      	beq.n	80006cc <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80006c0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80006c4:	d010      	beq.n	80006e8 <HAL_TIM_Base_MspInit+0x3a>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80006c6:	b003      	add	sp, #12
 80006c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80006cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80006d4:	699a      	ldr	r2, [r3, #24]
 80006d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80006da:	619a      	str	r2, [r3, #24]
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006e2:	9300      	str	r3, [sp, #0]
 80006e4:	9b00      	ldr	r3, [sp, #0]
 80006e6:	e7ee      	b.n	80006c6 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ec:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80006f0:	69da      	ldr	r2, [r3, #28]
 80006f2:	f042 0201 	orr.w	r2, r2, #1
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000702:	2200      	movs	r2, #0
 8000704:	4611      	mov	r1, r2
 8000706:	201c      	movs	r0, #28
 8000708:	f000 f945 	bl	8000996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800070c:	201c      	movs	r0, #28
 800070e:	f000 f952 	bl	80009b6 <HAL_NVIC_EnableIRQ>
}
 8000712:	e7d8      	b.n	80006c6 <HAL_TIM_Base_MspInit+0x18>

08000714 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000714:	b500      	push	{lr}
 8000716:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	2300      	movs	r3, #0
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	9303      	str	r3, [sp, #12]
 800071e:	9304      	str	r3, [sp, #16]
 8000720:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM1)
 8000722:	6802      	ldr	r2, [r0, #0]
 8000724:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8000728:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 800072c:	429a      	cmp	r2, r3
 800072e:	d002      	beq.n	8000736 <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000730:	b007      	add	sp, #28
 8000732:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800073a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	f042 0204 	orr.w	r2, r2, #4
 8000744:	619a      	str	r2, [r3, #24]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000750:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8000754:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800075c:	a902      	add	r1, sp, #8
 800075e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000762:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8000766:	f000 f949 	bl	80009fc <HAL_GPIO_Init>
}
 800076a:	e7e1      	b.n	8000730 <HAL_TIM_MspPostInit+0x1c>

0800076c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800076c:	4770      	bx	lr

0800076e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler>

08000770 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler>

08000772 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000772:	e7fe      	b.n	8000772 <BusFault_Handler>

08000774 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <UsageFault_Handler>

08000776 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	4770      	bx	lr

08000778 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000778:	4770      	bx	lr

0800077a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077a:	4770      	bx	lr

0800077c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800077c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800077e:	f000 f89b 	bl	80008b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000782:	bd08      	pop	{r3, pc}

08000784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000784:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(HAL_GPIO_ReadPin(echoPorts[sensor], echoPins[sensor]) && distance < 500)
 8000786:	f240 03e0 	movw	r3, #224	@ 0xe0
 800078a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800078e:	8818      	ldrh	r0, [r3, #0]
 8000790:	f240 0200 	movw	r2, #0
 8000794:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000798:	f240 0308 	movw	r3, #8
 800079c:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80007a0:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
 80007a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80007a8:	f000 fa5e 	bl	8000c68 <HAL_GPIO_ReadPin>
 80007ac:	b168      	cbz	r0, 80007ca <TIM2_IRQHandler+0x46>
 80007ae:	f240 03e4 	movw	r3, #228	@ 0xe4
 80007b2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80007b6:	881b      	ldrh	r3, [r3, #0]
 80007b8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80007bc:	d205      	bcs.n	80007ca <TIM2_IRQHandler+0x46>
		distance++;
 80007be:	f240 02e4 	movw	r2, #228	@ 0xe4
 80007c2:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80007c6:	3301      	adds	r3, #1
 80007c8:	8013      	strh	r3, [r2, #0]
	if(triggerTime < TriggerDuration)
 80007ca:	f240 03e2 	movw	r3, #226	@ 0xe2
 80007ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d906      	bls.n	80007e6 <TIM2_IRQHandler+0x62>
		triggerTime++;
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007d8:	f240 0050 	movw	r0, #80	@ 0x50
 80007dc:	f2c2 0000 	movt	r0, #8192	@ 0x2000
 80007e0:	f000 ff08 	bl	80015f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007e4:	bd08      	pop	{r3, pc}
		triggerTime++;
 80007e6:	f240 02e2 	movw	r2, #226	@ 0xe2
 80007ea:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80007ee:	3301      	adds	r3, #1
 80007f0:	8013      	strh	r3, [r2, #0]
 80007f2:	e7f1      	b.n	80007d8 <TIM2_IRQHandler+0x54>

080007f4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	4770      	bx	lr
	...

080007f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007f8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007fa:	e003      	b.n	8000804 <LoopCopyDataInit>

080007fc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007fe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000800:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000802:	3104      	adds	r1, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000804:	480a      	ldr	r0, [pc, #40]	@ (8000830 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000808:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800080a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800080c:	d3f6      	bcc.n	80007fc <CopyDataInit>
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000810:	e002      	b.n	8000818 <LoopFillZerobss>

08000812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000814:	f842 3b04 	str.w	r3, [r2], #4

08000818 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800081a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800081c:	d3f9      	bcc.n	8000812 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081e:	f7ff ffe9 	bl	80007f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000822:	f001 fa4d 	bl	8001cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000826:	f7ff fe1c 	bl	8000462 <main>
  bx lr
 800082a:	4770      	bx	lr
  ldr r3, =_sidata
 800082c:	08001d4c 	.word	0x08001d4c
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000834:	20000034 	.word	0x20000034
  ldr r2, =_sbss
 8000838:	20000034 	.word	0x20000034
  ldr r3, = _ebss
 800083c:	200000ec 	.word	0x200000ec

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>

08000842 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000842:	b510      	push	{r4, lr}
 8000844:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000846:	f240 032c 	movw	r3, #44	@ 0x2c
 800084a:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 800084e:	781a      	ldrb	r2, [r3, #0]
 8000850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000854:	fbb3 f3f2 	udiv	r3, r3, r2
 8000858:	f240 0228 	movw	r2, #40	@ 0x28
 800085c:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 8000860:	6810      	ldr	r0, [r2, #0]
 8000862:	fbb0 f0f3 	udiv	r0, r0, r3
 8000866:	f000 f8b4 	bl	80009d2 <HAL_SYSTICK_Config>
 800086a:	b980      	cbnz	r0, 800088e <HAL_InitTick+0x4c>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	2c0f      	cmp	r4, #15
 800086e:	d901      	bls.n	8000874 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000870:	2001      	movs	r0, #1
 8000872:	e00d      	b.n	8000890 <HAL_InitTick+0x4e>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000874:	2200      	movs	r2, #0
 8000876:	4621      	mov	r1, r4
 8000878:	f04f 30ff 	mov.w	r0, #4294967295
 800087c:	f000 f88b 	bl	8000996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000880:	f240 0330 	movw	r3, #48	@ 0x30
 8000884:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000888:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2000      	movs	r0, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4e>
    return HAL_ERROR;
 800088e:	2001      	movs	r0, #1
}
 8000890:	bd10      	pop	{r4, pc}

08000892 <HAL_Init>:
{
 8000892:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	f042 0210 	orr.w	r2, r2, #16
 80008a2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a4:	2003      	movs	r0, #3
 80008a6:	f000 f863 	bl	8000970 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ffc9 	bl	8000842 <HAL_InitTick>
  HAL_MspInit();
 80008b0:	f7ff fedb 	bl	800066a <HAL_MspInit>
}
 80008b4:	2000      	movs	r0, #0
 80008b6:	bd08      	pop	{r3, pc}

080008b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80008b8:	f240 03e8 	movw	r3, #232	@ 0xe8
 80008bc:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	f240 022c 	movw	r2, #44	@ 0x2c
 80008c6:	f2c2 0200 	movt	r2, #8192	@ 0x2000
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	440a      	add	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
}
 80008d0:	4770      	bx	lr

080008d2 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008d2:	f240 03e8 	movw	r3, #232	@ 0xe8
 80008d6:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80008da:	6818      	ldr	r0, [r3, #0]
}
 80008dc:	4770      	bx	lr

080008de <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008de:	b538      	push	{r3, r4, r5, lr}
 80008e0:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008e2:	f7ff fff6 	bl	80008d2 <HAL_GetTick>
 80008e6:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80008ec:	d005      	beq.n	80008fa <HAL_Delay+0x1c>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ee:	f240 032c 	movw	r3, #44	@ 0x2c
 80008f2:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008fa:	f7ff ffea 	bl	80008d2 <HAL_GetTick>
 80008fe:	1b40      	subs	r0, r0, r5
 8000900:	42a0      	cmp	r0, r4
 8000902:	d3fa      	bcc.n	80008fa <HAL_Delay+0x1c>
  {
  }
}
 8000904:	bd38      	pop	{r3, r4, r5, pc}

08000906 <__NVIC_SetPriority>:
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000906:	2800      	cmp	r0, #0
 8000908:	db08      	blt.n	800091c <__NVIC_SetPriority+0x16>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	0109      	lsls	r1, r1, #4
 800090c:	b2c9      	uxtb	r1, r1
 800090e:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000912:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000916:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 800091a:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091c:	f000 000f 	and.w	r0, r0, #15
 8000920:	0109      	lsls	r1, r1, #4
 8000922:	b2c9      	uxtb	r1, r1
 8000924:	f64e 43fc 	movw	r3, #60668	@ 0xecfc
 8000928:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 800092c:	4403      	add	r3, r0
 800092e:	7619      	strb	r1, [r3, #24]
  }
}
 8000930:	4770      	bx	lr

08000932 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000932:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000934:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000938:	f1c0 0c07 	rsb	ip, r0, #7
 800093c:	f1bc 0f04 	cmp.w	ip, #4
 8000940:	bf28      	it	cs
 8000942:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000946:	1d03      	adds	r3, r0, #4
 8000948:	2b06      	cmp	r3, #6
 800094a:	d90f      	bls.n	800096c <NVIC_EncodePriority+0x3a>
 800094c:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800094e:	f04f 3eff 	mov.w	lr, #4294967295
 8000952:	fa0e f00c 	lsl.w	r0, lr, ip
 8000956:	ea21 0100 	bic.w	r1, r1, r0
 800095a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800095c:	fa0e fe03 	lsl.w	lr, lr, r3
 8000960:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8000964:	ea41 0002 	orr.w	r0, r1, r2
 8000968:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800096c:	2300      	movs	r3, #0
 800096e:	e7ee      	b.n	800094e <NVIC_EncodePriority+0x1c>

08000970 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 8000974:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 8000978:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800097e:	041b      	lsls	r3, r3, #16
 8000980:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000982:	0200      	lsls	r0, r0, #8
 8000984:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000988:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800098a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800098e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000992:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000994:	4770      	bx	lr

08000996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000996:	b510      	push	{r4, lr}
 8000998:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800099a:	f44f 436d 	mov.w	r3, #60672	@ 0xed00
 800099e:	f2ce 0300 	movt	r3, #57344	@ 0xe000
 80009a2:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80009a8:	f7ff ffc3 	bl	8000932 <NVIC_EncodePriority>
 80009ac:	4601      	mov	r1, r0
 80009ae:	4620      	mov	r0, r4
 80009b0:	f7ff ffa9 	bl	8000906 <__NVIC_SetPriority>
}
 80009b4:	bd10      	pop	{r4, pc}

080009b6 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80009b6:	2800      	cmp	r0, #0
 80009b8:	db0a      	blt.n	80009d0 <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ba:	f000 021f 	and.w	r2, r0, #31
 80009be:	0940      	lsrs	r0, r0, #5
 80009c0:	2301      	movs	r3, #1
 80009c2:	4093      	lsls	r3, r2
 80009c4:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 80009c8:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 80009cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80009d0:	4770      	bx	lr

080009d2 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d2:	3801      	subs	r0, #1
 80009d4:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009d8:	d20e      	bcs.n	80009f8 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80009de:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	f44f 426d 	mov.w	r2, #60672	@ 0xed00
 80009e4:	f2ce 0200 	movt	r2, #57344	@ 0xe000
 80009e8:	21f0      	movs	r1, #240	@ 0xf0
 80009ea:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009ee:	2000      	movs	r0, #0
 80009f0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f2:	2207      	movs	r2, #7
 80009f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80009f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009fa:	4770      	bx	lr

080009fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a00:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8000a02:	46a4      	mov	ip, r4
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a04:	e0ca      	b.n	8000b9c <HAL_GPIO_Init+0x1a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a06:	2500      	movs	r5, #0
 8000a08:	f2c1 0522 	movt	r5, #4130	@ 0x1022
 8000a0c:	42ab      	cmp	r3, r5
 8000a0e:	d01e      	beq.n	8000a4e <HAL_GPIO_Init+0x52>
 8000a10:	2500      	movs	r5, #0
 8000a12:	f2c1 0522 	movt	r5, #4130	@ 0x1022
 8000a16:	42ab      	cmp	r3, r5
 8000a18:	d80f      	bhi.n	8000a3a <HAL_GPIO_Init+0x3e>
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	f2c1 0512 	movt	r5, #4114	@ 0x1012
 8000a20:	42ab      	cmp	r3, r5
 8000a22:	d014      	beq.n	8000a4e <HAL_GPIO_Init+0x52>
 8000a24:	2500      	movs	r5, #0
 8000a26:	f2c1 0521 	movt	r5, #4129	@ 0x1021
 8000a2a:	42ab      	cmp	r3, r5
 8000a2c:	d00f      	beq.n	8000a4e <HAL_GPIO_Init+0x52>
 8000a2e:	2500      	movs	r5, #0
 8000a30:	f2c1 0511 	movt	r5, #4113	@ 0x1011
 8000a34:	42ab      	cmp	r3, r5
 8000a36:	d113      	bne.n	8000a60 <HAL_GPIO_Init+0x64>
 8000a38:	e009      	b.n	8000a4e <HAL_GPIO_Init+0x52>
 8000a3a:	2500      	movs	r5, #0
 8000a3c:	f2c1 0531 	movt	r5, #4145	@ 0x1031
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d004      	beq.n	8000a4e <HAL_GPIO_Init+0x52>
 8000a44:	2500      	movs	r5, #0
 8000a46:	f2c1 0532 	movt	r5, #4146	@ 0x1032
 8000a4a:	42ab      	cmp	r3, r5
 8000a4c:	d108      	bne.n	8000a60 <HAL_GPIO_Init+0x64>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a4e:	688b      	ldr	r3, [r1, #8]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d05f      	beq.n	8000b14 <HAL_GPIO_Init+0x118>
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d058      	beq.n	8000b0a <HAL_GPIO_Init+0x10e>
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;

            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000a58:	6142      	str	r2, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a5a:	2408      	movs	r4, #8
 8000a5c:	e000      	b.n	8000a60 <HAL_GPIO_Init+0x64>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a5e:	68cc      	ldr	r4, [r1, #12]
          break;
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a60:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8000a64:	d858      	bhi.n	8000b18 <HAL_GPIO_Init+0x11c>
 8000a66:	4606      	mov	r6, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a68:	ea4f 028c 	mov.w	r2, ip, lsl #2

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a6c:	6833      	ldr	r3, [r6, #0]
 8000a6e:	250f      	movs	r5, #15
 8000a70:	4095      	lsls	r5, r2
 8000a72:	ea23 0305 	bic.w	r3, r3, r5
 8000a76:	fa04 f202 	lsl.w	r2, r4, r2
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	6033      	str	r3, [r6, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7e:	684b      	ldr	r3, [r1, #4]
 8000a80:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000a84:	f000 8088 	beq.w	8000b98 <HAL_GPIO_Init+0x19c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a8c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000a90:	699a      	ldr	r2, [r3, #24]
 8000a92:	f042 0201 	orr.w	r2, r2, #1
 8000a96:	619a      	str	r2, [r3, #24]
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	9301      	str	r3, [sp, #4]
 8000aa0:	9b01      	ldr	r3, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa2:	ea4f 029c 	mov.w	r2, ip, lsr #2
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000aac:	1c95      	adds	r5, r2, #2
 8000aae:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ab2:	f00c 0503 	and.w	r5, ip, #3
 8000ab6:	00ad      	lsls	r5, r5, #2
 8000ab8:	230f      	movs	r3, #15
 8000aba:	40ab      	lsls	r3, r5
 8000abc:	ea26 0603 	bic.w	r6, r6, r3
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ac4:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000ac8:	4298      	cmp	r0, r3
 8000aca:	d02c      	beq.n	8000b26 <HAL_GPIO_Init+0x12a>
 8000acc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ad0:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000ad4:	4298      	cmp	r0, r3
 8000ad6:	f000 809d 	beq.w	8000c14 <HAL_GPIO_Init+0x218>
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000ae2:	4298      	cmp	r0, r3
 8000ae4:	f000 8098 	beq.w	8000c18 <HAL_GPIO_Init+0x21c>
 8000ae8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000aec:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000af0:	4298      	cmp	r0, r3
 8000af2:	d016      	beq.n	8000b22 <HAL_GPIO_Init+0x126>
 8000af4:	2304      	movs	r3, #4
 8000af6:	e017      	b.n	8000b28 <HAL_GPIO_Init+0x12c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000af8:	68cc      	ldr	r4, [r1, #12]
 8000afa:	3404      	adds	r4, #4
          break;
 8000afc:	e7b0      	b.n	8000a60 <HAL_GPIO_Init+0x64>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000afe:	68cc      	ldr	r4, [r1, #12]
 8000b00:	3408      	adds	r4, #8
          break;
 8000b02:	e7ad      	b.n	8000a60 <HAL_GPIO_Init+0x64>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b04:	68cc      	ldr	r4, [r1, #12]
 8000b06:	340c      	adds	r4, #12
          break;
 8000b08:	e7aa      	b.n	8000a60 <HAL_GPIO_Init+0x64>
            GPIOx->BSRR = ioposition;
 8000b0a:	6102      	str	r2, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b0c:	2408      	movs	r4, #8
 8000b0e:	e7a7      	b.n	8000a60 <HAL_GPIO_Init+0x64>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b10:	2400      	movs	r4, #0
 8000b12:	e7a5      	b.n	8000a60 <HAL_GPIO_Init+0x64>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b14:	2404      	movs	r4, #4
 8000b16:	e7a3      	b.n	8000a60 <HAL_GPIO_Init+0x64>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b18:	1d06      	adds	r6, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b1a:	f1ac 0208 	sub.w	r2, ip, #8
 8000b1e:	0092      	lsls	r2, r2, #2
 8000b20:	e7a4      	b.n	8000a6c <HAL_GPIO_Init+0x70>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b22:	2303      	movs	r3, #3
 8000b24:	e000      	b.n	8000b28 <HAL_GPIO_Init+0x12c>
 8000b26:	2300      	movs	r3, #0
 8000b28:	40ab      	lsls	r3, r5
 8000b2a:	4333      	orrs	r3, r6
        AFIO->EXTICR[position >> 2u] = temp;
 8000b2c:	2500      	movs	r5, #0
 8000b2e:	f2c4 0501 	movt	r5, #16385	@ 0x4001
 8000b32:	3202      	adds	r2, #2
 8000b34:	f845 3022 	str.w	r3, [r5, r2, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b38:	684b      	ldr	r3, [r1, #4]
 8000b3a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000b3e:	d06d      	beq.n	8000c1c <HAL_GPIO_Init+0x220>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b44:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	ea42 020e 	orr.w	r2, r2, lr
 8000b4e:	601a      	str	r2, [r3, #0]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b50:	684b      	ldr	r3, [r1, #4]
 8000b52:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000b56:	d06a      	beq.n	8000c2e <HAL_GPIO_Init+0x232>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000b60:	685a      	ldr	r2, [r3, #4]
 8000b62:	ea42 020e 	orr.w	r2, r2, lr
 8000b66:	605a      	str	r2, [r3, #4]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b68:	684b      	ldr	r3, [r1, #4]
 8000b6a:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000b6e:	d067      	beq.n	8000c40 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b74:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000b78:	689a      	ldr	r2, [r3, #8]
 8000b7a:	ea42 020e 	orr.w	r2, r2, lr
 8000b7e:	609a      	str	r2, [r3, #8]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b80:	684b      	ldr	r3, [r1, #4]
 8000b82:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 8000b86:	d064      	beq.n	8000c52 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b8c:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	ea42 020e 	orr.w	r2, r2, lr
 8000b96:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(EXTI->FTSR, iocurrent);
        }
      }
    }

	position++;
 8000b98:	f10c 0c01 	add.w	ip, ip, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b9c:	680b      	ldr	r3, [r1, #0]
 8000b9e:	fa33 f20c 	lsrs.w	r2, r3, ip
 8000ba2:	d05f      	beq.n	8000c64 <HAL_GPIO_Init+0x268>
    ioposition = (0x01uL << position);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	fa02 f20c 	lsl.w	r2, r2, ip
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	ea03 0e02 	and.w	lr, r3, r2
    if (iocurrent == ioposition)
 8000bae:	ea32 0303 	bics.w	r3, r2, r3
 8000bb2:	d1f1      	bne.n	8000b98 <HAL_GPIO_Init+0x19c>
      switch (GPIO_Init->Mode)
 8000bb4:	684b      	ldr	r3, [r1, #4]
 8000bb6:	2b12      	cmp	r3, #18
 8000bb8:	f63f af25 	bhi.w	8000a06 <HAL_GPIO_Init+0xa>
 8000bbc:	2b12      	cmp	r3, #18
 8000bbe:	f63f af4f 	bhi.w	8000a60 <HAL_GPIO_Init+0x64>
 8000bc2:	a501      	add	r5, pc, #4	@ (adr r5, 8000bc8 <HAL_GPIO_Init+0x1cc>)
 8000bc4:	f855 f023 	ldr.w	pc, [r5, r3, lsl #2]
 8000bc8:	08000a4f 	.word	0x08000a4f
 8000bcc:	08000a5f 	.word	0x08000a5f
 8000bd0:	08000aff 	.word	0x08000aff
 8000bd4:	08000b11 	.word	0x08000b11
 8000bd8:	08000a61 	.word	0x08000a61
 8000bdc:	08000a61 	.word	0x08000a61
 8000be0:	08000a61 	.word	0x08000a61
 8000be4:	08000a61 	.word	0x08000a61
 8000be8:	08000a61 	.word	0x08000a61
 8000bec:	08000a61 	.word	0x08000a61
 8000bf0:	08000a61 	.word	0x08000a61
 8000bf4:	08000a61 	.word	0x08000a61
 8000bf8:	08000a61 	.word	0x08000a61
 8000bfc:	08000a61 	.word	0x08000a61
 8000c00:	08000a61 	.word	0x08000a61
 8000c04:	08000a61 	.word	0x08000a61
 8000c08:	08000a61 	.word	0x08000a61
 8000c0c:	08000af9 	.word	0x08000af9
 8000c10:	08000b05 	.word	0x08000b05
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c14:	2301      	movs	r3, #1
 8000c16:	e787      	b.n	8000b28 <HAL_GPIO_Init+0x12c>
 8000c18:	2302      	movs	r3, #2
 8000c1a:	e785      	b.n	8000b28 <HAL_GPIO_Init+0x12c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c20:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	ea22 020e 	bic.w	r2, r2, lr
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	e790      	b.n	8000b50 <HAL_GPIO_Init+0x154>
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c32:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	ea22 020e 	bic.w	r2, r2, lr
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	e793      	b.n	8000b68 <HAL_GPIO_Init+0x16c>
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c44:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c48:	689a      	ldr	r2, [r3, #8]
 8000c4a:	ea22 020e 	bic.w	r2, r2, lr
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	e796      	b.n	8000b80 <HAL_GPIO_Init+0x184>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c56:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	ea22 020e 	bic.w	r2, r2, lr
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	e799      	b.n	8000b98 <HAL_GPIO_Init+0x19c>
  }
}
 8000c64:	b002      	add	sp, #8
 8000c66:	bd70      	pop	{r4, r5, r6, pc}

08000c68 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c68:	6883      	ldr	r3, [r0, #8]
 8000c6a:	4219      	tst	r1, r3
 8000c6c:	d001      	beq.n	8000c72 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8000c6e:	2001      	movs	r0, #1
 8000c70:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c72:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8000c74:	4770      	bx	lr

08000c76 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c76:	b10a      	cbz	r2, 8000c7c <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c78:	6101      	str	r1, [r0, #16]
 8000c7a:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c7c:	0409      	lsls	r1, r1, #16
 8000c7e:	6101      	str	r1, [r0, #16]
  }
}
 8000c80:	4770      	bx	lr

08000c82 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8000c82:	b082      	sub	sp, #8
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000c84:	f240 0328 	movw	r3, #40	@ 0x28
 8000c88:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f644 52d3 	movw	r2, #19923	@ 0x4dd3
 8000c92:	f2c1 0262 	movt	r2, #4194	@ 0x1062
 8000c96:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9a:	0a5b      	lsrs	r3, r3, #9
 8000c9c:	fb00 f303 	mul.w	r3, r0, r3
 8000ca0:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8000ca2:	bf00      	nop
  }
  while (Delay --);
 8000ca4:	9b01      	ldr	r3, [sp, #4]
 8000ca6:	1e5a      	subs	r2, r3, #1
 8000ca8:	9201      	str	r2, [sp, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d1f9      	bne.n	8000ca2 <RCC_Delay+0x20>
}
 8000cae:	b002      	add	sp, #8
 8000cb0:	4770      	bx	lr

08000cb2 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	f000 8268 	beq.w	8001188 <HAL_RCC_OscConfig+0x4d6>
{
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cbe:	6803      	ldr	r3, [r0, #0]
 8000cc0:	f013 0f01 	tst.w	r3, #1
 8000cc4:	d038      	beq.n	8000d38 <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cca:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 030c 	and.w	r3, r3, #12
 8000cd4:	2b04      	cmp	r3, #4
 8000cd6:	d023      	beq.n	8000d20 <HAL_RCC_OscConfig+0x6e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cd8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cdc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b08      	cmp	r3, #8
 8000ce8:	d012      	beq.n	8000d10 <HAL_RCC_OscConfig+0x5e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cea:	6863      	ldr	r3, [r4, #4]
 8000cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000cf0:	d054      	beq.n	8000d9c <HAL_RCC_OscConfig+0xea>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d16e      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x122>
 8000cf6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e04d      	b.n	8000dac <HAL_RCC_OscConfig+0xfa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d14:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000d1e:	d0e4      	beq.n	8000cea <HAL_RCC_OscConfig+0x38>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d24:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000d2e:	d003      	beq.n	8000d38 <HAL_RCC_OscConfig+0x86>
 8000d30:	6863      	ldr	r3, [r4, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 822a 	beq.w	800118c <HAL_RCC_OscConfig+0x4da>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d38:	6823      	ldr	r3, [r4, #0]
 8000d3a:	f013 0f02 	tst.w	r3, #2
 8000d3e:	f000 8097 	beq.w	8000e70 <HAL_RCC_OscConfig+0x1be>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f013 0f0c 	tst.w	r3, #12
 8000d50:	d077      	beq.n	8000e42 <HAL_RCC_OscConfig+0x190>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d56:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 030c 	and.w	r3, r3, #12
 8000d60:	2b08      	cmp	r3, #8
 8000d62:	d066      	beq.n	8000e32 <HAL_RCC_OscConfig+0x180>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d64:	6923      	ldr	r3, [r4, #16]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80ad 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x214>
        __HAL_RCC_HSI_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d76:	f7ff fdac 	bl	80008d2 <HAL_GetTick>
 8000d7a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f013 0f02 	tst.w	r3, #2
 8000d8a:	f040 8090 	bne.w	8000eae <HAL_RCC_OscConfig+0x1fc>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d8e:	f7ff fda0 	bl	80008d2 <HAL_GetTick>
 8000d92:	1b40      	subs	r0, r0, r5
 8000d94:	2802      	cmp	r0, #2
 8000d96:	d9f1      	bls.n	8000d7c <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8000d98:	2003      	movs	r0, #3
 8000d9a:	e1fc      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000da0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000daa:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dac:	6863      	ldr	r3, [r4, #4]
 8000dae:	b373      	cbz	r3, 8000e0e <HAL_RCC_OscConfig+0x15c>
        tickstart = HAL_GetTick();
 8000db0:	f7ff fd8f 	bl	80008d2 <HAL_GetTick>
 8000db4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000dc4:	d1b8      	bne.n	8000d38 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc6:	f7ff fd84 	bl	80008d2 <HAL_GetTick>
 8000dca:	1b40      	subs	r0, r0, r5
 8000dcc:	2864      	cmp	r0, #100	@ 0x64
 8000dce:	d9f2      	bls.n	8000db6 <HAL_RCC_OscConfig+0x104>
            return HAL_TIMEOUT;
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	e1e0      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000dd8:	d00c      	beq.n	8000df4 <HAL_RCC_OscConfig+0x142>
 8000dda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dde:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e7db      	b.n	8000dac <HAL_RCC_OscConfig+0xfa>
 8000df4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df8:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	e7ce      	b.n	8000dac <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8000e0e:	f7ff fd60 	bl	80008d2 <HAL_GetTick>
 8000e12:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e18:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8000e22:	d089      	beq.n	8000d38 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e24:	f7ff fd55 	bl	80008d2 <HAL_GetTick>
 8000e28:	1b40      	subs	r0, r0, r5
 8000e2a:	2864      	cmp	r0, #100	@ 0x64
 8000e2c:	d9f2      	bls.n	8000e14 <HAL_RCC_OscConfig+0x162>
            return HAL_TIMEOUT;
 8000e2e:	2003      	movs	r0, #3
 8000e30:	e1b1      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e36:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8000e40:	d190      	bne.n	8000d64 <HAL_RCC_OscConfig+0xb2>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e46:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f013 0f02 	tst.w	r3, #2
 8000e50:	d003      	beq.n	8000e5a <HAL_RCC_OscConfig+0x1a8>
 8000e52:	6923      	ldr	r3, [r4, #16]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	f040 819b 	bne.w	8001190 <HAL_RCC_OscConfig+0x4de>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000e5e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8000e62:	6813      	ldr	r3, [r2, #0]
 8000e64:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000e68:	6961      	ldr	r1, [r4, #20]
 8000e6a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000e6e:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	f013 0f08 	tst.w	r3, #8
 8000e76:	d040      	beq.n	8000efa <HAL_RCC_OscConfig+0x248>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e78:	69a3      	ldr	r3, [r4, #24]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d072      	beq.n	8000f64 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8000e84:	2201      	movs	r2, #1
 8000e86:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000e8a:	f7ff fd22 	bl	80008d2 <HAL_GetTick>
 8000e8e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e94:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e9a:	f013 0f02 	tst.w	r3, #2
 8000e9e:	d129      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x242>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ea0:	f7ff fd17 	bl	80008d2 <HAL_GetTick>
 8000ea4:	1b40      	subs	r0, r0, r5
 8000ea6:	2802      	cmp	r0, #2
 8000ea8:	d9f2      	bls.n	8000e90 <HAL_RCC_OscConfig+0x1de>
          return HAL_TIMEOUT;
 8000eaa:	2003      	movs	r0, #3
 8000eac:	e173      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eb2:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8000ebc:	6961      	ldr	r1, [r4, #20]
 8000ebe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ec2:	6013      	str	r3, [r2, #0]
 8000ec4:	e7d4      	b.n	8000e70 <HAL_RCC_OscConfig+0x1be>
        __HAL_RCC_HSI_DISABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000ed0:	f7ff fcff 	bl	80008d2 <HAL_GetTick>
 8000ed4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eda:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f013 0f02 	tst.w	r3, #2
 8000ee4:	d0c4      	beq.n	8000e70 <HAL_RCC_OscConfig+0x1be>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fcf4 	bl	80008d2 <HAL_GetTick>
 8000eea:	1b40      	subs	r0, r0, r5
 8000eec:	2802      	cmp	r0, #2
 8000eee:	d9f2      	bls.n	8000ed6 <HAL_RCC_OscConfig+0x224>
            return HAL_TIMEOUT;
 8000ef0:	2003      	movs	r0, #3
 8000ef2:	e150      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
      RCC_Delay(1);
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fec4 	bl	8000c82 <RCC_Delay>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f013 0f04 	tst.w	r3, #4
 8000f00:	f000 80b3 	beq.w	800106a <HAL_RCC_OscConfig+0x3b8>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f08:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8000f12:	d13f      	bne.n	8000f94 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000f1c:	69da      	ldr	r2, [r3, #28]
 8000f1e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f22:	61da      	str	r2, [r3, #28]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000f2e:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f30:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000f34:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000f3e:	d02b      	beq.n	8000f98 <HAL_RCC_OscConfig+0x2e6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f40:	68e3      	ldr	r3, [r4, #12]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d042      	beq.n	8000fcc <HAL_RCC_OscConfig+0x31a>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d15e      	bne.n	8001008 <HAL_RCC_OscConfig+0x356>
 8000f4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f4e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000f52:	6a1a      	ldr	r2, [r3, #32]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	621a      	str	r2, [r3, #32]
 8000f5a:	6a1a      	ldr	r2, [r3, #32]
 8000f5c:	f022 0204 	bic.w	r2, r2, #4
 8000f60:	621a      	str	r2, [r3, #32]
 8000f62:	e03b      	b.n	8000fdc <HAL_RCC_OscConfig+0x32a>
      __HAL_RCC_LSI_DISABLE();
 8000f64:	2300      	movs	r3, #0
 8000f66:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8000f70:	f7ff fcaf 	bl	80008d2 <HAL_GetTick>
 8000f74:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	f013 0f02 	tst.w	r3, #2
 8000f84:	d0b9      	beq.n	8000efa <HAL_RCC_OscConfig+0x248>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f86:	f7ff fca4 	bl	80008d2 <HAL_GetTick>
 8000f8a:	1b40      	subs	r0, r0, r5
 8000f8c:	2802      	cmp	r0, #2
 8000f8e:	d9f2      	bls.n	8000f76 <HAL_RCC_OscConfig+0x2c4>
          return HAL_TIMEOUT;
 8000f90:	2003      	movs	r0, #3
 8000f92:	e100      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
    FlagStatus       pwrclkchanged = RESET;
 8000f94:	2500      	movs	r5, #0
 8000f96:	e7cb      	b.n	8000f30 <HAL_RCC_OscConfig+0x27e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f98:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000f9c:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fa6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000fa8:	f7ff fc93 	bl	80008d2 <HAL_GetTick>
 8000fac:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8000fb2:	f2c4 0300 	movt	r3, #16384	@ 0x4000
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8000fbc:	d1c0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x28e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fbe:	f7ff fc88 	bl	80008d2 <HAL_GetTick>
 8000fc2:	1b80      	subs	r0, r0, r6
 8000fc4:	2864      	cmp	r0, #100	@ 0x64
 8000fc6:	d9f2      	bls.n	8000fae <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8000fc8:	2003      	movs	r0, #3
 8000fca:	e0e4      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd0:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000fd4:	6a1a      	ldr	r2, [r3, #32]
 8000fd6:	f042 0201 	orr.w	r2, r2, #1
 8000fda:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fdc:	68e3      	ldr	r3, [r4, #12]
 8000fde:	b37b      	cbz	r3, 8001040 <HAL_RCC_OscConfig+0x38e>
      tickstart = HAL_GetTick();
 8000fe0:	f7ff fc77 	bl	80008d2 <HAL_GetTick>
 8000fe4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f013 0f02 	tst.w	r3, #2
 8000ff4:	d138      	bne.n	8001068 <HAL_RCC_OscConfig+0x3b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ff6:	f7ff fc6c 	bl	80008d2 <HAL_GetTick>
 8000ffa:	1b80      	subs	r0, r0, r6
 8000ffc:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001000:	4298      	cmp	r0, r3
 8001002:	d9f0      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x334>
          return HAL_TIMEOUT;
 8001004:	2003      	movs	r0, #3
 8001006:	e0c6      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001008:	2b05      	cmp	r3, #5
 800100a:	d00c      	beq.n	8001026 <HAL_RCC_OscConfig+0x374>
 800100c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001010:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	621a      	str	r2, [r3, #32]
 800101c:	6a1a      	ldr	r2, [r3, #32]
 800101e:	f022 0204 	bic.w	r2, r2, #4
 8001022:	621a      	str	r2, [r3, #32]
 8001024:	e7da      	b.n	8000fdc <HAL_RCC_OscConfig+0x32a>
 8001026:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800102a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800102e:	6a1a      	ldr	r2, [r3, #32]
 8001030:	f042 0204 	orr.w	r2, r2, #4
 8001034:	621a      	str	r2, [r3, #32]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	f042 0201 	orr.w	r2, r2, #1
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	e7cd      	b.n	8000fdc <HAL_RCC_OscConfig+0x32a>
      tickstart = HAL_GetTick();
 8001040:	f7ff fc47 	bl	80008d2 <HAL_GetTick>
 8001044:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001046:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800104e:	6a1b      	ldr	r3, [r3, #32]
 8001050:	f013 0f02 	tst.w	r3, #2
 8001054:	d008      	beq.n	8001068 <HAL_RCC_OscConfig+0x3b6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001056:	f7ff fc3c 	bl	80008d2 <HAL_GetTick>
 800105a:	1b80      	subs	r0, r0, r6
 800105c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001060:	4298      	cmp	r0, r3
 8001062:	d9f0      	bls.n	8001046 <HAL_RCC_OscConfig+0x394>
          return HAL_TIMEOUT;
 8001064:	2003      	movs	r0, #3
 8001066:	e096      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
    if (pwrclkchanged == SET)
 8001068:	bb2d      	cbnz	r5, 80010b6 <HAL_RCC_OscConfig+0x404>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800106a:	69e3      	ldr	r3, [r4, #28]
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8091 	beq.w	8001194 <HAL_RCC_OscConfig+0x4e2>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001072:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001076:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800107a:	6852      	ldr	r2, [r2, #4]
 800107c:	f002 020c 	and.w	r2, r2, #12
 8001080:	2a08      	cmp	r2, #8
 8001082:	d06e      	beq.n	8001162 <HAL_RCC_OscConfig+0x4b0>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001084:	2b02      	cmp	r3, #2
 8001086:	d01f      	beq.n	80010c8 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_PLL_DISABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800108e:	2200      	movs	r2, #0
 8001090:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001092:	f7ff fc1e 	bl	80008d2 <HAL_GetTick>
 8001096:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109c:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010a6:	d05a      	beq.n	800115e <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010a8:	f7ff fc13 	bl	80008d2 <HAL_GetTick>
 80010ac:	1b00      	subs	r0, r0, r4
 80010ae:	2802      	cmp	r0, #2
 80010b0:	d9f2      	bls.n	8001098 <HAL_RCC_OscConfig+0x3e6>
            return HAL_TIMEOUT;
 80010b2:	2003      	movs	r0, #3
 80010b4:	e06f      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ba:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80010be:	69da      	ldr	r2, [r3, #28]
 80010c0:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80010c4:	61da      	str	r2, [r3, #28]
 80010c6:	e7d0      	b.n	800106a <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_PLL_DISABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 80010ce:	2200      	movs	r2, #0
 80010d0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80010d2:	f7ff fbfe 	bl	80008d2 <HAL_GetTick>
 80010d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80010e6:	d006      	beq.n	80010f6 <HAL_RCC_OscConfig+0x444>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010e8:	f7ff fbf3 	bl	80008d2 <HAL_GetTick>
 80010ec:	1b40      	subs	r0, r0, r5
 80010ee:	2802      	cmp	r0, #2
 80010f0:	d9f2      	bls.n	80010d8 <HAL_RCC_OscConfig+0x426>
            return HAL_TIMEOUT;
 80010f2:	2003      	movs	r0, #3
 80010f4:	e04f      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f6:	6a23      	ldr	r3, [r4, #32]
 80010f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010fc:	d022      	beq.n	8001144 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001102:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8001106:	6853      	ldr	r3, [r2, #4]
 8001108:	f423 1374 	bic.w	r3, r3, #3997696	@ 0x3d0000
 800110c:	6a21      	ldr	r1, [r4, #32]
 800110e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8001110:	4301      	orrs	r1, r0
 8001112:	430b      	orrs	r3, r1
 8001114:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	f2c4 2342 	movt	r3, #16962	@ 0x4242
 800111c:	2201      	movs	r2, #1
 800111e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8001120:	f7ff fbd7 	bl	80008d2 <HAL_GetTick>
 8001124:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001126:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800112a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001134:	d111      	bne.n	800115a <HAL_RCC_OscConfig+0x4a8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001136:	f7ff fbcc 	bl	80008d2 <HAL_GetTick>
 800113a:	1b00      	subs	r0, r0, r4
 800113c:	2802      	cmp	r0, #2
 800113e:	d9f2      	bls.n	8001126 <HAL_RCC_OscConfig+0x474>
            return HAL_TIMEOUT;
 8001140:	2003      	movs	r0, #3
 8001142:	e028      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001144:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001148:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800114c:	6853      	ldr	r3, [r2, #4]
 800114e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001152:	68a1      	ldr	r1, [r4, #8]
 8001154:	430b      	orrs	r3, r1
 8001156:	6053      	str	r3, [r2, #4]
 8001158:	e7d1      	b.n	80010fe <HAL_RCC_OscConfig+0x44c>
  return HAL_OK;
 800115a:	2000      	movs	r0, #0
 800115c:	e01b      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
 800115e:	2000      	movs	r0, #0
 8001160:	e019      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001162:	2b01      	cmp	r3, #1
 8001164:	d019      	beq.n	800119a <HAL_RCC_OscConfig+0x4e8>
        pll_config = RCC->CFGR;
 8001166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116a:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800116e:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001170:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 8001174:	6a22      	ldr	r2, [r4, #32]
 8001176:	4291      	cmp	r1, r2
 8001178:	d111      	bne.n	800119e <HAL_RCC_OscConfig+0x4ec>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800117a:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 800117e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001180:	4293      	cmp	r3, r2
 8001182:	d10e      	bne.n	80011a2 <HAL_RCC_OscConfig+0x4f0>
  return HAL_OK;
 8001184:	2000      	movs	r0, #0
 8001186:	e006      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
    return HAL_ERROR;
 8001188:	2001      	movs	r0, #1
}
 800118a:	4770      	bx	lr
        return HAL_ERROR;
 800118c:	2001      	movs	r0, #1
 800118e:	e002      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
        return HAL_ERROR;
 8001190:	2001      	movs	r0, #1
 8001192:	e000      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
  return HAL_OK;
 8001194:	2000      	movs	r0, #0
}
 8001196:	b002      	add	sp, #8
 8001198:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800119a:	2001      	movs	r0, #1
 800119c:	e7fb      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
          return HAL_ERROR;
 800119e:	2001      	movs	r0, #1
 80011a0:	e7f9      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>
 80011a2:	2001      	movs	r0, #1
 80011a4:	e7f7      	b.n	8001196 <HAL_RCC_OscConfig+0x4e4>

080011a6 <HAL_RCC_GetSysClockFreq>:
{
 80011a6:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011a8:	f641 5330 	movw	r3, #7472	@ 0x1d30
 80011ac:	f6c0 0300 	movt	r3, #2048	@ 0x800
 80011b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011b2:	f10d 0c18 	add.w	ip, sp, #24
 80011b6:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80011ba:	f240 2301 	movw	r3, #513	@ 0x201
 80011be:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80011c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80011ca:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80011cc:	f003 020c 	and.w	r2, r3, #12
 80011d0:	2a08      	cmp	r2, #8
 80011d2:	d005      	beq.n	80011e0 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 80011d4:	f44f 5090 	mov.w	r0, #4608	@ 0x1200
 80011d8:	f2c0 007a 	movt	r0, #122	@ 0x7a
}
 80011dc:	b006      	add	sp, #24
 80011de:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011e0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80011e4:	3218      	adds	r2, #24
 80011e6:	446a      	add	r2, sp
 80011e8:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011ec:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80011f0:	d013      	beq.n	800121a <HAL_RCC_GetSysClockFreq+0x74>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8001200:	3318      	adds	r3, #24
 8001202:	446b      	add	r3, sp
 8001204:	f813 2c14 	ldrb.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001208:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 800120c:	f2c0 037a 	movt	r3, #122	@ 0x7a
 8001210:	fb03 f000 	mul.w	r0, r3, r0
 8001214:	fbb0 f0f2 	udiv	r0, r0, r2
 8001218:	e7e0      	b.n	80011dc <HAL_RCC_GetSysClockFreq+0x36>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800121a:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800121e:	f2c0 033d 	movt	r3, #61	@ 0x3d
 8001222:	fb03 f000 	mul.w	r0, r3, r0
 8001226:	e7d9      	b.n	80011dc <HAL_RCC_GetSysClockFreq+0x36>

08001228 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8001228:	2800      	cmp	r0, #0
 800122a:	f000 80d7 	beq.w	80013dc <HAL_RCC_ClockConfig+0x1b4>
{
 800122e:	b570      	push	{r4, r5, r6, lr}
 8001230:	460d      	mov	r5, r1
 8001232:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001234:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001238:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	428b      	cmp	r3, r1
 8001244:	d20e      	bcs.n	8001264 <HAL_RCC_ClockConfig+0x3c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001246:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800124a:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800124e:	6813      	ldr	r3, [r2, #0]
 8001250:	f023 0307 	bic.w	r3, r3, #7
 8001254:	430b      	orrs	r3, r1
 8001256:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	428b      	cmp	r3, r1
 8001260:	f040 80be 	bne.w	80013e0 <HAL_RCC_ClockConfig+0x1b8>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	f013 0f02 	tst.w	r3, #2
 800126a:	d020      	beq.n	80012ae <HAL_RCC_ClockConfig+0x86>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	f013 0f04 	tst.w	r3, #4
 8001270:	d007      	beq.n	8001282 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001276:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001280:	605a      	str	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	f013 0f08 	tst.w	r3, #8
 8001288:	d007      	beq.n	800129a <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 8001298:	605a      	str	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800129a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800129e:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80012a2:	6853      	ldr	r3, [r2, #4]
 80012a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012a8:	68a1      	ldr	r1, [r4, #8]
 80012aa:	430b      	orrs	r3, r1
 80012ac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f013 0f01 	tst.w	r3, #1
 80012b4:	d041      	beq.n	800133a <HAL_RCC_ClockConfig+0x112>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012b6:	6863      	ldr	r3, [r4, #4]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d02a      	beq.n	8001312 <HAL_RCC_ClockConfig+0xea>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d032      	beq.n	8001326 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c4:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	f012 0f02 	tst.w	r2, #2
 80012ce:	f000 8089 	beq.w	80013e4 <HAL_RCC_ClockConfig+0x1bc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012d6:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 80012da:	6851      	ldr	r1, [r2, #4]
 80012dc:	f021 0103 	bic.w	r1, r1, #3
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6053      	str	r3, [r2, #4]
    tickstart = HAL_GetTick();
 80012e4:	f7ff faf5 	bl	80008d2 <HAL_GetTick>
 80012e8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ee:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	6862      	ldr	r2, [r4, #4]
 80012fa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80012fe:	d01c      	beq.n	800133a <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001300:	f7ff fae7 	bl	80008d2 <HAL_GetTick>
 8001304:	1b80      	subs	r0, r0, r6
 8001306:	f241 3388 	movw	r3, #5000	@ 0x1388
 800130a:	4298      	cmp	r0, r3
 800130c:	d9ed      	bls.n	80012ea <HAL_RCC_ClockConfig+0xc2>
        return HAL_TIMEOUT;
 800130e:	2003      	movs	r0, #3
 8001310:	e063      	b.n	80013da <HAL_RCC_ClockConfig+0x1b2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001316:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8001320:	d1d7      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
 8001324:	e059      	b.n	80013da <HAL_RCC_ClockConfig+0x1b2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001326:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800132a:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8001334:	d1cd      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xaa>
        return HAL_ERROR;
 8001336:	2001      	movs	r0, #1
 8001338:	e04f      	b.n	80013da <HAL_RCC_ClockConfig+0x1b2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800133a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133e:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	42ab      	cmp	r3, r5
 800134a:	d90d      	bls.n	8001368 <HAL_RCC_ClockConfig+0x140>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001350:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8001354:	6813      	ldr	r3, [r2, #0]
 8001356:	f023 0307 	bic.w	r3, r3, #7
 800135a:	432b      	orrs	r3, r5
 800135c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	42ab      	cmp	r3, r5
 8001366:	d13f      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x1c0>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	f013 0f04 	tst.w	r3, #4
 800136e:	d009      	beq.n	8001384 <HAL_RCC_ClockConfig+0x15c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001370:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001374:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8001378:	6853      	ldr	r3, [r2, #4]
 800137a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800137e:	68e1      	ldr	r1, [r4, #12]
 8001380:	430b      	orrs	r3, r1
 8001382:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	f013 0f08 	tst.w	r3, #8
 800138a:	d00a      	beq.n	80013a2 <HAL_RCC_ClockConfig+0x17a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800138c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001390:	f2c4 0202 	movt	r2, #16386	@ 0x4002
 8001394:	6853      	ldr	r3, [r2, #4]
 8001396:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800139a:	6921      	ldr	r1, [r4, #16]
 800139c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80013a0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013a2:	f7ff ff00 	bl	80011a6 <HAL_RCC_GetSysClockFreq>
 80013a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013aa:	f2c4 0302 	movt	r3, #16386	@ 0x4002
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80013b4:	f641 5220 	movw	r2, #7456	@ 0x1d20
 80013b8:	f6c0 0200 	movt	r2, #2048	@ 0x800
 80013bc:	5cd3      	ldrb	r3, [r2, r3]
 80013be:	40d8      	lsrs	r0, r3
 80013c0:	f240 0328 	movw	r3, #40	@ 0x28
 80013c4:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80013ca:	f240 0330 	movw	r3, #48	@ 0x30
 80013ce:	f2c2 0300 	movt	r3, #8192	@ 0x2000
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	f7ff fa35 	bl	8000842 <HAL_InitTick>
  return HAL_OK;
 80013d8:	2000      	movs	r0, #0
}
 80013da:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80013dc:	2001      	movs	r0, #1
}
 80013de:	4770      	bx	lr
    return HAL_ERROR;
 80013e0:	2001      	movs	r0, #1
 80013e2:	e7fa      	b.n	80013da <HAL_RCC_ClockConfig+0x1b2>
        return HAL_ERROR;
 80013e4:	2001      	movs	r0, #1
 80013e6:	e7f8      	b.n	80013da <HAL_RCC_ClockConfig+0x1b2>
    return HAL_ERROR;
 80013e8:	2001      	movs	r0, #1
 80013ea:	e7f6      	b.n	80013da <HAL_RCC_ClockConfig+0x1b2>

080013ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80013ec:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013ee:	6a03      	ldr	r3, [r0, #32]
 80013f0:	f023 0301 	bic.w	r3, r3, #1
 80013f4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013f6:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013f8:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013fa:	6983      	ldr	r3, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80013fc:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001400:	680c      	ldr	r4, [r1, #0]
 8001402:	431c      	orrs	r4, r3

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001404:	f022 0202 	bic.w	r2, r2, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001408:	688b      	ldr	r3, [r1, #8]
 800140a:	4313      	orrs	r3, r2

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800140c:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001410:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001414:	4290      	cmp	r0, r2
 8001416:	d006      	beq.n	8001426 <TIM_OC1_SetConfig+0x3a>
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001418:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800141a:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800141c:	684a      	ldr	r2, [r1, #4]
 800141e:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001420:	6203      	str	r3, [r0, #32]
}
 8001422:	bc30      	pop	{r4, r5}
 8001424:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC1NP;
 8001426:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800142a:	68ca      	ldr	r2, [r1, #12]
 800142c:	431a      	orrs	r2, r3
    tmpccer &= ~TIM_CCER_CC1NE;
 800142e:	f022 0304 	bic.w	r3, r2, #4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001432:	f425 7540 	bic.w	r5, r5, #768	@ 0x300
    tmpcr2 |= OC_Config->OCIdleState;
 8001436:	694a      	ldr	r2, [r1, #20]
 8001438:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800143a:	698d      	ldr	r5, [r1, #24]
 800143c:	4315      	orrs	r5, r2
 800143e:	e7eb      	b.n	8001418 <TIM_OC1_SetConfig+0x2c>

08001440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001440:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001442:	6a03      	ldr	r3, [r0, #32]
 8001444:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001448:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800144a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800144c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800144e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001450:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001454:	680d      	ldr	r5, [r1, #0]
 8001456:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800145c:	688a      	ldr	r2, [r1, #8]
 800145e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001462:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001466:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800146a:	4290      	cmp	r0, r2
 800146c:	d006      	beq.n	800147c <TIM_OC3_SetConfig+0x3c>
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800146e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001470:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001472:	684a      	ldr	r2, [r1, #4]
 8001474:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001476:	6203      	str	r3, [r0, #32]
}
 8001478:	bc30      	pop	{r4, r5}
 800147a:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC3NP;
 800147c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001480:	68ca      	ldr	r2, [r1, #12]
 8001482:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8001486:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800148a:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800148e:	694a      	ldr	r2, [r1, #20]
 8001490:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001494:	698a      	ldr	r2, [r1, #24]
 8001496:	ea44 1402 	orr.w	r4, r4, r2, lsl #4
 800149a:	e7e8      	b.n	800146e <TIM_OC3_SetConfig+0x2e>

0800149c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800149c:	b410      	push	{r4}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800149e:	6a03      	ldr	r3, [r0, #32]
 80014a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80014a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80014ac:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80014b0:	f8d1 c000 	ldr.w	ip, [r1]
 80014b4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80014b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80014bc:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80014c0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014c4:	f44f 5c30 	mov.w	ip, #11264	@ 0x2c00
 80014c8:	f2c4 0c01 	movt	ip, #16385	@ 0x4001
 80014cc:	4560      	cmp	r0, ip
 80014ce:	d006      	beq.n	80014de <TIM_OC4_SetConfig+0x42>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014d2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80014d4:	684a      	ldr	r2, [r1, #4]
 80014d6:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014d8:	6203      	str	r3, [r0, #32]
}
 80014da:	bc10      	pop	{r4}
 80014dc:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS4;
 80014de:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80014e2:	f8d1 c014 	ldr.w	ip, [r1, #20]
 80014e6:	ea44 148c 	orr.w	r4, r4, ip, lsl #6
 80014ea:	e7f1      	b.n	80014d0 <TIM_OC4_SetConfig+0x34>

080014ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80014ec:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80014ee:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014f0:	6a04      	ldr	r4, [r0, #32]
 80014f2:	f024 0401 	bic.w	r4, r4, #1
 80014f6:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80014f8:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80014fa:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80014fe:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001502:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001506:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001508:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800150a:	6203      	str	r3, [r0, #32]
}
 800150c:	bc10      	pop	{r4}
 800150e:	4770      	bx	lr

08001510 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001510:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001512:	6a03      	ldr	r3, [r0, #32]
 8001514:	f023 0310 	bic.w	r3, r3, #16
 8001518:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800151a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800151c:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800151e:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001522:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001526:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800152a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800152e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001530:	6203      	str	r3, [r0, #32]
}
 8001532:	bc10      	pop	{r4}
 8001534:	4770      	bx	lr

08001536 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001536:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001538:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800153c:	430b      	orrs	r3, r1
 800153e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001542:	6083      	str	r3, [r0, #8]
}
 8001544:	4770      	bx	lr

08001546 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001546:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b01      	cmp	r3, #1
 800154e:	d12e      	bne.n	80015ae <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8001550:	2302      	movs	r3, #2
 8001552:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001556:	6802      	ldr	r2, [r0, #0]
 8001558:	68d3      	ldr	r3, [r2, #12]
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001560:	6803      	ldr	r3, [r0, #0]
 8001562:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001566:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 800156a:	4293      	cmp	r3, r2
 800156c:	d014      	beq.n	8001598 <HAL_TIM_Base_Start_IT+0x52>
 800156e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001572:	d011      	beq.n	8001598 <HAL_TIM_Base_Start_IT+0x52>
 8001574:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001578:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800157c:	4293      	cmp	r3, r2
 800157e:	d00b      	beq.n	8001598 <HAL_TIM_Base_Start_IT+0x52>
 8001580:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001584:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8001588:	4293      	cmp	r3, r2
 800158a:	d005      	beq.n	8001598 <HAL_TIM_Base_Start_IT+0x52>
    __HAL_TIM_ENABLE(htim);
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	f042 0201 	orr.w	r2, r2, #1
 8001592:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001594:	2000      	movs	r0, #0
 8001596:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800159e:	2a06      	cmp	r2, #6
 80015a0:	d007      	beq.n	80015b2 <HAL_TIM_Base_Start_IT+0x6c>
      __HAL_TIM_ENABLE(htim);
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f042 0201 	orr.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80015aa:	2000      	movs	r0, #0
 80015ac:	4770      	bx	lr
    return HAL_ERROR;
 80015ae:	2001      	movs	r0, #1
 80015b0:	4770      	bx	lr
  return HAL_OK;
 80015b2:	2000      	movs	r0, #0
}
 80015b4:	4770      	bx	lr

080015b6 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80015b6:	6802      	ldr	r2, [r0, #0]
 80015b8:	68d3      	ldr	r3, [r2, #12]
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 80015c0:	6803      	ldr	r3, [r0, #0]
 80015c2:	6a19      	ldr	r1, [r3, #32]
 80015c4:	f241 1211 	movw	r2, #4369	@ 0x1111
 80015c8:	4211      	tst	r1, r2
 80015ca:	d108      	bne.n	80015de <HAL_TIM_Base_Stop_IT+0x28>
 80015cc:	6a19      	ldr	r1, [r3, #32]
 80015ce:	f240 4244 	movw	r2, #1092	@ 0x444
 80015d2:	4211      	tst	r1, r2
 80015d4:	d103      	bne.n	80015de <HAL_TIM_Base_Stop_IT+0x28>
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	f022 0201 	bic.w	r2, r2, #1
 80015dc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80015de:	2301      	movs	r3, #1
 80015e0:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
}
 80015e4:	2000      	movs	r0, #0
 80015e6:	4770      	bx	lr

080015e8 <HAL_TIM_PWM_MspInit>:
}
 80015e8:	4770      	bx	lr

080015ea <HAL_TIM_PeriodElapsedCallback>:
}
 80015ea:	4770      	bx	lr

080015ec <HAL_TIM_OC_DelayElapsedCallback>:
}
 80015ec:	4770      	bx	lr

080015ee <HAL_TIM_IC_CaptureCallback>:
}
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 80015f0:	4770      	bx	lr

080015f2 <HAL_TIM_TriggerCallback>:
}
 80015f2:	4770      	bx	lr

080015f4 <HAL_TIM_IRQHandler>:
{
 80015f4:	b510      	push	{r4, lr}
 80015f6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	691a      	ldr	r2, [r3, #16]
 80015fc:	f012 0f02 	tst.w	r2, #2
 8001600:	d011      	beq.n	8001626 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	f012 0f02 	tst.w	r2, #2
 8001608:	d00d      	beq.n	8001626 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800160a:	f06f 0202 	mvn.w	r2, #2
 800160e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001610:	2301      	movs	r3, #1
 8001612:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001614:	6803      	ldr	r3, [r0, #0]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f013 0f03 	tst.w	r3, #3
 800161c:	d070      	beq.n	8001700 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800161e:	f7ff ffe6 	bl	80015ee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001622:	2300      	movs	r3, #0
 8001624:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	691a      	ldr	r2, [r3, #16]
 800162a:	f012 0f04 	tst.w	r2, #4
 800162e:	d012      	beq.n	8001656 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	f012 0f04 	tst.w	r2, #4
 8001636:	d00e      	beq.n	8001656 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001638:	f06f 0204 	mvn.w	r2, #4
 800163c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800163e:	2302      	movs	r3, #2
 8001640:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800164a:	d05f      	beq.n	800170c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ffce 	bl	80015ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001652:	2300      	movs	r3, #0
 8001654:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	f012 0f08 	tst.w	r2, #8
 800165e:	d012      	beq.n	8001686 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	f012 0f08 	tst.w	r2, #8
 8001666:	d00e      	beq.n	8001686 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001668:	f06f 0208 	mvn.w	r2, #8
 800166c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800166e:	2304      	movs	r3, #4
 8001670:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001672:	6823      	ldr	r3, [r4, #0]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	f013 0f03 	tst.w	r3, #3
 800167a:	d04e      	beq.n	800171a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff ffb6 	bl	80015ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	2300      	movs	r3, #0
 8001684:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001686:	6823      	ldr	r3, [r4, #0]
 8001688:	691a      	ldr	r2, [r3, #16]
 800168a:	f012 0f10 	tst.w	r2, #16
 800168e:	d012      	beq.n	80016b6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	f012 0f10 	tst.w	r2, #16
 8001696:	d00e      	beq.n	80016b6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001698:	f06f 0210 	mvn.w	r2, #16
 800169c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800169e:	2308      	movs	r3, #8
 80016a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80016aa:	d03d      	beq.n	8001728 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff ff9e 	bl	80015ee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016b2:	2300      	movs	r3, #0
 80016b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	f012 0f01 	tst.w	r2, #1
 80016be:	d003      	beq.n	80016c8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	f012 0f01 	tst.w	r2, #1
 80016c6:	d136      	bne.n	8001736 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016c8:	6823      	ldr	r3, [r4, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80016d0:	d003      	beq.n	80016da <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	f012 0f80 	tst.w	r2, #128	@ 0x80
 80016d8:	d134      	bne.n	8001744 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016da:	6823      	ldr	r3, [r4, #0]
 80016dc:	691a      	ldr	r2, [r3, #16]
 80016de:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80016e2:	d003      	beq.n	80016ec <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	f012 0f40 	tst.w	r2, #64	@ 0x40
 80016ea:	d132      	bne.n	8001752 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	691a      	ldr	r2, [r3, #16]
 80016f0:	f012 0f20 	tst.w	r2, #32
 80016f4:	d003      	beq.n	80016fe <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	f012 0f20 	tst.w	r2, #32
 80016fc:	d130      	bne.n	8001760 <HAL_TIM_IRQHandler+0x16c>
}
 80016fe:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001700:	f7ff ff74 	bl	80015ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001704:	4620      	mov	r0, r4
 8001706:	f7ff ff73 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
 800170a:	e78a      	b.n	8001622 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170c:	4620      	mov	r0, r4
 800170e:	f7ff ff6d 	bl	80015ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff ff6c 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001718:	e79b      	b.n	8001652 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800171a:	4620      	mov	r0, r4
 800171c:	f7ff ff66 	bl	80015ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001720:	4620      	mov	r0, r4
 8001722:	f7ff ff65 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001726:	e7ac      	b.n	8001682 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff ff5f 	bl	80015ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172e:	4620      	mov	r0, r4
 8001730:	f7ff ff5e 	bl	80015f0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001734:	e7bd      	b.n	80016b2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001736:	f06f 0201 	mvn.w	r2, #1
 800173a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800173c:	4620      	mov	r0, r4
 800173e:	f7ff ff54 	bl	80015ea <HAL_TIM_PeriodElapsedCallback>
 8001742:	e7c1      	b.n	80016c8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001744:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001748:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800174a:	4620      	mov	r0, r4
 800174c:	f000 faae 	bl	8001cac <HAL_TIMEx_BreakCallback>
 8001750:	e7c3      	b.n	80016da <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001752:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001756:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff ff4a 	bl	80015f2 <HAL_TIM_TriggerCallback>
 800175e:	e7c5      	b.n	80016ec <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001760:	f06f 0220 	mvn.w	r2, #32
 8001764:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001766:	4620      	mov	r0, r4
 8001768:	f000 fa9f 	bl	8001caa <HAL_TIMEx_CommutCallback>
}
 800176c:	e7c7      	b.n	80016fe <HAL_TIM_IRQHandler+0x10a>

0800176e <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800176e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001770:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001774:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001778:	4290      	cmp	r0, r2
 800177a:	d00e      	beq.n	800179a <TIM_Base_SetConfig+0x2c>
 800177c:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8001780:	d00b      	beq.n	800179a <TIM_Base_SetConfig+0x2c>
 8001782:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001786:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 800178a:	4290      	cmp	r0, r2
 800178c:	d005      	beq.n	800179a <TIM_Base_SetConfig+0x2c>
 800178e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001792:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8001796:	4290      	cmp	r0, r2
 8001798:	d103      	bne.n	80017a2 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800179a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800179e:	684a      	ldr	r2, [r1, #4]
 80017a0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017a2:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 80017a6:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 80017aa:	4290      	cmp	r0, r2
 80017ac:	d00e      	beq.n	80017cc <TIM_Base_SetConfig+0x5e>
 80017ae:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80017b2:	d00b      	beq.n	80017cc <TIM_Base_SetConfig+0x5e>
 80017b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017b8:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80017bc:	4290      	cmp	r0, r2
 80017be:	d005      	beq.n	80017cc <TIM_Base_SetConfig+0x5e>
 80017c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017c4:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 80017c8:	4290      	cmp	r0, r2
 80017ca:	d103      	bne.n	80017d4 <TIM_Base_SetConfig+0x66>
    tmpcr1 &= ~TIM_CR1_CKD;
 80017cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d0:	68ca      	ldr	r2, [r1, #12]
 80017d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017d8:	694a      	ldr	r2, [r1, #20]
 80017da:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80017dc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017de:	688b      	ldr	r3, [r1, #8]
 80017e0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017e2:	680b      	ldr	r3, [r1, #0]
 80017e4:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017e6:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 80017ea:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 80017ee:	4298      	cmp	r0, r3
 80017f0:	d002      	beq.n	80017f8 <TIM_Base_SetConfig+0x8a>
  TIMx->EGR = TIM_EGR_UG;
 80017f2:	2301      	movs	r3, #1
 80017f4:	6143      	str	r3, [r0, #20]
}
 80017f6:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80017f8:	690b      	ldr	r3, [r1, #16]
 80017fa:	6303      	str	r3, [r0, #48]	@ 0x30
 80017fc:	e7f9      	b.n	80017f2 <TIM_Base_SetConfig+0x84>

080017fe <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80017fe:	b340      	cbz	r0, 8001852 <HAL_TIM_Base_Init+0x54>
{
 8001800:	b510      	push	{r4, lr}
 8001802:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001804:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001808:	b1f3      	cbz	r3, 8001848 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001810:	4621      	mov	r1, r4
 8001812:	f851 0b04 	ldr.w	r0, [r1], #4
 8001816:	f7ff ffaa 	bl	800176e <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800181a:	2301      	movs	r3, #1
 800181c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001820:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001824:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001828:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800182c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001830:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001838:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800183c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001840:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001844:	2000      	movs	r0, #0
}
 8001846:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001848:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800184c:	f7fe ff2f 	bl	80006ae <HAL_TIM_Base_MspInit>
 8001850:	e7db      	b.n	800180a <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
}
 8001854:	4770      	bx	lr

08001856 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8001856:	b340      	cbz	r0, 80018aa <HAL_TIM_PWM_Init+0x54>
{
 8001858:	b510      	push	{r4, lr}
 800185a:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800185c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001860:	b1f3      	cbz	r3, 80018a0 <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8001862:	2302      	movs	r3, #2
 8001864:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001868:	4621      	mov	r1, r4
 800186a:	f851 0b04 	ldr.w	r0, [r1], #4
 800186e:	f7ff ff7e 	bl	800176e <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001872:	2301      	movs	r3, #1
 8001874:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001878:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800187c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001880:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001884:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001888:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800188c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001890:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8001894:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001898:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800189c:	2000      	movs	r0, #0
}
 800189e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80018a0:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80018a4:	f7ff fea0 	bl	80015e8 <HAL_TIM_PWM_MspInit>
 80018a8:	e7db      	b.n	8001862 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
}
 80018ac:	4770      	bx	lr

080018ae <TIM_OC2_SetConfig>:
{
 80018ae:	b410      	push	{r4}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018b0:	6a03      	ldr	r3, [r0, #32]
 80018b2:	f023 0310 	bic.w	r3, r3, #16
 80018b6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80018b8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80018ba:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80018bc:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80018be:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80018c2:	f8d1 c000 	ldr.w	ip, [r1]
 80018c6:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 80018ca:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80018ce:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80018d2:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80018d6:	f44f 5c30 	mov.w	ip, #11264	@ 0x2c00
 80018da:	f2c4 0c01 	movt	ip, #16385	@ 0x4001
 80018de:	4560      	cmp	r0, ip
 80018e0:	d006      	beq.n	80018f0 <TIM_OC2_SetConfig+0x42>
  TIMx->CR2 = tmpcr2;
 80018e2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80018e4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80018e6:	684a      	ldr	r2, [r1, #4]
 80018e8:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 80018ea:	6203      	str	r3, [r0, #32]
}
 80018ec:	bc10      	pop	{r4}
 80018ee:	4770      	bx	lr
    tmpccer &= ~TIM_CCER_CC2NP;
 80018f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80018f4:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 80018f8:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80018fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001900:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001904:	f8d1 c014 	ldr.w	ip, [r1, #20]
 8001908:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800190c:	f8d1 c018 	ldr.w	ip, [r1, #24]
 8001910:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
 8001914:	e7e5      	b.n	80018e2 <TIM_OC2_SetConfig+0x34>

08001916 <HAL_TIM_PWM_ConfigChannel>:
{
 8001916:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001918:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800191c:	2b01      	cmp	r3, #1
 800191e:	d060      	beq.n	80019e2 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001920:	4604      	mov	r4, r0
 8001922:	460d      	mov	r5, r1
 8001924:	2301      	movs	r3, #1
 8001926:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800192a:	2a0c      	cmp	r2, #12
 800192c:	d81a      	bhi.n	8001964 <HAL_TIM_PWM_ConfigChannel+0x4e>
 800192e:	e8df f002 	tbb	[pc, r2]
 8001932:	1907      	.short	0x1907
 8001934:	191d1919 	.word	0x191d1919
 8001938:	19311919 	.word	0x19311919
 800193c:	1919      	.short	0x1919
 800193e:	44          	.byte	0x44
 800193f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001940:	6800      	ldr	r0, [r0, #0]
 8001942:	f7ff fd53 	bl	80013ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001946:	6822      	ldr	r2, [r4, #0]
 8001948:	6993      	ldr	r3, [r2, #24]
 800194a:	f043 0308 	orr.w	r3, r3, #8
 800194e:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001950:	6822      	ldr	r2, [r4, #0]
 8001952:	6993      	ldr	r3, [r2, #24]
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800195a:	6822      	ldr	r2, [r4, #0]
 800195c:	6993      	ldr	r3, [r2, #24]
 800195e:	6929      	ldr	r1, [r5, #16]
 8001960:	430b      	orrs	r3, r1
 8001962:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8001964:	2000      	movs	r0, #0
 8001966:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 800196a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800196c:	6800      	ldr	r0, [r0, #0]
 800196e:	f7ff ff9e 	bl	80018ae <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001972:	6822      	ldr	r2, [r4, #0]
 8001974:	6993      	ldr	r3, [r2, #24]
 8001976:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800197a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800197c:	6822      	ldr	r2, [r4, #0]
 800197e:	6993      	ldr	r3, [r2, #24]
 8001980:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001984:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001986:	6822      	ldr	r2, [r4, #0]
 8001988:	6993      	ldr	r3, [r2, #24]
 800198a:	6929      	ldr	r1, [r5, #16]
 800198c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001990:	6193      	str	r3, [r2, #24]
      break;
 8001992:	e7e7      	b.n	8001964 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001994:	6800      	ldr	r0, [r0, #0]
 8001996:	f7ff fd53 	bl	8001440 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	69d3      	ldr	r3, [r2, #28]
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019a4:	6822      	ldr	r2, [r4, #0]
 80019a6:	69d3      	ldr	r3, [r2, #28]
 80019a8:	f023 0304 	bic.w	r3, r3, #4
 80019ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	69d3      	ldr	r3, [r2, #28]
 80019b2:	6929      	ldr	r1, [r5, #16]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	61d3      	str	r3, [r2, #28]
      break;
 80019b8:	e7d4      	b.n	8001964 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019ba:	6800      	ldr	r0, [r0, #0]
 80019bc:	f7ff fd6e 	bl	800149c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019c0:	6822      	ldr	r2, [r4, #0]
 80019c2:	69d3      	ldr	r3, [r2, #28]
 80019c4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019c8:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80019ca:	6822      	ldr	r2, [r4, #0]
 80019cc:	69d3      	ldr	r3, [r2, #28]
 80019ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80019d2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80019d4:	6822      	ldr	r2, [r4, #0]
 80019d6:	69d3      	ldr	r3, [r2, #28]
 80019d8:	6929      	ldr	r1, [r5, #16]
 80019da:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80019de:	61d3      	str	r3, [r2, #28]
      break;
 80019e0:	e7c0      	b.n	8001964 <HAL_TIM_PWM_ConfigChannel+0x4e>
  __HAL_LOCK(htim);
 80019e2:	2002      	movs	r0, #2
 80019e4:	e7c1      	b.n	800196a <HAL_TIM_PWM_ConfigChannel+0x54>

080019e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80019e6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80019e8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019ea:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80019f2:	430a      	orrs	r2, r1
 80019f4:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019f8:	6082      	str	r2, [r0, #8]
}
 80019fa:	bc10      	pop	{r4}
 80019fc:	4770      	bx	lr

080019fe <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80019fe:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d066      	beq.n	8001ad4 <HAL_TIM_ConfigClockSource+0xd6>
{
 8001a06:	b510      	push	{r4, lr}
 8001a08:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	2302      	movs	r3, #2
 8001a12:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001a22:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001a24:	680b      	ldr	r3, [r1, #0]
 8001a26:	2b60      	cmp	r3, #96	@ 0x60
 8001a28:	d040      	beq.n	8001aac <HAL_TIM_ConfigClockSource+0xae>
 8001a2a:	d81c      	bhi.n	8001a66 <HAL_TIM_ConfigClockSource+0x68>
 8001a2c:	2b40      	cmp	r3, #64	@ 0x40
 8001a2e:	d047      	beq.n	8001ac0 <HAL_TIM_ConfigClockSource+0xc2>
 8001a30:	d90b      	bls.n	8001a4a <HAL_TIM_ConfigClockSource+0x4c>
 8001a32:	2b50      	cmp	r3, #80	@ 0x50
 8001a34:	d133      	bne.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a36:	68ca      	ldr	r2, [r1, #12]
 8001a38:	6849      	ldr	r1, [r1, #4]
 8001a3a:	6800      	ldr	r0, [r0, #0]
 8001a3c:	f7ff fd56 	bl	80014ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a40:	2150      	movs	r1, #80	@ 0x50
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	f7ff fd77 	bl	8001536 <TIM_ITRx_SetConfig>
      break;
 8001a48:	e029      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d006      	beq.n	8001a5c <HAL_TIM_ConfigClockSource+0x5e>
 8001a4e:	d803      	bhi.n	8001a58 <HAL_TIM_ConfigClockSource+0x5a>
 8001a50:	b123      	cbz	r3, 8001a5c <HAL_TIM_ConfigClockSource+0x5e>
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d002      	beq.n	8001a5c <HAL_TIM_ConfigClockSource+0x5e>
 8001a56:	e022      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
 8001a58:	2b30      	cmp	r3, #48	@ 0x30
 8001a5a:	d120      	bne.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	f7ff fd69 	bl	8001536 <TIM_ITRx_SetConfig>
        break;
 8001a64:	e01b      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 8001a66:	2b70      	cmp	r3, #112	@ 0x70
 8001a68:	d00e      	beq.n	8001a88 <HAL_TIM_ConfigClockSource+0x8a>
 8001a6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a6e:	d116      	bne.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8001a70:	68cb      	ldr	r3, [r1, #12]
 8001a72:	684a      	ldr	r2, [r1, #4]
 8001a74:	6889      	ldr	r1, [r1, #8]
 8001a76:	6800      	ldr	r0, [r0, #0]
 8001a78:	f7ff ffb5 	bl	80019e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a7c:	6822      	ldr	r2, [r4, #0]
 8001a7e:	6893      	ldr	r3, [r2, #8]
 8001a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a84:	6093      	str	r3, [r2, #8]
      break;
 8001a86:	e00a      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8001a88:	68cb      	ldr	r3, [r1, #12]
 8001a8a:	684a      	ldr	r2, [r1, #4]
 8001a8c:	6889      	ldr	r1, [r1, #8]
 8001a8e:	6800      	ldr	r0, [r0, #0]
 8001a90:	f7ff ffa9 	bl	80019e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a94:	6822      	ldr	r2, [r4, #0]
 8001a96:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a98:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8001a9c:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
}
 8001aaa:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001aac:	68ca      	ldr	r2, [r1, #12]
 8001aae:	6849      	ldr	r1, [r1, #4]
 8001ab0:	6800      	ldr	r0, [r0, #0]
 8001ab2:	f7ff fd2d 	bl	8001510 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ab6:	2160      	movs	r1, #96	@ 0x60
 8001ab8:	6820      	ldr	r0, [r4, #0]
 8001aba:	f7ff fd3c 	bl	8001536 <TIM_ITRx_SetConfig>
      break;
 8001abe:	e7ee      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ac0:	68ca      	ldr	r2, [r1, #12]
 8001ac2:	6849      	ldr	r1, [r1, #4]
 8001ac4:	6800      	ldr	r0, [r0, #0]
 8001ac6:	f7ff fd11 	bl	80014ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001aca:	2140      	movs	r1, #64	@ 0x40
 8001acc:	6820      	ldr	r0, [r4, #0]
 8001ace:	f7ff fd32 	bl	8001536 <TIM_ITRx_SetConfig>
      break;
 8001ad2:	e7e4      	b.n	8001a9e <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8001ad4:	2002      	movs	r0, #2
}
 8001ad6:	4770      	bx	lr

08001ad8 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001ad8:	f001 011f 	and.w	r1, r1, #31
 8001adc:	f04f 0c01 	mov.w	ip, #1
 8001ae0:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ae4:	6a03      	ldr	r3, [r0, #32]
 8001ae6:	ea23 030c 	bic.w	r3, r3, ip
 8001aea:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001aec:	6a03      	ldr	r3, [r0, #32]
 8001aee:	408a      	lsls	r2, r1
 8001af0:	4313      	orrs	r3, r2
 8001af2:	6203      	str	r3, [r0, #32]
}
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIM_PWM_Start>:
{
 8001af6:	b510      	push	{r4, lr}
 8001af8:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001afa:	4608      	mov	r0, r1
 8001afc:	2900      	cmp	r1, #0
 8001afe:	d134      	bne.n	8001b6a <HAL_TIM_PWM_Start+0x74>
 8001b00:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3b01      	subs	r3, #1
 8001b08:	bf18      	it	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d165      	bne.n	8001bdc <HAL_TIM_PWM_Start+0xe6>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d143      	bne.n	8001b9c <HAL_TIM_PWM_Start+0xa6>
 8001b14:	2302      	movs	r3, #2
 8001b16:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	4601      	mov	r1, r0
 8001b1e:	6820      	ldr	r0, [r4, #0]
 8001b20:	f7ff ffda 	bl	8001ad8 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b24:	6822      	ldr	r2, [r4, #0]
 8001b26:	f44f 5330 	mov.w	r3, #11264	@ 0x2c00
 8001b2a:	f2c4 0301 	movt	r3, #16385	@ 0x4001
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d044      	beq.n	8001bbc <HAL_TIM_PWM_Start+0xc6>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001b38:	f2c4 0201 	movt	r2, #16385	@ 0x4001
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d042      	beq.n	8001bc6 <HAL_TIM_PWM_Start+0xd0>
 8001b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b44:	d03f      	beq.n	8001bc6 <HAL_TIM_PWM_Start+0xd0>
 8001b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b4a:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d039      	beq.n	8001bc6 <HAL_TIM_PWM_Start+0xd0>
 8001b52:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b56:	f2c4 0200 	movt	r2, #16384	@ 0x4000
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d033      	beq.n	8001bc6 <HAL_TIM_PWM_Start+0xd0>
    __HAL_TIM_ENABLE(htim);
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f042 0201 	orr.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001b66:	2000      	movs	r0, #0
 8001b68:	e039      	b.n	8001bde <HAL_TIM_PWM_Start+0xe8>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b6a:	2904      	cmp	r1, #4
 8001b6c:	d008      	beq.n	8001b80 <HAL_TIM_PWM_Start+0x8a>
 8001b6e:	2908      	cmp	r1, #8
 8001b70:	d00d      	beq.n	8001b8e <HAL_TIM_PWM_Start+0x98>
 8001b72:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	bf18      	it	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	e7c5      	b.n	8001b0c <HAL_TIM_PWM_Start+0x16>
 8001b80:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3b01      	subs	r3, #1
 8001b88:	bf18      	it	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	e7be      	b.n	8001b0c <HAL_TIM_PWM_Start+0x16>
 8001b8e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	3b01      	subs	r3, #1
 8001b96:	bf18      	it	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	e7b7      	b.n	8001b0c <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b9c:	2804      	cmp	r0, #4
 8001b9e:	d005      	beq.n	8001bac <HAL_TIM_PWM_Start+0xb6>
 8001ba0:	2808      	cmp	r0, #8
 8001ba2:	d007      	beq.n	8001bb4 <HAL_TIM_PWM_Start+0xbe>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8001baa:	e7b6      	b.n	8001b1a <HAL_TIM_PWM_Start+0x24>
 8001bac:	2302      	movs	r3, #2
 8001bae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001bb2:	e7b2      	b.n	8001b1a <HAL_TIM_PWM_Start+0x24>
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8001bba:	e7ae      	b.n	8001b1a <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8001bbc:	6c53      	ldr	r3, [r2, #68]	@ 0x44
 8001bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001bc2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc4:	e7b5      	b.n	8001b32 <HAL_TIM_PWM_Start+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bcc:	2a06      	cmp	r2, #6
 8001bce:	d007      	beq.n	8001be0 <HAL_TIM_PWM_Start+0xea>
      __HAL_TIM_ENABLE(htim);
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	f042 0201 	orr.w	r2, r2, #1
 8001bd6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e000      	b.n	8001bde <HAL_TIM_PWM_Start+0xe8>
    return HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
}
 8001bde:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8001be0:	2000      	movs	r0, #0
 8001be2:	e7fc      	b.n	8001bde <HAL_TIM_PWM_Start+0xe8>

08001be4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001be4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001be8:	2a01      	cmp	r2, #1
 8001bea:	d033      	beq.n	8001c54 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8001bec:	b410      	push	{r4}
 8001bee:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001c00:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001c02:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001c06:	6808      	ldr	r0, [r1, #0]
 8001c08:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001c0c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	f44f 5030 	mov.w	r0, #11264	@ 0x2c00
 8001c14:	f2c4 0001 	movt	r0, #16385	@ 0x4001
 8001c18:	4282      	cmp	r2, r0
 8001c1a:	d00e      	beq.n	8001c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001c1c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001c20:	d00b      	beq.n	8001c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001c22:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001c26:	f2c4 0000 	movt	r0, #16384	@ 0x4000
 8001c2a:	4282      	cmp	r2, r0
 8001c2c:	d005      	beq.n	8001c3a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8001c2e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001c32:	f2c4 0000 	movt	r0, #16384	@ 0x4000
 8001c36:	4282      	cmp	r2, r0
 8001c38:	d104      	bne.n	8001c44 <HAL_TIMEx_MasterConfigSynchronization+0x60>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001c3a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001c3e:	6849      	ldr	r1, [r1, #4]
 8001c40:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001c42:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8001c50:	bc10      	pop	{r4}
 8001c52:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001c54:	2002      	movs	r0, #2
}
 8001c56:	4770      	bx	lr

08001c58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001c58:	4602      	mov	r2, r0
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001c5a:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d021      	beq.n	8001ca6 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 8001c62:	2301      	movs	r3, #1
 8001c64:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8001c68:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c6e:	6888      	ldr	r0, [r1, #8]
 8001c70:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001c72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001c76:	6848      	ldr	r0, [r1, #4]
 8001c78:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001c7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001c7e:	6808      	ldr	r0, [r1, #0]
 8001c80:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001c82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001c86:	6908      	ldr	r0, [r1, #16]
 8001c88:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001c8a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001c8e:	6948      	ldr	r0, [r1, #20]
 8001c90:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001c92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001c96:	69c9      	ldr	r1, [r1, #28]
 8001c98:	430b      	orrs	r3, r1


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001c9a:	6811      	ldr	r1, [r2, #0]
 8001c9c:	644b      	str	r3, [r1, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
 8001ca4:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ca6:	2002      	movs	r0, #2
}
 8001ca8:	4770      	bx	lr

08001caa <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001caa:	4770      	bx	lr

08001cac <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001cac:	4770      	bx	lr

08001cae <memset>:
 8001cae:	4603      	mov	r3, r0
 8001cb0:	4402      	add	r2, r0
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d100      	bne.n	8001cb8 <memset+0xa>
 8001cb6:	4770      	bx	lr
 8001cb8:	f803 1b01 	strb.w	r1, [r3], #1
 8001cbc:	e7f9      	b.n	8001cb2 <memset+0x4>
	...

08001cc0 <__libc_init_array>:
 8001cc0:	b570      	push	{r4, r5, r6, lr}
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	4d0c      	ldr	r5, [pc, #48]	@ (8001cf8 <__libc_init_array+0x38>)
 8001cc6:	4c0d      	ldr	r4, [pc, #52]	@ (8001cfc <__libc_init_array+0x3c>)
 8001cc8:	1b64      	subs	r4, r4, r5
 8001cca:	10a4      	asrs	r4, r4, #2
 8001ccc:	42a6      	cmp	r6, r4
 8001cce:	d109      	bne.n	8001ce4 <__libc_init_array+0x24>
 8001cd0:	f000 f81a 	bl	8001d08 <_init>
 8001cd4:	2600      	movs	r6, #0
 8001cd6:	4d0a      	ldr	r5, [pc, #40]	@ (8001d00 <__libc_init_array+0x40>)
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <__libc_init_array+0x44>)
 8001cda:	1b64      	subs	r4, r4, r5
 8001cdc:	10a4      	asrs	r4, r4, #2
 8001cde:	42a6      	cmp	r6, r4
 8001ce0:	d105      	bne.n	8001cee <__libc_init_array+0x2e>
 8001ce2:	bd70      	pop	{r4, r5, r6, pc}
 8001ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ce8:	4798      	blx	r3
 8001cea:	3601      	adds	r6, #1
 8001cec:	e7ee      	b.n	8001ccc <__libc_init_array+0xc>
 8001cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001cf2:	4798      	blx	r3
 8001cf4:	3601      	adds	r6, #1
 8001cf6:	e7f2      	b.n	8001cde <__libc_init_array+0x1e>
 8001cf8:	08001d44 	.word	0x08001d44
 8001cfc:	08001d44 	.word	0x08001d44
 8001d00:	08001d44 	.word	0x08001d44
 8001d04:	08001d48 	.word	0x08001d48

08001d08 <_init>:
 8001d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d0a:	bf00      	nop
 8001d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d0e:	bc08      	pop	{r3}
 8001d10:	469e      	mov	lr, r3
 8001d12:	4770      	bx	lr

08001d14 <_fini>:
 8001d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d16:	bf00      	nop
 8001d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d1a:	bc08      	pop	{r3}
 8001d1c:	469e      	mov	lr, r3
 8001d1e:	4770      	bx	lr
