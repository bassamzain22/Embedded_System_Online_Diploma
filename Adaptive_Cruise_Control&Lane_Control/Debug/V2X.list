
V2X.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044e0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080045ec  080045ec  000055ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004618  08004618  00006034  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004618  08004618  00006034  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004618  08004618  00006034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800461c  0800461c  0000561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  20000000  08004620  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000034  08004654  00006034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08004654  0000624c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001014c  00000000  00000000  0000605d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a8  00000000  00000000  000161a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00018658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cc9  00000000  00000000  00019688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179a9  00000000  00000000  0001a351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001293a  00000000  00000000  00031cfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008994e  00000000  00000000  00044634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cdf82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c0  00000000  00000000  000cdfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d2488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	080045d4 	.word	0x080045d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	080045d4 	.word	0x080045d4

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	@ 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ba:	2afd      	cmp	r2, #253	@ 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	@ 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	@ 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	@ 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <ACC_Init>:
static uint32_t lane_change_start_time = 0;

/**
 * @brief Initialize the Adaptive Cruise Control system
 */
void ACC_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
    // Initialize control structure
    acc_control.state = ACC_DISABLED;
 800064c:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <ACC_Init+0x64>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
    acc_control.target_speed = ACC_DEFAULT_SPEED;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <ACC_Init+0x64>)
 8000654:	223c      	movs	r2, #60	@ 0x3c
 8000656:	605a      	str	r2, [r3, #4]
    acc_control.current_speed = 0;
 8000658:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <ACC_Init+0x64>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
    acc_control.following_distance = ACC_SAFE_DISTANCE;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <ACC_Init+0x64>)
 8000660:	2232      	movs	r2, #50	@ 0x32
 8000662:	60da      	str	r2, [r3, #12]
    acc_control.front_distance = 500;
 8000664:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <ACC_Init+0x64>)
 8000666:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800066a:	611a      	str	r2, [r3, #16]
    acc_control.left_distance = 500;
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <ACC_Init+0x64>)
 800066e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000672:	615a      	str	r2, [r3, #20]
    acc_control.right_distance = 500;
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <ACC_Init+0x64>)
 8000676:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800067a:	619a      	str	r2, [r3, #24]
    acc_control.last_update_time = HAL_GetTick();
 800067c:	f001 f974 	bl	8001968 <HAL_GetTick>
 8000680:	4603      	mov	r3, r0
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <ACC_Init+0x64>)
 8000684:	61d3      	str	r3, [r2, #28]
    acc_control.emergency_brake_flag = 0;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <ACC_Init+0x64>)
 8000688:	2200      	movs	r2, #0
 800068a:	f883 2020 	strb.w	r2, [r3, #32]
    acc_control.lane_change_request = 0;
 800068e:	4b07      	ldr	r3, [pc, #28]	@ (80006ac <ACC_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    acc_control.obstacle_detected = 0;
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <ACC_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

    // Initialize motor system
    Motors_Init();
 800069e:	f000 fa89 	bl	8000bb4 <Motors_Init>

    // Stop motors initially
    Stop_Motors();
 80006a2:	f000 fb65 	bl	8000d70 <Stop_Motors>
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000050 	.word	0x20000050

080006b0 <ACC_Enable>:

/**
 * @brief Enable ACC with specified target speed
 * @param target_speed: Desired cruise speed (20-90%)
 */
void ACC_Enable(uint32_t target_speed) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
    if (target_speed < ACC_MIN_SPEED) target_speed = ACC_MIN_SPEED;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b13      	cmp	r3, #19
 80006bc:	d801      	bhi.n	80006c2 <ACC_Enable+0x12>
 80006be:	2314      	movs	r3, #20
 80006c0:	607b      	str	r3, [r7, #4]
    if (target_speed > ACC_MAX_SPEED) target_speed = ACC_MAX_SPEED;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2b5a      	cmp	r3, #90	@ 0x5a
 80006c6:	d901      	bls.n	80006cc <ACC_Enable+0x1c>
 80006c8:	235a      	movs	r3, #90	@ 0x5a
 80006ca:	607b      	str	r3, [r7, #4]

    acc_control.target_speed = target_speed;
 80006cc:	4a0c      	ldr	r2, [pc, #48]	@ (8000700 <ACC_Enable+0x50>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6053      	str	r3, [r2, #4]
    acc_control.current_speed = ACC_MIN_SPEED;  // Start with minimum speed
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <ACC_Enable+0x50>)
 80006d4:	2214      	movs	r2, #20
 80006d6:	609a      	str	r2, [r3, #8]
    acc_control.state = ACC_ENABLED;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <ACC_Enable+0x50>)
 80006da:	2201      	movs	r2, #1
 80006dc:	701a      	strb	r2, [r3, #0]
    acc_control.emergency_brake_flag = 0;
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <ACC_Enable+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2020 	strb.w	r2, [r3, #32]

    // Start moving forward
    Move_Forward();
 80006e6:	f000 fa9f 	bl	8000c28 <Move_Forward>
    Set_Speed(acc_control.current_speed);
 80006ea:	4b05      	ldr	r3, [pc, #20]	@ (8000700 <ACC_Enable+0x50>)
 80006ec:	689b      	ldr	r3, [r3, #8]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fa6f 	bl	8000bd4 <Set_Speed>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000050 	.word	0x20000050

08000704 <ACC_SetFollowingDistance>:

/**
 * @brief Set following distance
 * @param distance: Desired following distance in cm
 */
void ACC_SetFollowingDistance(uint32_t distance) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    if (distance < ACC_MIN_DISTANCE) distance = ACC_MIN_DISTANCE;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b0e      	cmp	r3, #14
 8000710:	d801      	bhi.n	8000716 <ACC_SetFollowingDistance+0x12>
 8000712:	230f      	movs	r3, #15
 8000714:	607b      	str	r3, [r7, #4]
    acc_control.following_distance = distance;
 8000716:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <ACC_SetFollowingDistance+0x24>)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000050 	.word	0x20000050

0800072c <ACC_Update>:
}

/**
 * @brief Main ACC update function - call this regularly
 */
void ACC_Update(void) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000732:	f001 f919 	bl	8001968 <HAL_GetTick>
 8000736:	6078      	str	r0, [r7, #4]

    // Check if it's time to update sensors
    if (current_time - acc_control.last_update_time >= ACC_UPDATE_INTERVAL) {
 8000738:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <ACC_Update+0xa4>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	1ad3      	subs	r3, r2, r3
 8000740:	2b63      	cmp	r3, #99	@ 0x63
 8000742:	d929      	bls.n	8000798 <ACC_Update+0x6c>
        acc_control.last_update_time = current_time;
 8000744:	4a22      	ldr	r2, [pc, #136]	@ (80007d0 <ACC_Update+0xa4>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	61d3      	str	r3, [r2, #28]

        // Process sensor readings
        ACC_ProcessSensors();
 800074a:	f000 f843 	bl	80007d4 <ACC_ProcessSensors>

        // Handle different ACC states
        switch (acc_control.state) {
 800074e:	4b20      	ldr	r3, [pc, #128]	@ (80007d0 <ACC_Update+0xa4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b06      	cmp	r3, #6
 8000754:	d820      	bhi.n	8000798 <ACC_Update+0x6c>
 8000756:	a201      	add	r2, pc, #4	@ (adr r2, 800075c <ACC_Update+0x30>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	08000799 	.word	0x08000799
 8000760:	08000779 	.word	0x08000779
 8000764:	08000779 	.word	0x08000779
 8000768:	08000787 	.word	0x08000787
 800076c:	0800078d 	.word	0x0800078d
 8000770:	0800078d 	.word	0x0800078d
 8000774:	08000793 	.word	0x08000793
                // Do nothing
                break;

            case ACC_ENABLED:
            case ACC_FOLLOWING:
                ACC_SpeedControl();
 8000778:	f000 f872 	bl	8000860 <ACC_SpeedControl>
                ACC_ObstacleAvoidance();
 800077c:	f000 f8d2 	bl	8000924 <ACC_ObstacleAvoidance>
                ACC_LaneChangeControl();
 8000780:	f000 f930 	bl	80009e4 <ACC_LaneChangeControl>
                break;
 8000784:	e008      	b.n	8000798 <ACC_Update+0x6c>

            case ACC_EMERGENCY_BRAKE:
                ACC_EmergencyBrake();
 8000786:	f000 f8fb 	bl	8000980 <ACC_EmergencyBrake>
                break;
 800078a:	e005      	b.n	8000798 <ACC_Update+0x6c>

            case ACC_LANE_CHANGE_LEFT:
            case ACC_LANE_CHANGE_RIGHT:
                ACC_LaneChangeControl();
 800078c:	f000 f92a 	bl	80009e4 <ACC_LaneChangeControl>
                break;
 8000790:	e002      	b.n	8000798 <ACC_Update+0x6c>

            case ACC_OBSTACLE_AVOIDANCE:
                ACC_ObstacleAvoidance();
 8000792:	f000 f8c7 	bl	8000924 <ACC_ObstacleAvoidance>
                break;
 8000796:	bf00      	nop
        }
    }
    Turn_Left(ACC_RightDistance() , ACC_LeftDistance(), acc_control.current_speed);
 8000798:	f000 f9f8 	bl	8000b8c <ACC_RightDistance>
 800079c:	4604      	mov	r4, r0
 800079e:	f000 f9ff 	bl	8000ba0 <ACC_LeftDistance>
 80007a2:	4601      	mov	r1, r0
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <ACC_Update+0xa4>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4620      	mov	r0, r4
 80007ac:	f000 fab8 	bl	8000d20 <Turn_Left>
    Turn_Right(ACC_RightDistance() , ACC_LeftDistance(), acc_control.current_speed);
 80007b0:	f000 f9ec 	bl	8000b8c <ACC_RightDistance>
 80007b4:	4604      	mov	r4, r0
 80007b6:	f000 f9f3 	bl	8000ba0 <ACC_LeftDistance>
 80007ba:	4601      	mov	r1, r0
 80007bc:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <ACC_Update+0xa4>)
 80007be:	689b      	ldr	r3, [r3, #8]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4620      	mov	r0, r4
 80007c4:	f000 fa84 	bl	8000cd0 <Turn_Right>
}
 80007c8:	bf00      	nop
 80007ca:	370c      	adds	r7, #12
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd90      	pop	{r4, r7, pc}
 80007d0:	20000050 	.word	0x20000050

080007d4 <ACC_ProcessSensors>:

/**
 * @brief Process ultrasonic sensor readings
 */
void ACC_ProcessSensors(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
    // Read front sensor
    acc_control.front_distance = measureDistance(
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <ACC_ProcessSensors+0x78>)
 80007da:	6818      	ldr	r0, [r3, #0]
 80007dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000850 <ACC_ProcessSensors+0x7c>)
 80007de:	8819      	ldrh	r1, [r3, #0]
 80007e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000854 <ACC_ProcessSensors+0x80>)
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000858 <ACC_ProcessSensors+0x84>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	f000 fb02 	bl	8000df0 <measureDistance>
 80007ec:	4603      	mov	r3, r0
 80007ee:	461a      	mov	r2, r3
 80007f0:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <ACC_ProcessSensors+0x88>)
 80007f2:	611a      	str	r2, [r3, #16]
        triggerPorts[FRONT_SENSOR], triggerPins[FRONT_SENSOR],
        echoPorts[FRONT_SENSOR], echoPins[FRONT_SENSOR]
    );

    // Read left sensor
    acc_control.left_distance = measureDistance(
 80007f4:	4b15      	ldr	r3, [pc, #84]	@ (800084c <ACC_ProcessSensors+0x78>)
 80007f6:	6858      	ldr	r0, [r3, #4]
 80007f8:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <ACC_ProcessSensors+0x7c>)
 80007fa:	8859      	ldrh	r1, [r3, #2]
 80007fc:	4b15      	ldr	r3, [pc, #84]	@ (8000854 <ACC_ProcessSensors+0x80>)
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <ACC_ProcessSensors+0x84>)
 8000802:	885b      	ldrh	r3, [r3, #2]
 8000804:	f000 faf4 	bl	8000df0 <measureDistance>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b13      	ldr	r3, [pc, #76]	@ (800085c <ACC_ProcessSensors+0x88>)
 800080e:	615a      	str	r2, [r3, #20]
        triggerPorts[LEFT_SENSOR], triggerPins[LEFT_SENSOR],
        echoPorts[LEFT_SENSOR], echoPins[LEFT_SENSOR]
    );

    // Read right sensor
    acc_control.right_distance = measureDistance(
 8000810:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <ACC_ProcessSensors+0x78>)
 8000812:	6898      	ldr	r0, [r3, #8]
 8000814:	4b0e      	ldr	r3, [pc, #56]	@ (8000850 <ACC_ProcessSensors+0x7c>)
 8000816:	8899      	ldrh	r1, [r3, #4]
 8000818:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <ACC_ProcessSensors+0x80>)
 800081a:	689a      	ldr	r2, [r3, #8]
 800081c:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <ACC_ProcessSensors+0x84>)
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	f000 fae6 	bl	8000df0 <measureDistance>
 8000824:	4603      	mov	r3, r0
 8000826:	461a      	mov	r2, r3
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <ACC_ProcessSensors+0x88>)
 800082a:	619a      	str	r2, [r3, #24]
        triggerPorts[RIGHT_SENSOR], triggerPins[RIGHT_SENSOR],
        echoPorts[RIGHT_SENSOR], echoPins[RIGHT_SENSOR]
    );

    // Check for obstacles
    acc_control.obstacle_detected = (acc_control.front_distance < acc_control.following_distance);
 800082c:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <ACC_ProcessSensors+0x88>)
 800082e:	691a      	ldr	r2, [r3, #16]
 8000830:	4b0a      	ldr	r3, [pc, #40]	@ (800085c <ACC_ProcessSensors+0x88>)
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	bf34      	ite	cc
 8000838:	2301      	movcc	r3, #1
 800083a:	2300      	movcs	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	461a      	mov	r2, r3
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <ACC_ProcessSensors+0x88>)
 8000842:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000000 	.word	0x20000000
 8000850:	2000000c 	.word	0x2000000c
 8000854:	20000014 	.word	0x20000014
 8000858:	20000020 	.word	0x20000020
 800085c:	20000050 	.word	0x20000050

08000860 <ACC_SpeedControl>:

/**
 * @brief Main speed control logic
 */
void ACC_SpeedControl(void) {
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
    // Emergency braking check
    if (acc_control.front_distance <= ACC_EMERGENCY_DISTANCE) {
 8000866:	4b2e      	ldr	r3, [pc, #184]	@ (8000920 <ACC_SpeedControl+0xc0>)
 8000868:	691b      	ldr	r3, [r3, #16]
 800086a:	2b08      	cmp	r3, #8
 800086c:	d803      	bhi.n	8000876 <ACC_SpeedControl+0x16>
        acc_control.state = ACC_EMERGENCY_BRAKE;
 800086e:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <ACC_SpeedControl+0xc0>)
 8000870:	2203      	movs	r2, #3
 8000872:	701a      	strb	r2, [r3, #0]
        return;
 8000874:	e050      	b.n	8000918 <ACC_SpeedControl+0xb8>
    }

    // Determine target speed based on front distance
    uint32_t adaptive_speed = acc_control.target_speed;
 8000876:	4b2a      	ldr	r3, [pc, #168]	@ (8000920 <ACC_SpeedControl+0xc0>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	607b      	str	r3, [r7, #4]

    if (acc_control.front_distance < acc_control.following_distance) {
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <ACC_SpeedControl+0xc0>)
 800087e:	691a      	ldr	r2, [r3, #16]
 8000880:	4b27      	ldr	r3, [pc, #156]	@ (8000920 <ACC_SpeedControl+0xc0>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d230      	bcs.n	80008ea <ACC_SpeedControl+0x8a>
        // Vehicle ahead detected - enter following mode
        acc_control.state = ACC_FOLLOWING;
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <ACC_SpeedControl+0xc0>)
 800088a:	2202      	movs	r2, #2
 800088c:	701a      	strb	r2, [r3, #0]

        // Calculate adaptive speed based on distance
        if (acc_control.front_distance < ACC_MIN_DISTANCE) {
 800088e:	4b24      	ldr	r3, [pc, #144]	@ (8000920 <ACC_SpeedControl+0xc0>)
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	2b0e      	cmp	r3, #14
 8000894:	d802      	bhi.n	800089c <ACC_SpeedControl+0x3c>
            adaptive_speed = ACC_MIN_SPEED;
 8000896:	2314      	movs	r3, #20
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	e02c      	b.n	80008f6 <ACC_SpeedControl+0x96>
        } else {
            // Proportional speed reduction
            float speed_ratio = (float)(acc_control.front_distance - ACC_MIN_DISTANCE) /
 800089c:	4b20      	ldr	r3, [pc, #128]	@ (8000920 <ACC_SpeedControl+0xc0>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	3b0f      	subs	r3, #15
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fd08 	bl	80002b8 <__aeabi_ui2f>
 80008a8:	4604      	mov	r4, r0
                               (float)(acc_control.following_distance - ACC_MIN_DISTANCE);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <ACC_SpeedControl+0xc0>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	3b0f      	subs	r3, #15
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fd01 	bl	80002b8 <__aeabi_ui2f>
 80008b6:	4603      	mov	r3, r0
            float speed_ratio = (float)(acc_control.front_distance - ACC_MIN_DISTANCE) /
 80008b8:	4619      	mov	r1, r3
 80008ba:	4620      	mov	r0, r4
 80008bc:	f7ff fe08 	bl	80004d0 <__aeabi_fdiv>
 80008c0:	4603      	mov	r3, r0
 80008c2:	603b      	str	r3, [r7, #0]
            adaptive_speed = ACC_MIN_SPEED + (uint32_t)(speed_ratio * (acc_control.target_speed - ACC_MIN_SPEED));
 80008c4:	4b16      	ldr	r3, [pc, #88]	@ (8000920 <ACC_SpeedControl+0xc0>)
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	3b14      	subs	r3, #20
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fcf4 	bl	80002b8 <__aeabi_ui2f>
 80008d0:	4603      	mov	r3, r0
 80008d2:	6839      	ldr	r1, [r7, #0]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff fd47 	bl	8000368 <__aeabi_fmul>
 80008da:	4603      	mov	r3, r0
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fe93 	bl	8000608 <__aeabi_f2uiz>
 80008e2:	4603      	mov	r3, r0
 80008e4:	3314      	adds	r3, #20
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	e005      	b.n	80008f6 <ACC_SpeedControl+0x96>
        }
    } else {
        // Clear path - resume target speed
        acc_control.state = ACC_ENABLED;
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <ACC_SpeedControl+0xc0>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	701a      	strb	r2, [r3, #0]
        adaptive_speed = acc_control.target_speed;
 80008f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <ACC_SpeedControl+0xc0>)
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	607b      	str	r3, [r7, #4]
    }

    // Smooth speed adjustment
    if (adaptive_speed > acc_control.current_speed) {
 80008f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000920 <ACC_SpeedControl+0xc0>)
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d903      	bls.n	8000908 <ACC_SpeedControl+0xa8>
        ACC_SmoothAcceleration(adaptive_speed);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f000 f8c1 	bl	8000a88 <ACC_SmoothAcceleration>
 8000906:	e007      	b.n	8000918 <ACC_SpeedControl+0xb8>
    } else if (adaptive_speed < acc_control.current_speed) {
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <ACC_SpeedControl+0xc0>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	687a      	ldr	r2, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	d202      	bcs.n	8000918 <ACC_SpeedControl+0xb8>
        ACC_SmoothDeceleration(adaptive_speed);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f000 f8de 	bl	8000ad4 <ACC_SmoothDeceleration>
    }
}
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	bd90      	pop	{r4, r7, pc}
 800091e:	bf00      	nop
 8000920:	20000050 	.word	0x20000050

08000924 <ACC_ObstacleAvoidance>:

/**
 * @brief Handle obstacle avoidance
 */
void ACC_ObstacleAvoidance(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
    // Check if obstacle is too close and blocking
    if (acc_control.front_distance <= ACC_MIN_DISTANCE &&
 8000928:	4b14      	ldr	r3, [pc, #80]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 800092a:	691b      	ldr	r3, [r3, #16]
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d822      	bhi.n	8000976 <ACC_ObstacleAvoidance+0x52>
        acc_control.current_speed > 0) {
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 8000932:	689b      	ldr	r3, [r3, #8]
    if (acc_control.front_distance <= ACC_MIN_DISTANCE &&
 8000934:	2b00      	cmp	r3, #0
 8000936:	d01e      	beq.n	8000976 <ACC_ObstacleAvoidance+0x52>

        // Try lane change if possible
        if (ACC_IsSafeToChangeLane(1)) {  // Try left first
 8000938:	2001      	movs	r0, #1
 800093a:	f000 f8f1 	bl	8000b20 <ACC_IsSafeToChangeLane>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d007      	beq.n	8000954 <ACC_ObstacleAvoidance+0x30>
            acc_control.lane_change_request = 1;
 8000944:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 8000946:	2201      	movs	r2, #1
 8000948:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            acc_control.state = ACC_LANE_CHANGE_LEFT;
 800094c:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 800094e:	2204      	movs	r2, #4
 8000950:	701a      	strb	r2, [r3, #0]
        } else {
            // No safe lane change - emergency brake
            acc_control.state = ACC_EMERGENCY_BRAKE;
        }
    }
}
 8000952:	e010      	b.n	8000976 <ACC_ObstacleAvoidance+0x52>
        } else if (ACC_IsSafeToChangeLane(2)) {  // Then try right
 8000954:	2002      	movs	r0, #2
 8000956:	f000 f8e3 	bl	8000b20 <ACC_IsSafeToChangeLane>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d007      	beq.n	8000970 <ACC_ObstacleAvoidance+0x4c>
            acc_control.lane_change_request = 2;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 8000962:	2202      	movs	r2, #2
 8000964:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            acc_control.state = ACC_LANE_CHANGE_RIGHT;
 8000968:	4b04      	ldr	r3, [pc, #16]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 800096a:	2205      	movs	r2, #5
 800096c:	701a      	strb	r2, [r3, #0]
}
 800096e:	e002      	b.n	8000976 <ACC_ObstacleAvoidance+0x52>
            acc_control.state = ACC_EMERGENCY_BRAKE;
 8000970:	4b02      	ldr	r3, [pc, #8]	@ (800097c <ACC_ObstacleAvoidance+0x58>)
 8000972:	2203      	movs	r2, #3
 8000974:	701a      	strb	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000050 	.word	0x20000050

08000980 <ACC_EmergencyBrake>:

/**
 * @brief Emergency braking function
 */
void ACC_EmergencyBrake(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
    // Rapid deceleration
    if (acc_control.current_speed > 0) {
 8000984:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d017      	beq.n	80009bc <ACC_EmergencyBrake+0x3c>
        if (acc_control.current_speed >= ACC_EMERGENCY_DECEL) {
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b0e      	cmp	r3, #14
 8000992:	d905      	bls.n	80009a0 <ACC_EmergencyBrake+0x20>
            acc_control.current_speed -= ACC_EMERGENCY_DECEL;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 8000996:	689b      	ldr	r3, [r3, #8]
 8000998:	3b0f      	subs	r3, #15
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 800099c:	6093      	str	r3, [r2, #8]
 800099e:	e002      	b.n	80009a6 <ACC_EmergencyBrake+0x26>
        } else {
            acc_control.current_speed = 0;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
        }

        Set_Speed(acc_control.current_speed);
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f911 	bl	8000bd4 <Set_Speed>
        acc_control.emergency_brake_flag = 1;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	f883 2020 	strb.w	r2, [r3, #32]
 80009ba:	e001      	b.n	80009c0 <ACC_EmergencyBrake+0x40>
    } else {
        // Complete stop
        Stop_Motors();
 80009bc:	f000 f9d8 	bl	8000d70 <Stop_Motors>
    }

    // Check if we can resume
    if (acc_control.front_distance > ACC_SAFE_DISTANCE) {
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 80009c2:	691b      	ldr	r3, [r3, #16]
 80009c4:	2b32      	cmp	r3, #50	@ 0x32
 80009c6:	d908      	bls.n	80009da <ACC_EmergencyBrake+0x5a>
        acc_control.state = ACC_ENABLED;
 80009c8:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
        acc_control.emergency_brake_flag = 0;
 80009ce:	4b04      	ldr	r3, [pc, #16]	@ (80009e0 <ACC_EmergencyBrake+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]
        Move_Forward();
 80009d6:	f000 f927 	bl	8000c28 <Move_Forward>
    }
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000050 	.word	0x20000050

080009e4 <ACC_LaneChangeControl>:

/**
 * @brief Handle lane change maneuvers
 */
void ACC_LaneChangeControl(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80009ea:	f000 ffbd 	bl	8001968 <HAL_GetTick>
 80009ee:	6078      	str	r0, [r7, #4]

    // Initialize lane change
    if (acc_control.lane_change_request > 0 && lane_change_start_time == 0) {
 80009f0:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 80009f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d02a      	beq.n	8000a50 <ACC_LaneChangeControl+0x6c>
 80009fa:	4b22      	ldr	r3, [pc, #136]	@ (8000a84 <ACC_LaneChangeControl+0xa0>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d126      	bne.n	8000a50 <ACC_LaneChangeControl+0x6c>
        if (ACC_IsSafeToChangeLane(acc_control.lane_change_request)) {
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a04:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f000 f889 	bl	8000b20 <ACC_IsSafeToChangeLane>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d01b      	beq.n	8000a4c <ACC_LaneChangeControl+0x68>
            lane_change_start_time = current_time;
 8000a14:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <ACC_LaneChangeControl+0xa0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]

            // Execute turn based on direction
            if (acc_control.lane_change_request == 1) {
 8000a1a:	4b19      	ldr	r3, [pc, #100]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a1c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d109      	bne.n	8000a38 <ACC_LaneChangeControl+0x54>
                // Turn left
                Turn_Left(acc_control.right_distance, acc_control.left_distance, acc_control.current_speed);
 8000a24:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a2a:	6951      	ldr	r1, [r2, #20]
 8000a2c:	4a14      	ldr	r2, [pc, #80]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a2e:	6892      	ldr	r2, [r2, #8]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 f975 	bl	8000d20 <Turn_Left>
 8000a36:	e00b      	b.n	8000a50 <ACC_LaneChangeControl+0x6c>
            } else {
                // Turn right
                Turn_Right(acc_control.right_distance, acc_control.left_distance, acc_control.current_speed);
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a10      	ldr	r2, [pc, #64]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a3e:	6951      	ldr	r1, [r2, #20]
 8000a40:	4a0f      	ldr	r2, [pc, #60]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a42:	6892      	ldr	r2, [r2, #8]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 f943 	bl	8000cd0 <Turn_Right>
 8000a4a:	e001      	b.n	8000a50 <ACC_LaneChangeControl+0x6c>
            }
        } else {
            // Lane change not safe, abort
            ACC_ResetLaneChange();
 8000a4c:	f000 f88c 	bl	8000b68 <ACC_ResetLaneChange>
        }
    }

    // Check lane change timeout
    if (lane_change_start_time > 0 && (current_time - lane_change_start_time) > ACC_LANE_CHANGE_TIMEOUT) {
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <ACC_LaneChangeControl+0xa0>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00e      	beq.n	8000a76 <ACC_LaneChangeControl+0x92>
 8000a58:	4b0a      	ldr	r3, [pc, #40]	@ (8000a84 <ACC_LaneChangeControl+0xa0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	1ad3      	subs	r3, r2, r3
 8000a60:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d906      	bls.n	8000a76 <ACC_LaneChangeControl+0x92>
        // Lane change complete or timed out
        ACC_ResetLaneChange();
 8000a68:	f000 f87e 	bl	8000b68 <ACC_ResetLaneChange>
        acc_control.state = ACC_ENABLED;
 8000a6c:	4b04      	ldr	r3, [pc, #16]	@ (8000a80 <ACC_LaneChangeControl+0x9c>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]
        Move_Forward();  // Resume forward motion
 8000a72:	f000 f8d9 	bl	8000c28 <Move_Forward>
    }
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000050 	.word	0x20000050
 8000a84:	20000074 	.word	0x20000074

08000a88 <ACC_SmoothAcceleration>:

/**
 * @brief Smooth acceleration to target speed
 * @param target_speed: Target speed to reach
 */
void ACC_SmoothAcceleration(uint32_t target_speed) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
    if (acc_control.current_speed < target_speed) {
 8000a90:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad0 <ACC_SmoothAcceleration+0x48>)
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d915      	bls.n	8000ac6 <ACC_SmoothAcceleration+0x3e>
        uint32_t speed_diff = target_speed - acc_control.current_speed;
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <ACC_SmoothAcceleration+0x48>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	60fb      	str	r3, [r7, #12]
        uint32_t increment = (speed_diff > ACC_SPEED_INCREMENT) ? ACC_SPEED_INCREMENT : speed_diff;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b05      	cmp	r3, #5
 8000aa8:	bf28      	it	cs
 8000aaa:	2305      	movcs	r3, #5
 8000aac:	60bb      	str	r3, [r7, #8]

        acc_control.current_speed += increment;
 8000aae:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <ACC_SmoothAcceleration+0x48>)
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <ACC_SmoothAcceleration+0x48>)
 8000ab8:	6093      	str	r3, [r2, #8]
        Set_Speed(acc_control.current_speed);
 8000aba:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <ACC_SmoothAcceleration+0x48>)
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 f887 	bl	8000bd4 <Set_Speed>
    }
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000050 	.word	0x20000050

08000ad4 <ACC_SmoothDeceleration>:

/**
 * @brief Smooth deceleration to target speed
 * @param target_speed: Target speed to reach
 */
void ACC_SmoothDeceleration(uint32_t target_speed) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
    if (acc_control.current_speed > target_speed) {
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <ACC_SmoothDeceleration+0x48>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	d215      	bcs.n	8000b12 <ACC_SmoothDeceleration+0x3e>
        uint32_t speed_diff = acc_control.current_speed - target_speed;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8000b1c <ACC_SmoothDeceleration+0x48>)
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	60fb      	str	r3, [r7, #12]
        uint32_t decrement = (speed_diff > ACC_SPEED_DECREMENT) ? ACC_SPEED_DECREMENT : speed_diff;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	2b08      	cmp	r3, #8
 8000af4:	bf28      	it	cs
 8000af6:	2308      	movcs	r3, #8
 8000af8:	60bb      	str	r3, [r7, #8]

        acc_control.current_speed -= decrement;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <ACC_SmoothDeceleration+0x48>)
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	1ad3      	subs	r3, r2, r3
 8000b02:	4a06      	ldr	r2, [pc, #24]	@ (8000b1c <ACC_SmoothDeceleration+0x48>)
 8000b04:	6093      	str	r3, [r2, #8]
        Set_Speed(acc_control.current_speed);
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <ACC_SmoothDeceleration+0x48>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f861 	bl	8000bd4 <Set_Speed>
    }
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000050 	.word	0x20000050

08000b20 <ACC_IsSafeToChangeLane>:
/**
 * @brief Check if lane change is safe
 * @param direction: 1 for left, 2 for right
 * @return 1 if safe, 0 if not safe
 */
uint8_t ACC_IsSafeToChangeLane(uint8_t direction) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
    if (direction == 1) {
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d107      	bne.n	8000b40 <ACC_IsSafeToChangeLane+0x20>
        // Check left lane
        return (acc_control.left_distance >= ACC_LANE_CHANGE_DISTANCE);
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <ACC_IsSafeToChangeLane+0x44>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	2b18      	cmp	r3, #24
 8000b36:	bf8c      	ite	hi
 8000b38:	2301      	movhi	r3, #1
 8000b3a:	2300      	movls	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	e00b      	b.n	8000b58 <ACC_IsSafeToChangeLane+0x38>
    } else if (direction == 2) {
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d107      	bne.n	8000b56 <ACC_IsSafeToChangeLane+0x36>
        // Check right lane
        return (acc_control.right_distance >= ACC_LANE_CHANGE_DISTANCE);
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <ACC_IsSafeToChangeLane+0x44>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	2b18      	cmp	r3, #24
 8000b4c:	bf8c      	ite	hi
 8000b4e:	2301      	movhi	r3, #1
 8000b50:	2300      	movls	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	e000      	b.n	8000b58 <ACC_IsSafeToChangeLane+0x38>
    }
    return 0;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000050 	.word	0x20000050

08000b68 <ACC_ResetLaneChange>:

/**
 * @brief Reset lane change state
 */
void ACC_ResetLaneChange(void) {
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
    acc_control.lane_change_request = 0;
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <ACC_ResetLaneChange+0x1c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    lane_change_start_time = 0;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <ACC_ResetLaneChange+0x20>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000050 	.word	0x20000050
 8000b88:	20000074 	.word	0x20000074

08000b8c <ACC_RightDistance>:
}

uint32_t ACC_GetFrontDistance(void) {
    return acc_control.front_distance;
}
uint32_t ACC_RightDistance(void){
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
	return acc_control.right_distance;
 8000b90:	4b02      	ldr	r3, [pc, #8]	@ (8000b9c <ACC_RightDistance+0x10>)
 8000b92:	699b      	ldr	r3, [r3, #24]
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000050 	.word	0x20000050

08000ba0 <ACC_LeftDistance>:
uint32_t ACC_LeftDistance(void){
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
	return acc_control.left_distance;
 8000ba4:	4b02      	ldr	r3, [pc, #8]	@ (8000bb0 <ACC_LeftDistance+0x10>)
 8000ba6:	695b      	ldr	r3, [r3, #20]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000050 	.word	0x20000050

08000bb4 <Motors_Init>:
#define WHEEL_CIRCUMFERENCE_HALF 4 // 4cm (half of wheel circumference)
#define OBSTACLE_NEAR_THRESHOLD 30 // cm
#define OBSTACLE_FAR_THRESHOLD 45  // cm
#define BASE_TURN_DURATION_MS 800  // Time needed to turn 4cm at 100% speed
// Initialize motor control pins and PWM
void Motors_Init(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	// GPIO pins are initialized by CubeMX

	// Start PWM signals
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4805      	ldr	r0, [pc, #20]	@ (8000bd0 <Motors_Init+0x1c>)
 8000bbc:	f002 f8f2 	bl	8002da4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000bc0:	210c      	movs	r1, #12
 8000bc2:	4803      	ldr	r0, [pc, #12]	@ (8000bd0 <Motors_Init+0x1c>)
 8000bc4:	f002 f8ee 	bl	8002da4 <HAL_TIM_PWM_Start>

	// Initially stop motors
	Stop_Motors();
 8000bc8:	f000 f8d2 	bl	8000d70 <Stop_Motors>
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000128 	.word	0x20000128

08000bd4 <Set_Speed>:

// Set speed for all motors (duty cycle 0-100)
void Set_Speed(uint8_t duty_cycle) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
	// Ensure duty cycle is within bounds
	if (duty_cycle > 100) {
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b64      	cmp	r3, #100	@ 0x64
 8000be2:	d901      	bls.n	8000be8 <Set_Speed+0x14>
		duty_cycle = 100;
 8000be4:	2364      	movs	r3, #100	@ 0x64
 8000be6:	71fb      	strb	r3, [r7, #7]
	}

	// Calculate compare value based on timer period
	uint16_t timer_period = htim1.Instance->ARR;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <Set_Speed+0x4c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bee:	81fb      	strh	r3, [r7, #14]
	uint16_t pulse = (timer_period * duty_cycle) / 100;
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	fb02 f303 	mul.w	r3, r2, r3
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <Set_Speed+0x50>)
 8000bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8000bfe:	1152      	asrs	r2, r2, #5
 8000c00:	17db      	asrs	r3, r3, #31
 8000c02:	1ad3      	subs	r3, r2, r3
 8000c04:	81bb      	strh	r3, [r7, #12]

	// Set PWM duty cycle for both channels
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000c06:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <Set_Speed+0x4c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	89ba      	ldrh	r2, [r7, #12]
 8000c0c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, pulse);
 8000c0e:	4b04      	ldr	r3, [pc, #16]	@ (8000c20 <Set_Speed+0x4c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	89ba      	ldrh	r2, [r7, #12]
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000c16:	bf00      	nop
 8000c18:	3714      	adds	r7, #20
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20000128 	.word	0x20000128
 8000c24:	51eb851f 	.word	0x51eb851f

08000c28 <Move_Forward>:

// Move all motors forward
void Move_Forward(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2108      	movs	r1, #8
 8000c30:	480a      	ldr	r0, [pc, #40]	@ (8000c5c <Move_Forward+0x34>)
 8000c32:	f001 fa22 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2110      	movs	r1, #16
 8000c3a:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <Move_Forward+0x34>)
 8000c3c:	f001 fa1d 	bl	800207a <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2120      	movs	r1, #32
 8000c44:	4805      	ldr	r0, [pc, #20]	@ (8000c5c <Move_Forward+0x34>)
 8000c46:	f001 fa18 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c50:	4802      	ldr	r0, [pc, #8]	@ (8000c5c <Move_Forward+0x34>)
 8000c52:	f001 fa12 	bl	800207a <HAL_GPIO_WritePin>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40010c00 	.word	0x40010c00

08000c60 <Move_Right>:
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_SET);
}

// Move Right
void Move_Right(void){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_SET);
 8000c64:	2201      	movs	r2, #1
 8000c66:	2108      	movs	r1, #8
 8000c68:	480a      	ldr	r0, [pc, #40]	@ (8000c94 <Move_Right+0x34>)
 8000c6a:	f001 fa06 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2110      	movs	r1, #16
 8000c72:	4808      	ldr	r0, [pc, #32]	@ (8000c94 <Move_Right+0x34>)
 8000c74:	f001 fa01 	bl	800207a <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2120      	movs	r1, #32
 8000c7c:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <Move_Right+0x34>)
 8000c7e:	f001 f9fc 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c88:	4802      	ldr	r0, [pc, #8]	@ (8000c94 <Move_Right+0x34>)
 8000c8a:	f001 f9f6 	bl	800207a <HAL_GPIO_WritePin>
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40010c00 	.word	0x40010c00

08000c98 <Move_Left>:
// Move Left
void Move_Left(void){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0

	// Left motors forward (IN1 = HIGH, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2108      	movs	r1, #8
 8000ca0:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <Move_Left+0x34>)
 8000ca2:	f001 f9ea 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2110      	movs	r1, #16
 8000caa:	4808      	ldr	r0, [pc, #32]	@ (8000ccc <Move_Left+0x34>)
 8000cac:	f001 f9e5 	bl	800207a <HAL_GPIO_WritePin>

	// Right motors forward (IN3 = HIGH, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_SET);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <Move_Left+0x34>)
 8000cb6:	f001 f9e0 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000cc0:	4802      	ldr	r0, [pc, #8]	@ (8000ccc <Move_Left+0x34>)
 8000cc2:	f001 f9da 	bl	800207a <HAL_GPIO_WritePin>

}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40010c00 	.word	0x40010c00

08000cd0 <Turn_Right>:
// Turn Right function
// Turn Right function
void Turn_Right(uint32_t Right_distance, uint32_t Left_distance, uint32_t current_speed) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
	// Check if obstacle is near on left and path is clear on right
	if (Left_distance <= OBSTACLE_NEAR_THRESHOLD && Right_distance >= OBSTACLE_FAR_THRESHOLD) {
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	2b1e      	cmp	r3, #30
 8000ce0:	d818      	bhi.n	8000d14 <Turn_Right+0x44>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b2c      	cmp	r3, #44	@ 0x2c
 8000ce6:	d915      	bls.n	8000d14 <Turn_Right+0x44>
		// Calculate turn duration inversely proportional to speed (with minimum speed check)
		uint32_t effective_speed = (current_speed < 10) ? 10 : current_speed; // Prevent division by zero
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	bf38      	it	cc
 8000cee:	230a      	movcc	r3, #10
 8000cf0:	617b      	str	r3, [r7, #20]
		uint32_t turn_duration = (BASE_TURN_DURATION_MS * 100) / effective_speed;
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <Turn_Right+0x4c>)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	613b      	str	r3, [r7, #16]

		// Execute turn left (to go right around obstacle)
		Move_Left();
 8000cfc:	f7ff ffcc 	bl	8000c98 <Move_Left>
		HAL_Delay(turn_duration);
 8000d00:	6938      	ldr	r0, [r7, #16]
 8000d02:	f000 fe3b 	bl	800197c <HAL_Delay>

		// Stop motors briefly
		Stop_Motors();
 8000d06:	f000 f833 	bl	8000d70 <Stop_Motors>
		HAL_Delay(100);
 8000d0a:	2064      	movs	r0, #100	@ 0x64
 8000d0c:	f000 fe36 	bl	800197c <HAL_Delay>

		// Continue forward
		Move_Forward();
 8000d10:	f7ff ff8a 	bl	8000c28 <Move_Forward>
	}
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	00013880 	.word	0x00013880

08000d20 <Turn_Left>:

// Turn Left function
void Turn_Left(uint32_t Right_distance, uint32_t Left_distance, uint32_t current_speed) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
	// Check if obstacle is near on right and path is clear on left
	if (Right_distance <= OBSTACLE_NEAR_THRESHOLD && Left_distance >= OBSTACLE_FAR_THRESHOLD) {
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b1e      	cmp	r3, #30
 8000d30:	d818      	bhi.n	8000d64 <Turn_Left+0x44>
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	2b2c      	cmp	r3, #44	@ 0x2c
 8000d36:	d915      	bls.n	8000d64 <Turn_Left+0x44>
		// Calculate turn duration inversely proportional to speed (with minimum speed check)
		uint32_t effective_speed = (current_speed < 10) ? 10 : current_speed; // Prevent division by zero
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	bf38      	it	cc
 8000d3e:	230a      	movcc	r3, #10
 8000d40:	617b      	str	r3, [r7, #20]
		uint32_t turn_duration = (BASE_TURN_DURATION_MS * 100) / effective_speed;
 8000d42:	4a0a      	ldr	r2, [pc, #40]	@ (8000d6c <Turn_Left+0x4c>)
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	613b      	str	r3, [r7, #16]

		// Execute turn right (to go left around obstacle)
		Move_Right();
 8000d4c:	f7ff ff88 	bl	8000c60 <Move_Right>
		HAL_Delay(turn_duration);
 8000d50:	6938      	ldr	r0, [r7, #16]
 8000d52:	f000 fe13 	bl	800197c <HAL_Delay>

		// Stop motors briefly
		Stop_Motors();
 8000d56:	f000 f80b 	bl	8000d70 <Stop_Motors>
		HAL_Delay(100);
 8000d5a:	2064      	movs	r0, #100	@ 0x64
 8000d5c:	f000 fe0e 	bl	800197c <HAL_Delay>

		// Continue forward
		Move_Forward();
 8000d60:	f7ff ff62 	bl	8000c28 <Move_Forward>
	}
}
 8000d64:	bf00      	nop
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	00013880 	.word	0x00013880

08000d70 <Stop_Motors>:
	else if (distance < min_distance){
		*current_speed = 0;
	}
}
// Stop all motors
void Stop_Motors(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0

	// Left motors stop (IN1 = LOW, IN2 = LOW)
	HAL_GPIO_WritePin(IN1_PORT, IN1_PIN, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2108      	movs	r1, #8
 8000d78:	480a      	ldr	r0, [pc, #40]	@ (8000da4 <Stop_Motors+0x34>)
 8000d7a:	f001 f97e 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_PORT, IN2_PIN, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2110      	movs	r1, #16
 8000d82:	4808      	ldr	r0, [pc, #32]	@ (8000da4 <Stop_Motors+0x34>)
 8000d84:	f001 f979 	bl	800207a <HAL_GPIO_WritePin>

	// Right motors stop (IN3 = LOW, IN4 = LOW)
	HAL_GPIO_WritePin(IN3_PORT, IN3_PIN, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2120      	movs	r1, #32
 8000d8c:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <Stop_Motors+0x34>)
 8000d8e:	f001 f974 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_PORT, IN4_PIN, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d98:	4802      	ldr	r0, [pc, #8]	@ (8000da4 <Stop_Motors+0x34>)
 8000d9a:	f001 f96e 	bl	800207a <HAL_GPIO_WritePin>
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40010c00 	.word	0x40010c00

08000da8 <SysTickEnable>:
GPIO_TypeDef *echoPorts[3] = {Echo0_GPIO_Port, Echo1_GPIO_Port, Echo2_GPIO_Port};
uint16_t echoPins[3] = {Echo0_Pin, Echo1_Pin, Echo2_Pin};


void SysTickEnable()
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
	__disable_irq();
	SysTick->CTRL |= (SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8000db0:	4b05      	ldr	r3, [pc, #20]	@ (8000dc8 <SysTickEnable+0x20>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <SysTickEnable+0x20>)
 8000db6:	f043 0305 	orr.w	r3, r3, #5
 8000dba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000dbc:	b662      	cpsie	i
}
 8000dbe:	bf00      	nop
	__enable_irq();
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc80      	pop	{r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e010 	.word	0xe000e010

08000dcc <SysTickDisable>:

void SysTickDisable()
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd0:	b672      	cpsid	i
}
 8000dd2:	bf00      	nop
	__disable_irq();
	SysTick->CTRL &= ~(SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <SysTickDisable+0x20>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a04      	ldr	r2, [pc, #16]	@ (8000dec <SysTickDisable+0x20>)
 8000dda:	f023 0305 	bic.w	r3, r3, #5
 8000dde:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000de0:	b662      	cpsie	i
}
 8000de2:	bf00      	nop
	__enable_irq();
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr
 8000dec:	e000e010 	.word	0xe000e010

08000df0 <measureDistance>:

uint16_t measureDistance(GPIO_TypeDef *triggerPort, uint16_t triggerPin,
                        GPIO_TypeDef *echoPort, uint16_t echoPin)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	607a      	str	r2, [r7, #4]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	817b      	strh	r3, [r7, #10]
 8000e00:	4613      	mov	r3, r2
 8000e02:	813b      	strh	r3, [r7, #8]
    uint32_t timeout = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
    uint16_t local_distance = MAX_DISTANCE;
 8000e08:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e0c:	827b      	strh	r3, [r7, #18]

    // Wait if sensor is busy (being used by another interrupt)
    while(sensor_busy && timeout++ < SENSOR_TIMEOUT);
 8000e0e:	bf00      	nop
 8000e10:	4b39      	ldr	r3, [pc, #228]	@ (8000ef8 <measureDistance+0x108>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <measureDistance+0x38>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	1c5a      	adds	r2, r3, #1
 8000e1e:	617a      	str	r2, [r7, #20]
 8000e20:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d9f3      	bls.n	8000e10 <measureDistance+0x20>

    if(timeout >= SENSOR_TIMEOUT) {
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d901      	bls.n	8000e36 <measureDistance+0x46>
        return local_distance;
 8000e32:	8a7b      	ldrh	r3, [r7, #18]
 8000e34:	e05b      	b.n	8000eee <measureDistance+0xfe>
    }

    sensor_busy = 1;
 8000e36:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <measureDistance+0x108>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]

    if(!HAL_GPIO_ReadPin(echoPort, echoPin)) // Skip if ECHO pin is busy
 8000e3c:	893b      	ldrh	r3, [r7, #8]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f001 f903 	bl	800204c <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d14c      	bne.n	8000ee6 <measureDistance+0xf6>
    {
        SysTickDisable();
 8000e4c:	f7ff ffbe 	bl	8000dcc <SysTickDisable>
        HAL_TIM_Base_Start_IT(&htim2);
 8000e50:	482a      	ldr	r0, [pc, #168]	@ (8000efc <measureDistance+0x10c>)
 8000e52:	f001 fecf 	bl	8002bf4 <HAL_TIM_Base_Start_IT>

        HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_SET);
 8000e56:	897b      	ldrh	r3, [r7, #10]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	68f8      	ldr	r0, [r7, #12]
 8000e5e:	f001 f90c 	bl	800207a <HAL_GPIO_WritePin>
        triggerTime = 0;
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <measureDistance+0x110>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	801a      	strh	r2, [r3, #0]
        while(triggerTime < TriggerDuration);
 8000e68:	bf00      	nop
 8000e6a:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <measureDistance+0x110>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d9fb      	bls.n	8000e6a <measureDistance+0x7a>
        HAL_GPIO_WritePin(triggerPort, triggerPin, GPIO_PIN_RESET);
 8000e72:	897b      	ldrh	r3, [r7, #10]
 8000e74:	2200      	movs	r2, #0
 8000e76:	4619      	mov	r1, r3
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f001 f8fe 	bl	800207a <HAL_GPIO_WritePin>

        // Wait for echo start with timeout
        timeout = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
        while(!HAL_GPIO_ReadPin(echoPort, echoPin) && timeout++ < SENSOR_TIMEOUT);
 8000e82:	bf00      	nop
 8000e84:	893b      	ldrh	r3, [r7, #8]
 8000e86:	4619      	mov	r1, r3
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f001 f8df 	bl	800204c <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d106      	bne.n	8000ea2 <measureDistance+0xb2>
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	617a      	str	r2, [r7, #20]
 8000e9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d9f0      	bls.n	8000e84 <measureDistance+0x94>

        if(timeout < SENSOR_TIMEOUT) {
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d817      	bhi.n	8000edc <measureDistance+0xec>
            distance = 0;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <measureDistance+0x114>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	801a      	strh	r2, [r3, #0]
            // Measure echo duration with timeout
            timeout = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
            while(HAL_GPIO_ReadPin(echoPort, echoPin) && timeout++ < SENSOR_TIMEOUT);
 8000eb6:	bf00      	nop
 8000eb8:	893b      	ldrh	r3, [r7, #8]
 8000eba:	4619      	mov	r1, r3
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f001 f8c5 	bl	800204c <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d006      	beq.n	8000ed6 <measureDistance+0xe6>
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	1c5a      	adds	r2, r3, #1
 8000ecc:	617a      	str	r2, [r7, #20]
 8000ece:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d9f0      	bls.n	8000eb8 <measureDistance+0xc8>
            local_distance = distance;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <measureDistance+0x114>)
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	827b      	strh	r3, [r7, #18]
        }

        HAL_TIM_Base_Stop_IT(&htim2);
 8000edc:	4807      	ldr	r0, [pc, #28]	@ (8000efc <measureDistance+0x10c>)
 8000ede:	f001 fedb 	bl	8002c98 <HAL_TIM_Base_Stop_IT>
        SysTickEnable();
 8000ee2:	f7ff ff61 	bl	8000da8 <SysTickEnable>
    }

    sensor_busy = 0;
 8000ee6:	4b04      	ldr	r3, [pc, #16]	@ (8000ef8 <measureDistance+0x108>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
    return local_distance;
 8000eec:	8a7b      	ldrh	r3, [r7, #18]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000078 	.word	0x20000078
 8000efc:	20000170 	.word	0x20000170
 8000f00:	2000007c 	.word	0x2000007c
 8000f04:	2000007a 	.word	0x2000007a

08000f08 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f0c:	f000 fcd4 	bl	80018b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f10:	f000 f82e 	bl	8000f70 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f14:	f000 fa1a 	bl	800134c <MX_GPIO_Init>
	MX_TIM2_Init();
 8000f18:	f000 f978 	bl	800120c <MX_TIM2_Init>
	MX_I2C1_Init();
 8000f1c:	f000 f86e 	bl	8000ffc <MX_I2C1_Init>
	MX_I2C2_Init();
 8000f20:	f000 f89a 	bl	8001058 <MX_I2C2_Init>
	MX_USART1_UART_Init();
 8000f24:	f000 f9be 	bl	80012a4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000f28:	f000 f9e6 	bl	80012f8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8000f2c:	f000 f8c2 	bl	80010b4 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */
	// Initialize the ACC system
	      ACC_Init();
 8000f30:	f7ff fb8a 	bl	8000648 <ACC_Init>

	      // Enable ACC with 70% target speed
	      ACC_Enable(70);
 8000f34:	2046      	movs	r0, #70	@ 0x46
 8000f36:	f7ff fbbb 	bl	80006b0 <ACC_Enable>

	      // Set following distance to 60cm
	      ACC_SetFollowingDistance(60);
 8000f3a:	203c      	movs	r0, #60	@ 0x3c
 8000f3c:	f7ff fbe2 	bl	8000704 <ACC_SetFollowingDistance>
	//		uint16_t distancesInCm[3];
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f46:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <main+0x64>)
 8000f48:	f001 f897 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <main+0x64>)
 8000f54:	f001 f891 	bl	800207a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <main+0x64>)
 8000f60:	f001 f88b 	bl	800207a <HAL_GPIO_WritePin>

	while (1)
	{
		/* USER CODE END WHILE */
		  ACC_Update();
 8000f64:	f7ff fbe2 	bl	800072c <ACC_Update>
 8000f68:	e7fc      	b.n	8000f64 <main+0x5c>
 8000f6a:	bf00      	nop
 8000f6c:	40011000 	.word	0x40011000

08000f70 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b090      	sub	sp, #64	@ 0x40
 8000f74:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f76:	f107 0318 	add.w	r3, r7, #24
 8000f7a:	2228      	movs	r2, #40	@ 0x28
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f003 fafc 	bl	800457c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f92:	2301      	movs	r3, #1
 8000f94:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f9a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fac:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 f9bb 	bl	8002334 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000fc4:	f000 fa3e 	bl	8001444 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fd8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fc28 	bl	8002838 <HAL_RCC_ClockConfig>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <SystemClock_Config+0x82>
	{
		Error_Handler();
 8000fee:	f000 fa29 	bl	8001444 <Error_Handler>
	}
}
 8000ff2:	bf00      	nop
 8000ff4:	3740      	adds	r7, #64	@ 0x40
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <MX_I2C1_Init+0x50>)
 8001002:	4a13      	ldr	r2, [pc, #76]	@ (8001050 <MX_I2C1_Init+0x54>)
 8001004:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001006:	4b11      	ldr	r3, [pc, #68]	@ (800104c <MX_I2C1_Init+0x50>)
 8001008:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <MX_I2C1_Init+0x58>)
 800100a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <MX_I2C1_Init+0x50>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001012:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <MX_I2C1_Init+0x50>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001018:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <MX_I2C1_Init+0x50>)
 800101a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001020:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <MX_I2C1_Init+0x50>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <MX_I2C1_Init+0x50>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102c:	4b07      	ldr	r3, [pc, #28]	@ (800104c <MX_I2C1_Init+0x50>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <MX_I2C1_Init+0x50>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001038:	4804      	ldr	r0, [pc, #16]	@ (800104c <MX_I2C1_Init+0x50>)
 800103a:	f001 f837 	bl	80020ac <HAL_I2C_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001044:	f000 f9fe 	bl	8001444 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000080 	.word	0x20000080
 8001050:	40005400 	.word	0x40005400
 8001054:	000186a0 	.word	0x000186a0

08001058 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800105c:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800105e:	4a13      	ldr	r2, [pc, #76]	@ (80010ac <MX_I2C2_Init+0x54>)
 8001060:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001062:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001064:	4a12      	ldr	r2, [pc, #72]	@ (80010b0 <MX_I2C2_Init+0x58>)
 8001066:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001068:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001070:	2200      	movs	r2, #0
 8001072:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001076:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800107a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800107e:	2200      	movs	r2, #0
 8001080:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <MX_I2C2_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <MX_I2C2_Init+0x50>)
 8001096:	f001 f809 	bl	80020ac <HAL_I2C_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80010a0:	f000 f9d0 	bl	8001444 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000d4 	.word	0x200000d4
 80010ac:	40005800 	.word	0x40005800
 80010b0:	000186a0 	.word	0x000186a0

080010b4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b096      	sub	sp, #88	@ 0x58
 80010b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ba:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80010d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]
 80010e2:	615a      	str	r2, [r3, #20]
 80010e4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2220      	movs	r2, #32
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 fa45 	bl	800457c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80010f2:	4b44      	ldr	r3, [pc, #272]	@ (8001204 <MX_TIM1_Init+0x150>)
 80010f4:	4a44      	ldr	r2, [pc, #272]	@ (8001208 <MX_TIM1_Init+0x154>)
 80010f6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 80010f8:	4b42      	ldr	r3, [pc, #264]	@ (8001204 <MX_TIM1_Init+0x150>)
 80010fa:	2247      	movs	r2, #71	@ 0x47
 80010fc:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b41      	ldr	r3, [pc, #260]	@ (8001204 <MX_TIM1_Init+0x150>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8001104:	4b3f      	ldr	r3, [pc, #252]	@ (8001204 <MX_TIM1_Init+0x150>)
 8001106:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800110a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <MX_TIM1_Init+0x150>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001112:	4b3c      	ldr	r3, [pc, #240]	@ (8001204 <MX_TIM1_Init+0x150>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b3a      	ldr	r3, [pc, #232]	@ (8001204 <MX_TIM1_Init+0x150>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800111e:	4839      	ldr	r0, [pc, #228]	@ (8001204 <MX_TIM1_Init+0x150>)
 8001120:	f001 fd18 	bl	8002b54 <HAL_TIM_Base_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 800112a:	f000 f98b 	bl	8001444 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001134:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001138:	4619      	mov	r1, r3
 800113a:	4832      	ldr	r0, [pc, #200]	@ (8001204 <MX_TIM1_Init+0x150>)
 800113c:	f002 f886 	bl	800324c <HAL_TIM_ConfigClockSource>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8001146:	f000 f97d 	bl	8001444 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800114a:	482e      	ldr	r0, [pc, #184]	@ (8001204 <MX_TIM1_Init+0x150>)
 800114c:	f001 fdd2 	bl	8002cf4 <HAL_TIM_PWM_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8001156:	f000 f975 	bl	8001444 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001162:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001166:	4619      	mov	r1, r3
 8001168:	4826      	ldr	r0, [pc, #152]	@ (8001204 <MX_TIM1_Init+0x150>)
 800116a:	f002 fc13 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001174:	f000 f966 	bl	8001444 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001178:	2360      	movs	r3, #96	@ 0x60
 800117a:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800118c:	2300      	movs	r3, #0
 800118e:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001194:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001198:	2200      	movs	r2, #0
 800119a:	4619      	mov	r1, r3
 800119c:	4819      	ldr	r0, [pc, #100]	@ (8001204 <MX_TIM1_Init+0x150>)
 800119e:	f001 ff93 	bl	80030c8 <HAL_TIM_PWM_ConfigChannel>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_TIM1_Init+0xf8>
	{
		Error_Handler();
 80011a8:	f000 f94c 	bl	8001444 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80011ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b0:	220c      	movs	r2, #12
 80011b2:	4619      	mov	r1, r3
 80011b4:	4813      	ldr	r0, [pc, #76]	@ (8001204 <MX_TIM1_Init+0x150>)
 80011b6:	f001 ff87 	bl	80030c8 <HAL_TIM_PWM_ConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <MX_TIM1_Init+0x110>
	{
		Error_Handler();
 80011c0:	f000 f940 	bl	8001444 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011dc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	@ (8001204 <MX_TIM1_Init+0x150>)
 80011e8:	f002 fc32 	bl	8003a50 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x142>
	{
		Error_Handler();
 80011f2:	f000 f927 	bl	8001444 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80011f6:	4803      	ldr	r0, [pc, #12]	@ (8001204 <MX_TIM1_Init+0x150>)
 80011f8:	f000 fa00 	bl	80015fc <HAL_TIM_MspPostInit>

}
 80011fc:	bf00      	nop
 80011fe:	3758      	adds	r7, #88	@ 0x58
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000128 	.word	0x20000128
 8001208:	40012c00 	.word	0x40012c00

0800120c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	605a      	str	r2, [r3, #4]
 800121c:	609a      	str	r2, [r3, #8]
 800121e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001220:	463b      	mov	r3, r7
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001228:	4b1d      	ldr	r3, [pc, #116]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800122a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800122e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72;
 8001230:	4b1b      	ldr	r3, [pc, #108]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001232:	2248      	movs	r2, #72	@ 0x48
 8001234:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b1a      	ldr	r3, [pc, #104]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 57;
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800123e:	2239      	movs	r2, #57	@ 0x39
 8001240:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	4814      	ldr	r0, [pc, #80]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001250:	f001 fc80 	bl	8002b54 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x52>
	{
		Error_Handler();
 800125a:	f000 f8f3 	bl	8001444 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0308 	add.w	r3, r7, #8
 8001268:	4619      	mov	r1, r3
 800126a:	480d      	ldr	r0, [pc, #52]	@ (80012a0 <MX_TIM2_Init+0x94>)
 800126c:	f001 ffee 	bl	800324c <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x6e>
	{
		Error_Handler();
 8001276:	f000 f8e5 	bl	8001444 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <MX_TIM2_Init+0x94>)
 8001288:	f002 fb84 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x8a>
	{
		Error_Handler();
 8001292:	f000 f8d7 	bl	8001444 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000170 	.word	0x20000170

080012a4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	@ (80012f4 <MX_USART1_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80012b4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012dc:	f002 fc1b 	bl	8003b16 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 80012e6:	f000 f8ad 	bl	8001444 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001b8 	.word	0x200001b8
 80012f4:	40013800 	.word	0x40013800

080012f8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	@ (8001348 <MX_USART2_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001302:	4b10      	ldr	r3, [pc, #64]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001304:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001308:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_USART2_UART_Init+0x4c>)
 8001330:	f002 fbf1 	bl	8003b16 <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800133a:	f000 f883 	bl	8001444 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000200 	.word	0x20000200
 8001348:	40004400 	.word	0x40004400

0800134c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0310 	add.w	r3, r7, #16
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b34      	ldr	r3, [pc, #208]	@ (8001434 <MX_GPIO_Init+0xe8>)
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4a33      	ldr	r2, [pc, #204]	@ (8001434 <MX_GPIO_Init+0xe8>)
 8001366:	f043 0310 	orr.w	r3, r3, #16
 800136a:	6193      	str	r3, [r2, #24]
 800136c:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <MX_GPIO_Init+0xe8>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	f003 0310 	and.w	r3, r3, #16
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001378:	4b2e      	ldr	r3, [pc, #184]	@ (8001434 <MX_GPIO_Init+0xe8>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a2d      	ldr	r2, [pc, #180]	@ (8001434 <MX_GPIO_Init+0xe8>)
 800137e:	f043 0320 	orr.w	r3, r3, #32
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b2b      	ldr	r3, [pc, #172]	@ (8001434 <MX_GPIO_Init+0xe8>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	4b28      	ldr	r3, [pc, #160]	@ (8001434 <MX_GPIO_Init+0xe8>)
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	4a27      	ldr	r2, [pc, #156]	@ (8001434 <MX_GPIO_Init+0xe8>)
 8001396:	f043 0304 	orr.w	r3, r3, #4
 800139a:	6193      	str	r3, [r2, #24]
 800139c:	4b25      	ldr	r3, [pc, #148]	@ (8001434 <MX_GPIO_Init+0xe8>)
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a8:	4b22      	ldr	r3, [pc, #136]	@ (8001434 <MX_GPIO_Init+0xe8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <MX_GPIO_Init+0xe8>)
 80013ae:	f043 0308 	orr.w	r3, r3, #8
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001434 <MX_GPIO_Init+0xe8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	603b      	str	r3, [r7, #0]
 80013be:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80013c6:	481c      	ldr	r0, [pc, #112]	@ (8001438 <MX_GPIO_Init+0xec>)
 80013c8:	f000 fe57 	bl	800207a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Trigger0_Pin|Trigger1_Pin|Trigger2_Pin|GPIO_PIN_3
 80013cc:	2200      	movs	r2, #0
 80013ce:	f247 1138 	movw	r1, #28984	@ 0x7138
 80013d2:	481a      	ldr	r0, [pc, #104]	@ (800143c <MX_GPIO_Init+0xf0>)
 80013d4:	f000 fe51 	bl	800207a <HAL_GPIO_WritePin>
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC14 PC15 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80013d8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80013dc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0310 	add.w	r3, r7, #16
 80013ee:	4619      	mov	r1, r3
 80013f0:	4811      	ldr	r0, [pc, #68]	@ (8001438 <MX_GPIO_Init+0xec>)
 80013f2:	f000 fca7 	bl	8001d44 <HAL_GPIO_Init>

	/*Configure GPIO pins : Echo0_Pin Echo1_Pin Echo2_Pin */
	GPIO_InitStruct.Pin = Echo0_Pin|Echo1_Pin|Echo2_Pin;
 80013f6:	2370      	movs	r3, #112	@ 0x70
 80013f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	480d      	ldr	r0, [pc, #52]	@ (8001440 <MX_GPIO_Init+0xf4>)
 800140a:	f000 fc9b 	bl	8001d44 <HAL_GPIO_Init>

	/*Configure GPIO pins : Trigger0_Pin Trigger1_Pin Trigger2_Pin PB3
                           PB4 PB5 PB8 */
	GPIO_InitStruct.Pin = Trigger0_Pin|Trigger1_Pin|Trigger2_Pin|GPIO_PIN_3
 800140e:	f247 1338 	movw	r3, #28984	@ 0x7138
 8001412:	613b      	str	r3, [r7, #16]
			|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2302      	movs	r3, #2
 800141e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	4619      	mov	r1, r3
 8001426:	4805      	ldr	r0, [pc, #20]	@ (800143c <MX_GPIO_Init+0xf0>)
 8001428:	f000 fc8c 	bl	8001d44 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800142c:	bf00      	nop
 800142e:	3720      	adds	r7, #32
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40011000 	.word	0x40011000
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40010800 	.word	0x40010800

08001444 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <HAL_MspInit+0x5c>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4a14      	ldr	r2, [pc, #80]	@ (80014ac <HAL_MspInit+0x5c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <HAL_MspInit+0x5c>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b0f      	ldr	r3, [pc, #60]	@ (80014ac <HAL_MspInit+0x5c>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a0e      	ldr	r2, [pc, #56]	@ (80014ac <HAL_MspInit+0x5c>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <HAL_MspInit+0x5c>)
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_MspInit+0x60>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <HAL_MspInit+0x60>)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr
 80014ac:	40021000 	.word	0x40021000
 80014b0:	40010000 	.word	0x40010000

080014b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0318 	add.w	r3, r7, #24
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a2b      	ldr	r2, [pc, #172]	@ (800157c <HAL_I2C_MspInit+0xc8>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d124      	bne.n	800151e <HAL_I2C_MspInit+0x6a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a29      	ldr	r2, [pc, #164]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 80014da:	f043 0308 	orr.w	r3, r3, #8
 80014de:	6193      	str	r3, [r2, #24]
 80014e0:	4b27      	ldr	r3, [pc, #156]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	617b      	str	r3, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014ec:	23c0      	movs	r3, #192	@ 0xc0
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f8:	f107 0318 	add.w	r3, r7, #24
 80014fc:	4619      	mov	r1, r3
 80014fe:	4821      	ldr	r0, [pc, #132]	@ (8001584 <HAL_I2C_MspInit+0xd0>)
 8001500:	f000 fc20 	bl	8001d44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001504:	4b1e      	ldr	r3, [pc, #120]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 800150a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800150e:	61d3      	str	r3, [r2, #28]
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800151c:	e029      	b.n	8001572 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <HAL_I2C_MspInit+0xd4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d124      	bne.n	8001572 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001528:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6193      	str	r3, [r2, #24]
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001540:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001546:	2312      	movs	r3, #18
 8001548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800154a:	2303      	movs	r3, #3
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	f107 0318 	add.w	r3, r7, #24
 8001552:	4619      	mov	r1, r3
 8001554:	480b      	ldr	r0, [pc, #44]	@ (8001584 <HAL_I2C_MspInit+0xd0>)
 8001556:	f000 fbf5 	bl	8001d44 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 8001560:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001564:	61d3      	str	r3, [r2, #28]
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_I2C_MspInit+0xcc>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400
 8001580:	40021000 	.word	0x40021000
 8001584:	40010c00 	.word	0x40010c00
 8001588:	40005800 	.word	0x40005800

0800158c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a16      	ldr	r2, [pc, #88]	@ (80015f4 <HAL_TIM_Base_MspInit+0x68>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d10c      	bne.n	80015b8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <HAL_TIM_Base_MspInit+0x6c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a15      	ldr	r2, [pc, #84]	@ (80015f8 <HAL_TIM_Base_MspInit+0x6c>)
 80015a4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015a8:	6193      	str	r3, [r2, #24]
 80015aa:	4b13      	ldr	r3, [pc, #76]	@ (80015f8 <HAL_TIM_Base_MspInit+0x6c>)
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015b6:	e018      	b.n	80015ea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c0:	d113      	bne.n	80015ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	4b0d      	ldr	r3, [pc, #52]	@ (80015f8 <HAL_TIM_Base_MspInit+0x6c>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	4a0c      	ldr	r2, [pc, #48]	@ (80015f8 <HAL_TIM_Base_MspInit+0x6c>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	61d3      	str	r3, [r2, #28]
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_TIM_Base_MspInit+0x6c>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201c      	movs	r0, #28
 80015e0:	f000 fac7 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015e4:	201c      	movs	r0, #28
 80015e6:	f000 fae0 	bl	8001baa <HAL_NVIC_EnableIRQ>
}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	40021000 	.word	0x40021000

080015fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b088      	sub	sp, #32
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <HAL_TIM_MspPostInit+0x5c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d118      	bne.n	800164e <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <HAL_TIM_MspPostInit+0x60>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a0e      	ldr	r2, [pc, #56]	@ (800165c <HAL_TIM_MspPostInit+0x60>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6193      	str	r3, [r2, #24]
 8001628:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_TIM_MspPostInit+0x60>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8001634:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 8001638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2302      	movs	r3, #2
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4619      	mov	r1, r3
 8001648:	4805      	ldr	r0, [pc, #20]	@ (8001660 <HAL_TIM_MspPostInit+0x64>)
 800164a:	f000 fb7b 	bl	8001d44 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40012c00 	.word	0x40012c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800

08001664 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	@ 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0318 	add.w	r3, r7, #24
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a3b      	ldr	r2, [pc, #236]	@ (800176c <HAL_UART_MspInit+0x108>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d13a      	bne.n	80016fa <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	4a39      	ldr	r2, [pc, #228]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 800168a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800168e:	6193      	str	r3, [r2, #24]
 8001690:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 8001692:	699b      	ldr	r3, [r3, #24]
 8001694:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169c:	4b34      	ldr	r3, [pc, #208]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a33      	ldr	r2, [pc, #204]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b31      	ldr	r3, [pc, #196]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016be:	2303      	movs	r3, #3
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4619      	mov	r1, r3
 80016c8:	482a      	ldr	r0, [pc, #168]	@ (8001774 <HAL_UART_MspInit+0x110>)
 80016ca:	f000 fb3b 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016dc:	f107 0318 	add.w	r3, r7, #24
 80016e0:	4619      	mov	r1, r3
 80016e2:	4824      	ldr	r0, [pc, #144]	@ (8001774 <HAL_UART_MspInit+0x110>)
 80016e4:	f000 fb2e 	bl	8001d44 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2025      	movs	r0, #37	@ 0x25
 80016ee:	f000 fa40 	bl	8001b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f2:	2025      	movs	r0, #37	@ 0x25
 80016f4:	f000 fa59 	bl	8001baa <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f8:	e034      	b.n	8001764 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a1e      	ldr	r2, [pc, #120]	@ (8001778 <HAL_UART_MspInit+0x114>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d12f      	bne.n	8001764 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001704:	4b1a      	ldr	r3, [pc, #104]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	4a19      	ldr	r2, [pc, #100]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 800170a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800170e:	61d3      	str	r3, [r2, #28]
 8001710:	4b17      	ldr	r3, [pc, #92]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171c:	4b14      	ldr	r3, [pc, #80]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a13      	ldr	r2, [pc, #76]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b11      	ldr	r3, [pc, #68]	@ (8001770 <HAL_UART_MspInit+0x10c>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001734:	2304      	movs	r3, #4
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	@ (8001774 <HAL_UART_MspInit+0x110>)
 8001748:	f000 fafc 	bl	8001d44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800174c:	2308      	movs	r3, #8
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001750:	2300      	movs	r3, #0
 8001752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 0318 	add.w	r3, r7, #24
 800175c:	4619      	mov	r1, r3
 800175e:	4805      	ldr	r0, [pc, #20]	@ (8001774 <HAL_UART_MspInit+0x110>)
 8001760:	f000 faf0 	bl	8001d44 <HAL_GPIO_Init>
}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	@ 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40013800 	.word	0x40013800
 8001770:	40021000 	.word	0x40021000
 8001774:	40010800 	.word	0x40010800
 8001778:	40004400 	.word	0x40004400

0800177c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <NMI_Handler+0x4>

08001784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001788:	bf00      	nop
 800178a:	e7fd      	b.n	8001788 <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	bf00      	nop
 8001792:	e7fd      	b.n	8001790 <MemManage_Handler+0x4>

08001794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001798:	bf00      	nop
 800179a:	e7fd      	b.n	8001798 <BusFault_Handler+0x4>

0800179c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a0:	bf00      	nop
 80017a2:	e7fd      	b.n	80017a0 <UsageFault_Handler+0x4>

080017a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 f8ba 	bl	8001944 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(HAL_GPIO_ReadPin(echoPorts[sensor], echoPins[sensor]) && distance < 500)
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <TIM2_IRQHandler+0x60>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <TIM2_IRQHandler+0x64>)
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	4a13      	ldr	r2, [pc, #76]	@ (8001834 <TIM2_IRQHandler+0x60>)
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4a14      	ldr	r2, [pc, #80]	@ (800183c <TIM2_IRQHandler+0x68>)
 80017ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fc2a 	bl	800204c <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00a      	beq.n	8001814 <TIM2_IRQHandler+0x40>
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <TIM2_IRQHandler+0x6c>)
 8001800:	881b      	ldrh	r3, [r3, #0]
 8001802:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001806:	d205      	bcs.n	8001814 <TIM2_IRQHandler+0x40>
		distance++;
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <TIM2_IRQHandler+0x6c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	3301      	adds	r3, #1
 800180e:	b29a      	uxth	r2, r3
 8001810:	4b0b      	ldr	r3, [pc, #44]	@ (8001840 <TIM2_IRQHandler+0x6c>)
 8001812:	801a      	strh	r2, [r3, #0]
	if(triggerTime < TriggerDuration)
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <TIM2_IRQHandler+0x70>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d805      	bhi.n	8001828 <TIM2_IRQHandler+0x54>
		triggerTime++;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <TIM2_IRQHandler+0x70>)
 800181e:	881b      	ldrh	r3, [r3, #0]
 8001820:	3301      	adds	r3, #1
 8001822:	b29a      	uxth	r2, r3
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <TIM2_IRQHandler+0x70>)
 8001826:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001828:	4807      	ldr	r0, [pc, #28]	@ (8001848 <TIM2_IRQHandler+0x74>)
 800182a:	f001 fb5d 	bl	8002ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000007e 	.word	0x2000007e
 8001838:	20000014 	.word	0x20000014
 800183c:	20000020 	.word	0x20000020
 8001840:	2000007a 	.word	0x2000007a
 8001844:	2000007c 	.word	0x2000007c
 8001848:	20000170 	.word	0x20000170

0800184c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <USART1_IRQHandler+0x10>)
 8001852:	f002 f9b1 	bl	8003bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200001b8 	.word	0x200001b8

08001860 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff fff8 	bl	8001860 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001872:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001888:	4c09      	ldr	r4, [pc, #36]	@ (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f002 fe79 	bl	800458c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7ff fb35 	bl	8000f08 <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80018a8:	08004620 	.word	0x08004620
  ldr r2, =_sbss
 80018ac:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80018b0:	2000024c 	.word	0x2000024c

080018b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_2_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_Init+0x28>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_Init+0x28>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f947 	bl	8001b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f000 f808 	bl	80018e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fdbc 	bl	8001450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_InitTick+0x54>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x58>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4619      	mov	r1, r3
 80018f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001902:	4618      	mov	r0, r3
 8001904:	f000 f95f 	bl	8001bc6 <HAL_SYSTICK_Config>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00e      	b.n	8001930 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b0f      	cmp	r3, #15
 8001916:	d80a      	bhi.n	800192e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001918:	2200      	movs	r2, #0
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f000 f927 	bl	8001b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001924:	4a06      	ldr	r2, [pc, #24]	@ (8001940 <HAL_InitTick+0x5c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	e000      	b.n	8001930 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	20000028 	.word	0x20000028
 800193c:	20000030 	.word	0x20000030
 8001940:	2000002c 	.word	0x2000002c

08001944 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_IncTick+0x1c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_IncTick+0x20>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a03      	ldr	r2, [pc, #12]	@ (8001964 <HAL_IncTick+0x20>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr
 8001960:	20000030 	.word	0x20000030
 8001964:	20000248 	.word	0x20000248

08001968 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b02      	ldr	r3, [pc, #8]	@ (8001978 <HAL_GetTick+0x10>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	20000248 	.word	0x20000248

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fff0 	bl	8001968 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b0a      	ldr	r3, [pc, #40]	@ (80019c0 <HAL_Delay+0x44>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffe0 	bl	8001968 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000030 	.word	0x20000030

080019c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e0:	4013      	ands	r3, r2
 80019e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f6:	4a04      	ldr	r2, [pc, #16]	@ (8001a08 <__NVIC_SetPriorityGrouping+0x44>)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	60d3      	str	r3, [r2, #12]
}
 80019fc:	bf00      	nop
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bc80      	pop	{r7}
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <__NVIC_GetPriorityGrouping+0x18>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	f003 0307 	and.w	r3, r3, #7
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	db0b      	blt.n	8001a52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	4906      	ldr	r1, [pc, #24]	@ (8001a5c <__NVIC_EnableIRQ+0x34>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	2001      	movs	r0, #1
 8001a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	@ (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	@ (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	@ 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	@ 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr

08001b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b28:	d301      	bcc.n	8001b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00f      	b.n	8001b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <SysTick_Config+0x40>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b36:	210f      	movs	r1, #15
 8001b38:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3c:	f7ff ff90 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b40:	4b05      	ldr	r3, [pc, #20]	@ (8001b58 <SysTick_Config+0x40>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <SysTick_Config+0x40>)
 8001b48:	2207      	movs	r2, #7
 8001b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff ff2d 	bl	80019c4 <__NVIC_SetPriorityGrouping>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b086      	sub	sp, #24
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b84:	f7ff ff42 	bl	8001a0c <__NVIC_GetPriorityGrouping>
 8001b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	68b9      	ldr	r1, [r7, #8]
 8001b8e:	6978      	ldr	r0, [r7, #20]
 8001b90:	f7ff ff90 	bl	8001ab4 <NVIC_EncodePriority>
 8001b94:	4602      	mov	r2, r0
 8001b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff5f 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba2:	bf00      	nop
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff ff35 	bl	8001a28 <__NVIC_EnableIRQ>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ffa2 	bl	8001b18 <SysTick_Config>
 8001bd4:	4603      	mov	r3, r0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d008      	beq.n	8001c08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e020      	b.n	8001c4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 020e 	bic.w	r2, r2, #14
 8001c16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c30:	2101      	movs	r1, #1
 8001c32:	fa01 f202 	lsl.w	r2, r1, r2
 8001c36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d005      	beq.n	8001c78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2204      	movs	r2, #4
 8001c70:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	73fb      	strb	r3, [r7, #15]
 8001c76:	e051      	b.n	8001d1c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 020e 	bic.w	r2, r2, #14
 8001c86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0201 	bic.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	@ (8001d28 <HAL_DMA_Abort_IT+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d029      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0xa2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <HAL_DMA_Abort_IT+0xd8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d022      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x9e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d30 <HAL_DMA_Abort_IT+0xdc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d01a      	beq.n	8001cec <HAL_DMA_Abort_IT+0x98>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	@ (8001d34 <HAL_DMA_Abort_IT+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d012      	beq.n	8001ce6 <HAL_DMA_Abort_IT+0x92>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d38 <HAL_DMA_Abort_IT+0xe4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00a      	beq.n	8001ce0 <HAL_DMA_Abort_IT+0x8c>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	@ (8001d3c <HAL_DMA_Abort_IT+0xe8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d102      	bne.n	8001cda <HAL_DMA_Abort_IT+0x86>
 8001cd4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001cd8:	e00e      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cda:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cde:	e00b      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ce4:	e008      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cea:	e005      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf0:	e002      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	e000      	b.n	8001cf8 <HAL_DMA_Abort_IT+0xa4>
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_DMA_Abort_IT+0xec>)
 8001cfa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    } 
  }
  return status;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40020008 	.word	0x40020008
 8001d2c:	4002001c 	.word	0x4002001c
 8001d30:	40020030 	.word	0x40020030
 8001d34:	40020044 	.word	0x40020044
 8001d38:	40020058 	.word	0x40020058
 8001d3c:	4002006c 	.word	0x4002006c
 8001d40:	40020000 	.word	0x40020000

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	@ 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	@ (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	@ (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	@ (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	@ (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	@ (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	@ (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	@ (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	@ (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	@ (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	@ (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	@ (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	@ 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	@ 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	@ (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	@ (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	@ (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	@ (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	@ (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	@ (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	@ 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	4013      	ands	r3, r2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	e001      	b.n	800206e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	807b      	strh	r3, [r7, #2]
 8002086:	4613      	mov	r3, r2
 8002088:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208a:	787b      	ldrb	r3, [r7, #1]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002090:	887a      	ldrh	r2, [r7, #2]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002096:	e003      	b.n	80020a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	041a      	lsls	r2, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	611a      	str	r2, [r3, #16]
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e12b      	b.n	8002316 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d106      	bne.n	80020d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff f9ee 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2224      	movs	r2, #36	@ 0x24
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800210e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002110:	f000 fcda 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8002114:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a81      	ldr	r2, [pc, #516]	@ (8002320 <HAL_I2C_Init+0x274>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d807      	bhi.n	8002130 <HAL_I2C_Init+0x84>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	4a80      	ldr	r2, [pc, #512]	@ (8002324 <HAL_I2C_Init+0x278>)
 8002124:	4293      	cmp	r3, r2
 8002126:	bf94      	ite	ls
 8002128:	2301      	movls	r3, #1
 800212a:	2300      	movhi	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	e006      	b.n	800213e <HAL_I2C_Init+0x92>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a7d      	ldr	r2, [pc, #500]	@ (8002328 <HAL_I2C_Init+0x27c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	bf94      	ite	ls
 8002138:	2301      	movls	r3, #1
 800213a:	2300      	movhi	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e0e7      	b.n	8002316 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	4a78      	ldr	r2, [pc, #480]	@ (800232c <HAL_I2C_Init+0x280>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9b      	lsrs	r3, r3, #18
 8002150:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	430a      	orrs	r2, r1
 8002164:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	4a6a      	ldr	r2, [pc, #424]	@ (8002320 <HAL_I2C_Init+0x274>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d802      	bhi.n	8002180 <HAL_I2C_Init+0xd4>
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	3301      	adds	r3, #1
 800217e:	e009      	b.n	8002194 <HAL_I2C_Init+0xe8>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	4a69      	ldr	r2, [pc, #420]	@ (8002330 <HAL_I2C_Init+0x284>)
 800218c:	fba2 2303 	umull	r2, r3, r2, r3
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	3301      	adds	r3, #1
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021a6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	495c      	ldr	r1, [pc, #368]	@ (8002320 <HAL_I2C_Init+0x274>)
 80021b0:	428b      	cmp	r3, r1
 80021b2:	d819      	bhi.n	80021e8 <HAL_I2C_Init+0x13c>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1e59      	subs	r1, r3, #1
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c2:	1c59      	adds	r1, r3, #1
 80021c4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021c8:	400b      	ands	r3, r1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_I2C_Init+0x138>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1e59      	subs	r1, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e2:	e051      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 80021e4:	2304      	movs	r3, #4
 80021e6:	e04f      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d111      	bne.n	8002214 <HAL_I2C_Init+0x168>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1e58      	subs	r0, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	440b      	add	r3, r1
 80021fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002202:	3301      	adds	r3, #1
 8002204:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	e012      	b.n	800223a <HAL_I2C_Init+0x18e>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	0099      	lsls	r1, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	fbb0 f3f3 	udiv	r3, r0, r3
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	2b00      	cmp	r3, #0
 8002232:	bf0c      	ite	eq
 8002234:	2301      	moveq	r3, #1
 8002236:	2300      	movne	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Init+0x196>
 800223e:	2301      	movs	r3, #1
 8002240:	e022      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10e      	bne.n	8002268 <HAL_I2C_Init+0x1bc>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1e58      	subs	r0, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6859      	ldr	r1, [r3, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	440b      	add	r3, r1
 8002258:	fbb0 f3f3 	udiv	r3, r0, r3
 800225c:	3301      	adds	r3, #1
 800225e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002262:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002266:	e00f      	b.n	8002288 <HAL_I2C_Init+0x1dc>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	1e58      	subs	r0, r3, #1
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6859      	ldr	r1, [r3, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	0099      	lsls	r1, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	fbb0 f3f3 	udiv	r3, r0, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002284:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	6809      	ldr	r1, [r1, #0]
 800228c:	4313      	orrs	r3, r2
 800228e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	69da      	ldr	r2, [r3, #28]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6911      	ldr	r1, [r2, #16]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68d2      	ldr	r2, [r2, #12]
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	430b      	orrs	r3, r1
 80022ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	431a      	orrs	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0201 	orr.w	r2, r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	000186a0 	.word	0x000186a0
 8002324:	001e847f 	.word	0x001e847f
 8002328:	003d08ff 	.word	0x003d08ff
 800232c:	431bde83 	.word	0x431bde83
 8002330:	10624dd3 	.word	0x10624dd3

08002334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e272      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8087 	beq.w	8002462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002354:	4b92      	ldr	r3, [pc, #584]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b04      	cmp	r3, #4
 800235e:	d00c      	beq.n	800237a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002360:	4b8f      	ldr	r3, [pc, #572]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d112      	bne.n	8002392 <HAL_RCC_OscConfig+0x5e>
 800236c:	4b8c      	ldr	r3, [pc, #560]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002378:	d10b      	bne.n	8002392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237a:	4b89      	ldr	r3, [pc, #548]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d06c      	beq.n	8002460 <HAL_RCC_OscConfig+0x12c>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d168      	bne.n	8002460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e24c      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x76>
 800239c:	4b80      	ldr	r3, [pc, #512]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a7f      	ldr	r2, [pc, #508]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a6:	6013      	str	r3, [r2, #0]
 80023a8:	e02e      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x98>
 80023b2:	4b7b      	ldr	r3, [pc, #492]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a7a      	ldr	r2, [pc, #488]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	4b78      	ldr	r3, [pc, #480]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a77      	ldr	r2, [pc, #476]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0xbc>
 80023d6:	4b72      	ldr	r3, [pc, #456]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a71      	ldr	r2, [pc, #452]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b6f      	ldr	r3, [pc, #444]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6e      	ldr	r2, [pc, #440]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xd4>
 80023f0:	4b6b      	ldr	r3, [pc, #428]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a6a      	ldr	r2, [pc, #424]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b68      	ldr	r3, [pc, #416]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a67      	ldr	r2, [pc, #412]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff faaa 	bl	8001968 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff faa6 	bl	8001968 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	@ 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e200      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b5d      	ldr	r3, [pc, #372]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xe4>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff fa96 	bl	8001968 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff fa92 	bl	8001968 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1ec      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b53      	ldr	r3, [pc, #332]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x10c>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246e:	4b4c      	ldr	r3, [pc, #304]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800247a:	4b49      	ldr	r3, [pc, #292]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x18c>
 8002486:	4b46      	ldr	r3, [pc, #280]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b43      	ldr	r3, [pc, #268]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x176>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1c0      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b3d      	ldr	r3, [pc, #244]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4939      	ldr	r1, [pc, #228]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e03a      	b.n	8002536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b36      	ldr	r3, [pc, #216]	@ (80025a4 <HAL_RCC_OscConfig+0x270>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ce:	f7ff fa4b 	bl	8001968 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d6:	f7ff fa47 	bl	8001968 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1a1      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4927      	ldr	r1, [pc, #156]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b26      	ldr	r3, [pc, #152]	@ (80025a4 <HAL_RCC_OscConfig+0x270>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7ff fa2a 	bl	8001968 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002518:	f7ff fa26 	bl	8001968 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e180      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d03a      	beq.n	80025b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d019      	beq.n	800257e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b17      	ldr	r3, [pc, #92]	@ (80025a8 <HAL_RCC_OscConfig+0x274>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002550:	f7ff fa0a 	bl	8001968 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff fa06 	bl	8001968 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e160      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	4b0d      	ldr	r3, [pc, #52]	@ (80025a0 <HAL_RCC_OscConfig+0x26c>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002576:	2001      	movs	r0, #1
 8002578:	f000 face 	bl	8002b18 <RCC_Delay>
 800257c:	e01c      	b.n	80025b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_RCC_OscConfig+0x274>)
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002584:	f7ff f9f0 	bl	8001968 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258a:	e00f      	b.n	80025ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258c:	f7ff f9ec 	bl	8001968 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d908      	bls.n	80025ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e146      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	42420000 	.word	0x42420000
 80025a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	4b92      	ldr	r3, [pc, #584]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1e9      	bne.n	800258c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a6 	beq.w	8002712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b8b      	ldr	r3, [pc, #556]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10d      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	4b88      	ldr	r3, [pc, #544]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	4a87      	ldr	r2, [pc, #540]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	61d3      	str	r3, [r2, #28]
 80025e2:	4b85      	ldr	r3, [pc, #532]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b82      	ldr	r3, [pc, #520]	@ (80027fc <HAL_RCC_OscConfig+0x4c8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b7f      	ldr	r3, [pc, #508]	@ (80027fc <HAL_RCC_OscConfig+0x4c8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7e      	ldr	r2, [pc, #504]	@ (80027fc <HAL_RCC_OscConfig+0x4c8>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7ff f9ad 	bl	8001968 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7ff f9a9 	bl	8001968 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b64      	cmp	r3, #100	@ 0x64
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e103      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b75      	ldr	r3, [pc, #468]	@ (80027fc <HAL_RCC_OscConfig+0x4c8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x312>
 8002638:	4b6f      	ldr	r3, [pc, #444]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a1b      	ldr	r3, [r3, #32]
 800263c:	4a6e      	ldr	r2, [pc, #440]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6213      	str	r3, [r2, #32]
 8002644:	e02d      	b.n	80026a2 <HAL_RCC_OscConfig+0x36e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x334>
 800264e:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	4a69      	ldr	r2, [pc, #420]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6213      	str	r3, [r2, #32]
 800265a:	4b67      	ldr	r3, [pc, #412]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	4a66      	ldr	r2, [pc, #408]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002660:	f023 0304 	bic.w	r3, r3, #4
 8002664:	6213      	str	r3, [r2, #32]
 8002666:	e01c      	b.n	80026a2 <HAL_RCC_OscConfig+0x36e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b05      	cmp	r3, #5
 800266e:	d10c      	bne.n	800268a <HAL_RCC_OscConfig+0x356>
 8002670:	4b61      	ldr	r3, [pc, #388]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	6a1b      	ldr	r3, [r3, #32]
 8002674:	4a60      	ldr	r2, [pc, #384]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	f043 0304 	orr.w	r3, r3, #4
 800267a:	6213      	str	r3, [r2, #32]
 800267c:	4b5e      	ldr	r3, [pc, #376]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a5d      	ldr	r2, [pc, #372]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	6213      	str	r3, [r2, #32]
 8002688:	e00b      	b.n	80026a2 <HAL_RCC_OscConfig+0x36e>
 800268a:	4b5b      	ldr	r3, [pc, #364]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	4a5a      	ldr	r2, [pc, #360]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6213      	str	r3, [r2, #32]
 8002696:	4b58      	ldr	r3, [pc, #352]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a57      	ldr	r2, [pc, #348]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 0304 	bic.w	r3, r3, #4
 80026a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d015      	beq.n	80026d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026aa:	f7ff f95d 	bl	8001968 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff f959 	bl	8001968 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e0b1      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c8:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ee      	beq.n	80026b2 <HAL_RCC_OscConfig+0x37e>
 80026d4:	e014      	b.n	8002700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d6:	f7ff f947 	bl	8001968 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7ff f943 	bl	8001968 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e09b      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f4:	4b40      	ldr	r3, [pc, #256]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d1ee      	bne.n	80026de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d105      	bne.n	8002712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002706:	4b3c      	ldr	r3, [pc, #240]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a3b      	ldr	r2, [pc, #236]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8087 	beq.w	800282a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800271c:	4b36      	ldr	r3, [pc, #216]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b08      	cmp	r3, #8
 8002726:	d061      	beq.n	80027ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d146      	bne.n	80027be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b33      	ldr	r3, [pc, #204]	@ (8002800 <HAL_RCC_OscConfig+0x4cc>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7ff f917 	bl	8001968 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273e:	f7ff f913 	bl	8001968 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e06d      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002750:	4b29      	ldr	r3, [pc, #164]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002764:	d108      	bne.n	8002778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002766:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	4921      	ldr	r1, [pc, #132]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002778:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a19      	ldr	r1, [r3, #32]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002788:	430b      	orrs	r3, r1
 800278a:	491b      	ldr	r1, [pc, #108]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002790:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <HAL_RCC_OscConfig+0x4cc>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff f8e7 	bl	8001968 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7ff f8e3 	bl	8001968 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e03d      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027b0:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x46a>
 80027bc:	e035      	b.n	800282a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027be:	4b10      	ldr	r3, [pc, #64]	@ (8002800 <HAL_RCC_OscConfig+0x4cc>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c4:	f7ff f8d0 	bl	8001968 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7ff f8cc 	bl	8001968 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e026      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f0      	bne.n	80027cc <HAL_RCC_OscConfig+0x498>
 80027ea:	e01e      	b.n	800282a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e019      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
 8002800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <HAL_RCC_OscConfig+0x500>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	429a      	cmp	r2, r3
 8002816:	d106      	bne.n	8002826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000

08002838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0d0      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b6a      	ldr	r3, [pc, #424]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d910      	bls.n	800287c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b67      	ldr	r3, [pc, #412]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f023 0207 	bic.w	r2, r3, #7
 8002862:	4965      	ldr	r1, [pc, #404]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	4b63      	ldr	r3, [pc, #396]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	683a      	ldr	r2, [r7, #0]
 8002874:	429a      	cmp	r2, r3
 8002876:	d001      	beq.n	800287c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e0b8      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d020      	beq.n	80028ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002894:	4b59      	ldr	r3, [pc, #356]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a58      	ldr	r2, [pc, #352]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 800289a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800289e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0308 	and.w	r3, r3, #8
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d005      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028ac:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a52      	ldr	r2, [pc, #328]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b8:	4b50      	ldr	r3, [pc, #320]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	494d      	ldr	r1, [pc, #308]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d040      	beq.n	8002958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d107      	bne.n	80028ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d115      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e07f      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b41      	ldr	r3, [pc, #260]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e073      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4b3d      	ldr	r3, [pc, #244]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06b      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002916:	4b39      	ldr	r3, [pc, #228]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4936      	ldr	r1, [pc, #216]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002924:	4313      	orrs	r3, r2
 8002926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002928:	f7ff f81e 	bl	8001968 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7ff f81a 	bl	8001968 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e053      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2d      	ldr	r3, [pc, #180]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	429a      	cmp	r2, r3
 8002956:	d1eb      	bne.n	8002930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d210      	bcs.n	8002988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b24      	ldr	r3, [pc, #144]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4922      	ldr	r1, [pc, #136]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b20      	ldr	r3, [pc, #128]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e032      	b.n	80029ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002994:	4b19      	ldr	r3, [pc, #100]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	4916      	ldr	r1, [pc, #88]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0308 	and.w	r3, r3, #8
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d009      	beq.n	80029c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029b2:	4b12      	ldr	r3, [pc, #72]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	490e      	ldr	r1, [pc, #56]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c6:	f000 f821 	bl	8002a0c <HAL_RCC_GetSysClockFreq>
 80029ca:	4602      	mov	r2, r0
 80029cc:	4b0b      	ldr	r3, [pc, #44]	@ (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	490a      	ldr	r1, [pc, #40]	@ (8002a00 <HAL_RCC_ClockConfig+0x1c8>)
 80029d8:	5ccb      	ldrb	r3, [r1, r3]
 80029da:	fa22 f303 	lsr.w	r3, r2, r3
 80029de:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x1cc>)
 80029e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029e2:	4b09      	ldr	r3, [pc, #36]	@ (8002a08 <HAL_RCC_ClockConfig+0x1d0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe ff7c 	bl	80018e4 <HAL_InitTick>

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40022000 	.word	0x40022000
 80029fc:	40021000 	.word	0x40021000
 8002a00:	080045ec 	.word	0x080045ec
 8002a04:	20000028 	.word	0x20000028
 8002a08:	2000002c 	.word	0x2000002c

08002a0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	2300      	movs	r3, #0
 8002a20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b04      	cmp	r3, #4
 8002a34:	d002      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x30>
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d003      	beq.n	8002a42 <HAL_RCC_GetSysClockFreq+0x36>
 8002a3a:	e027      	b.n	8002a8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3e:	613b      	str	r3, [r7, #16]
      break;
 8002a40:	e027      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0c9b      	lsrs	r3, r3, #18
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a17      	ldr	r2, [pc, #92]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d010      	beq.n	8002a7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a5a:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	0c5b      	lsrs	r3, r3, #17
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	4a11      	ldr	r2, [pc, #68]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a66:	5cd3      	ldrb	r3, [r2, r3]
 8002a68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6e:	fb03 f202 	mul.w	r2, r3, r2
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	e004      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	613b      	str	r3, [r7, #16]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8e:	613b      	str	r3, [r7, #16]
      break;
 8002a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a92:	693b      	ldr	r3, [r7, #16]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	371c      	adds	r7, #28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	007a1200 	.word	0x007a1200
 8002aa8:	08004604 	.word	0x08004604
 8002aac:	08004614 	.word	0x08004614
 8002ab0:	003d0900 	.word	0x003d0900

08002ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab8:	4b02      	ldr	r3, [pc, #8]	@ (8002ac4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002aba:	681b      	ldr	r3, [r3, #0]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	20000028 	.word	0x20000028

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff2 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	@ (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	@ (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	080045fc 	.word	0x080045fc

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffde 	bl	8002ab4 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0adb      	lsrs	r3, r3, #11
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	@ (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	080045fc 	.word	0x080045fc

08002b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <RCC_Delay+0x34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <RCC_Delay+0x38>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b34:	bf00      	nop
  }
  while (Delay --);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <RCC_Delay+0x1c>
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000028 	.word	0x20000028
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e041      	b.n	8002bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d106      	bne.n	8002b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7fe fd06 	bl	800158c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3304      	adds	r3, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f000 fc4e 	bl	8003434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e03a      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a18      	ldr	r2, [pc, #96]	@ (8002c8c <HAL_TIM_Base_Start_IT+0x98>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x58>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c36:	d009      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x58>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a14      	ldr	r2, [pc, #80]	@ (8002c90 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x58>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a13      	ldr	r2, [pc, #76]	@ (8002c94 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d010      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	e007      	b.n	8002c80 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	40012c00 	.word	0x40012c00
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800

08002c98 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10f      	bne.n	8002ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d107      	bne.n	8002ce0 <HAL_TIM_Base_Stop_IT+0x48>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e041      	b.n	8002d8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d106      	bne.n	8002d20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f000 f839 	bl	8002d92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4610      	mov	r0, r2
 8002d34:	f000 fb7e 	bl	8003434 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bc80      	pop	{r7}
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d109      	bne.n	8002dc8 <HAL_TIM_PWM_Start+0x24>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	bf14      	ite	ne
 8002dc0:	2301      	movne	r3, #1
 8002dc2:	2300      	moveq	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	e022      	b.n	8002e0e <HAL_TIM_PWM_Start+0x6a>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d109      	bne.n	8002de2 <HAL_TIM_PWM_Start+0x3e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	bf14      	ite	ne
 8002dda:	2301      	movne	r3, #1
 8002ddc:	2300      	moveq	r3, #0
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	e015      	b.n	8002e0e <HAL_TIM_PWM_Start+0x6a>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b08      	cmp	r3, #8
 8002de6:	d109      	bne.n	8002dfc <HAL_TIM_PWM_Start+0x58>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	e008      	b.n	8002e0e <HAL_TIM_PWM_Start+0x6a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e05e      	b.n	8002ed4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <HAL_TIM_PWM_Start+0x82>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e24:	e013      	b.n	8002e4e <HAL_TIM_PWM_Start+0xaa>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d104      	bne.n	8002e36 <HAL_TIM_PWM_Start+0x92>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e34:	e00b      	b.n	8002e4e <HAL_TIM_PWM_Start+0xaa>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d104      	bne.n	8002e46 <HAL_TIM_PWM_Start+0xa2>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e44:	e003      	b.n	8002e4e <HAL_TIM_PWM_Start+0xaa>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2202      	movs	r2, #2
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	6839      	ldr	r1, [r7, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 fd78 	bl	800394c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1e      	ldr	r2, [pc, #120]	@ (8002edc <HAL_TIM_PWM_Start+0x138>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d107      	bne.n	8002e76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a18      	ldr	r2, [pc, #96]	@ (8002edc <HAL_TIM_PWM_Start+0x138>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIM_PWM_Start+0xfa>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_PWM_Start+0xfa>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <HAL_TIM_PWM_Start+0x13c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_PWM_Start+0xfa>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a12      	ldr	r2, [pc, #72]	@ (8002ee4 <HAL_TIM_PWM_Start+0x140>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d111      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d010      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	e007      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40012c00 	.word	0x40012c00
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800

08002ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d020      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01b      	beq.n	8002f4c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f06f 0202 	mvn.w	r2, #2
 8002f1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fa63 	bl	80033fe <HAL_TIM_IC_CaptureCallback>
 8002f38:	e005      	b.n	8002f46 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa56 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fa65 	bl	8003410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d020      	beq.n	8002f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01b      	beq.n	8002f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f06f 0204 	mvn.w	r2, #4
 8002f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fa3d 	bl	80033fe <HAL_TIM_IC_CaptureCallback>
 8002f84:	e005      	b.n	8002f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 fa30 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fa3f 	bl	8003410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa17 	bl	80033fe <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 fa0a 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fa19 	bl	8003410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0210 	mvn.w	r2, #16
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2208      	movs	r2, #8
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f9f1 	bl	80033fe <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f9e4 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f9f3 	bl	8003410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00c      	beq.n	8003054 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b00      	cmp	r3, #0
 8003042:	d007      	beq.n	8003054 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0201 	mvn.w	r2, #1
 800304c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f9c3 	bl	80033da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fd46 	bl	8003b04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9c3 	bl	8003422 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0220 	mvn.w	r2, #32
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 fd19 	bl	8003af2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030c0:	bf00      	nop
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e0ae      	b.n	8003244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b0c      	cmp	r3, #12
 80030f2:	f200 809f 	bhi.w	8003234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003131 	.word	0x08003131
 8003100:	08003235 	.word	0x08003235
 8003104:	08003235 	.word	0x08003235
 8003108:	08003235 	.word	0x08003235
 800310c:	08003171 	.word	0x08003171
 8003110:	08003235 	.word	0x08003235
 8003114:	08003235 	.word	0x08003235
 8003118:	08003235 	.word	0x08003235
 800311c:	080031b3 	.word	0x080031b3
 8003120:	08003235 	.word	0x08003235
 8003124:	08003235 	.word	0x08003235
 8003128:	08003235 	.word	0x08003235
 800312c:	080031f3 	.word	0x080031f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68b9      	ldr	r1, [r7, #8]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f9ea 	bl	8003510 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0208 	orr.w	r2, r2, #8
 800314a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0204 	bic.w	r2, r2, #4
 800315a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6999      	ldr	r1, [r3, #24]
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	619a      	str	r2, [r3, #24]
      break;
 800316e:	e064      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fa30 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800318a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699a      	ldr	r2, [r3, #24]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6999      	ldr	r1, [r3, #24]
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	021a      	lsls	r2, r3, #8
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	619a      	str	r2, [r3, #24]
      break;
 80031b0:	e043      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fa79 	bl	80036b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0208 	orr.w	r2, r2, #8
 80031cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69da      	ldr	r2, [r3, #28]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f022 0204 	bic.w	r2, r2, #4
 80031dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	69d9      	ldr	r1, [r3, #28]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	61da      	str	r2, [r3, #28]
      break;
 80031f0:	e023      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68b9      	ldr	r1, [r7, #8]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fac3 	bl	8003784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	69da      	ldr	r2, [r3, #28]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800320c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69da      	ldr	r2, [r3, #28]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800321c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	69d9      	ldr	r1, [r3, #28]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	021a      	lsls	r2, r3, #8
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	61da      	str	r2, [r3, #28]
      break;
 8003232:	e002      	b.n	800323a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	75fb      	strb	r3, [r7, #23]
      break;
 8003238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003260:	2b01      	cmp	r3, #1
 8003262:	d101      	bne.n	8003268 <HAL_TIM_ConfigClockSource+0x1c>
 8003264:	2302      	movs	r3, #2
 8003266:	e0b4      	b.n	80033d2 <HAL_TIM_ConfigClockSource+0x186>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2202      	movs	r2, #2
 8003274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800328e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a0:	d03e      	beq.n	8003320 <HAL_TIM_ConfigClockSource+0xd4>
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a6:	f200 8087 	bhi.w	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ae:	f000 8086 	beq.w	80033be <HAL_TIM_ConfigClockSource+0x172>
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b6:	d87f      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b70      	cmp	r3, #112	@ 0x70
 80032ba:	d01a      	beq.n	80032f2 <HAL_TIM_ConfigClockSource+0xa6>
 80032bc:	2b70      	cmp	r3, #112	@ 0x70
 80032be:	d87b      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b60      	cmp	r3, #96	@ 0x60
 80032c2:	d050      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x11a>
 80032c4:	2b60      	cmp	r3, #96	@ 0x60
 80032c6:	d877      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b50      	cmp	r3, #80	@ 0x50
 80032ca:	d03c      	beq.n	8003346 <HAL_TIM_ConfigClockSource+0xfa>
 80032cc:	2b50      	cmp	r3, #80	@ 0x50
 80032ce:	d873      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b40      	cmp	r3, #64	@ 0x40
 80032d2:	d058      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x13a>
 80032d4:	2b40      	cmp	r3, #64	@ 0x40
 80032d6:	d86f      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b30      	cmp	r3, #48	@ 0x30
 80032da:	d064      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b30      	cmp	r3, #48	@ 0x30
 80032de:	d86b      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d060      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d867      	bhi.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05c      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032ec:	2b10      	cmp	r3, #16
 80032ee:	d05a      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x15a>
 80032f0:	e062      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003302:	f000 fb04 	bl	800390e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	609a      	str	r2, [r3, #8]
      break;
 800331e:	e04f      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003330:	f000 faed 	bl	800390e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003342:	609a      	str	r2, [r3, #8]
      break;
 8003344:	e03c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003352:	461a      	mov	r2, r3
 8003354:	f000 fa64 	bl	8003820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2150      	movs	r1, #80	@ 0x50
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fabb 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 8003364:	e02c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003372:	461a      	mov	r2, r3
 8003374:	f000 fa82 	bl	800387c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2160      	movs	r1, #96	@ 0x60
 800337e:	4618      	mov	r0, r3
 8003380:	f000 faab 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 8003384:	e01c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fa44 	bl	8003820 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2140      	movs	r1, #64	@ 0x40
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fa9b 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80033a4:	e00c      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4619      	mov	r1, r3
 80033b0:	4610      	mov	r0, r2
 80033b2:	f000 fa92 	bl	80038da <TIM_ITRx_SetConfig>
      break;
 80033b6:	e003      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e000      	b.n	80033c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003406:	bf00      	nop
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	bc80      	pop	{r7}
 800340e:	4770      	bx	lr

08003410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003418:	bf00      	nop
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr

08003434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a2f      	ldr	r2, [pc, #188]	@ (8003504 <TIM_Base_SetConfig+0xd0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00b      	beq.n	8003464 <TIM_Base_SetConfig+0x30>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003452:	d007      	beq.n	8003464 <TIM_Base_SetConfig+0x30>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a2c      	ldr	r2, [pc, #176]	@ (8003508 <TIM_Base_SetConfig+0xd4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d003      	beq.n	8003464 <TIM_Base_SetConfig+0x30>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2b      	ldr	r2, [pc, #172]	@ (800350c <TIM_Base_SetConfig+0xd8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d108      	bne.n	8003476 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800346a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <TIM_Base_SetConfig+0xd0>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0x62>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0x62>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1f      	ldr	r2, [pc, #124]	@ (8003508 <TIM_Base_SetConfig+0xd4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0x62>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1e      	ldr	r2, [pc, #120]	@ (800350c <TIM_Base_SetConfig+0xd8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0d      	ldr	r2, [pc, #52]	@ (8003504 <TIM_Base_SetConfig+0xd0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d103      	bne.n	80034dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	691b      	ldr	r3, [r3, #16]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	611a      	str	r2, [r3, #16]
  }
}
 80034fa:	bf00      	nop
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800

08003510 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f023 0201 	bic.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800353e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0303 	bic.w	r3, r3, #3
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f023 0302 	bic.w	r3, r3, #2
 8003558:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <TIM_OC1_SetConfig+0xc8>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d10c      	bne.n	8003586 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f023 0308 	bic.w	r3, r3, #8
 8003572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f023 0304 	bic.w	r3, r3, #4
 8003584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a13      	ldr	r2, [pc, #76]	@ (80035d8 <TIM_OC1_SetConfig+0xc8>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d111      	bne.n	80035b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800359c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	621a      	str	r2, [r3, #32]
}
 80035cc:	bf00      	nop
 80035ce:	371c      	adds	r7, #28
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	40012c00 	.word	0x40012c00

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 0210 	bic.w	r2, r3, #16
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800360a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	021b      	lsls	r3, r3, #8
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	4313      	orrs	r3, r2
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f023 0320 	bic.w	r3, r3, #32
 8003626:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a1d      	ldr	r2, [pc, #116]	@ (80036ac <TIM_OC2_SetConfig+0xd0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d10d      	bne.n	8003658 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003642:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003656:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a14      	ldr	r2, [pc, #80]	@ (80036ac <TIM_OC2_SetConfig+0xd0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d113      	bne.n	8003688 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800366e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr
 80036ac:	40012c00 	.word	0x40012c00

080036b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b087      	sub	sp, #28
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	69db      	ldr	r3, [r3, #28]
 80036d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0303 	bic.w	r3, r3, #3
 80036e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68fa      	ldr	r2, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4313      	orrs	r3, r2
 8003704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1d      	ldr	r2, [pc, #116]	@ (8003780 <TIM_OC3_SetConfig+0xd0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d10d      	bne.n	800372a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003714:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	021b      	lsls	r3, r3, #8
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	4313      	orrs	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a14      	ldr	r2, [pc, #80]	@ (8003780 <TIM_OC3_SetConfig+0xd0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d113      	bne.n	800375a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40012c00 	.word	0x40012c00

08003784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	021b      	lsls	r3, r3, #8
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	031b      	lsls	r3, r3, #12
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a0f      	ldr	r2, [pc, #60]	@ (800381c <TIM_OC4_SetConfig+0x98>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d109      	bne.n	80037f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	693a      	ldr	r2, [r7, #16]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	bc80      	pop	{r7}
 800381a:	4770      	bx	lr
 800381c:	40012c00 	.word	0x40012c00

08003820 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003820:	b480      	push	{r7}
 8003822:	b087      	sub	sp, #28
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f023 0201 	bic.w	r2, r3, #1
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800384a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f023 030a 	bic.w	r3, r3, #10
 800385c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800387c:	b480      	push	{r7}
 800387e:	b087      	sub	sp, #28
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	f023 0210 	bic.w	r2, r3, #16
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	031b      	lsls	r3, r3, #12
 80038ac:	693a      	ldr	r2, [r7, #16]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	011b      	lsls	r3, r3, #4
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	621a      	str	r2, [r3, #32]
}
 80038d0:	bf00      	nop
 80038d2:	371c      	adds	r7, #28
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038da:	b480      	push	{r7}
 80038dc:	b085      	sub	sp, #20
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f043 0307 	orr.w	r3, r3, #7
 80038fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	609a      	str	r2, [r3, #8]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	bc80      	pop	{r7}
 800390c:	4770      	bx	lr

0800390e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800390e:	b480      	push	{r7}
 8003910:	b087      	sub	sp, #28
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003928:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	021a      	lsls	r2, r3, #8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	431a      	orrs	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	609a      	str	r2, [r3, #8]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr

0800394c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e046      	b.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a16      	ldr	r2, [pc, #88]	@ (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039f8:	d009      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a10      	ldr	r2, [pc, #64]	@ (8003a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d10c      	bne.n	8003a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bc80      	pop	{r7}
 8003a42:	4770      	bx	lr
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40000400 	.word	0x40000400
 8003a4c:	40000800 	.word	0x40000800

08003a50 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e03d      	b.n	8003ae8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr

08003b16 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e042      	b.n	8003bae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d106      	bne.n	8003b42 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7fd fd91 	bl	8001664 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2224      	movs	r2, #36	@ 0x24
 8003b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b58:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fc80 	bl	8004460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b6e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b7e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3708      	adds	r7, #8
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b0ba      	sub	sp, #232	@ 0xe8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bf6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10f      	bne.n	8003c1e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d009      	beq.n	8003c1e <HAL_UART_IRQHandler+0x66>
 8003c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fb63 	bl	80042e2 <UART_Receive_IT>
      return;
 8003c1c:	e25b      	b.n	80040d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 80de 	beq.w	8003de4 <HAL_UART_IRQHandler+0x22c>
 8003c28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c38:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80d1 	beq.w	8003de4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_UART_IRQHandler+0xae>
 8003c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d005      	beq.n	8003c66 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f043 0201 	orr.w	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <HAL_UART_IRQHandler+0xd2>
 8003c72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f043 0202 	orr.w	r2, r3, #2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00b      	beq.n	8003cae <HAL_UART_IRQHandler+0xf6>
 8003c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	f043 0204 	orr.w	r2, r3, #4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d011      	beq.n	8003cde <HAL_UART_IRQHandler+0x126>
 8003cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d105      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003cc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd6:	f043 0208 	orr.w	r2, r3, #8
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 81f2 	beq.w	80040cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_UART_IRQHandler+0x14e>
 8003cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 faee 	bl	80042e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d103      	bne.n	8003d32 <HAL_UART_IRQHandler+0x17a>
 8003d2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d04f      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f9f8 	bl	8004128 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d041      	beq.n	8003dca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3314      	adds	r3, #20
 8003d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	3314      	adds	r3, #20
 8003d6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1d9      	bne.n	8003d46 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d013      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d9e:	4a7e      	ldr	r2, [pc, #504]	@ (8003f98 <HAL_UART_IRQHandler+0x3e0>)
 8003da0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fd ff54 	bl	8001c54 <HAL_DMA_Abort_IT>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d016      	beq.n	8003de0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003dbc:	4610      	mov	r0, r2
 8003dbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e00e      	b.n	8003de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f99c 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc8:	e00a      	b.n	8003de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f998 	bl	8004100 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd0:	e006      	b.n	8003de0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f994 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003dde:	e175      	b.n	80040cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de0:	bf00      	nop
    return;
 8003de2:	e173      	b.n	80040cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 814f 	bne.w	800408c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003df2:	f003 0310 	and.w	r3, r3, #16
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	f000 8148 	beq.w	800408c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8141 	beq.w	800408c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80b6 	beq.w	8003f9c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f000 8145 	beq.w	80040d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	f080 813e 	bcs.w	80040d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e5a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	2b20      	cmp	r3, #32
 8003e64:	f000 8088 	beq.w	8003f78 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e94:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ea0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ea4:	e841 2300 	strex	r3, r2, [r1]
 8003ea8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1d9      	bne.n	8003e68 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ec4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ed8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003edc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ee0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003eea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e1      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3314      	adds	r3, #20
 8003f10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f14:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f16:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003f1a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003f22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e3      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f40:	e853 3f00 	ldrex	r3, [r3]
 8003f44:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f48:	f023 0310 	bic.w	r3, r3, #16
 8003f4c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	330c      	adds	r3, #12
 8003f56:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f5c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1e3      	bne.n	8003f36 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd fe33 	bl	8001bde <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8bf 	bl	8004112 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f94:	e09c      	b.n	80040d0 <HAL_UART_IRQHandler+0x518>
 8003f96:	bf00      	nop
 8003f98:	080041ed 	.word	0x080041ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 808e 	beq.w	80040d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f000 8089 	beq.w	80040d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	330c      	adds	r3, #12
 8003fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003fe6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fe8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e3      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	623b      	str	r3, [r7, #32]
   return(result);
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3314      	adds	r3, #20
 800401a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800401e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004020:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800402c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1e3      	bne.n	8003ffa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0310 	bic.w	r3, r3, #16
 8004056:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	330c      	adds	r3, #12
 8004060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004064:	61fa      	str	r2, [r7, #28]
 8004066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004068:	69b9      	ldr	r1, [r7, #24]
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	e841 2300 	strex	r3, r2, [r1]
 8004070:	617b      	str	r3, [r7, #20]
   return(result);
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1e3      	bne.n	8004040 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800407e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f844 	bl	8004112 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800408a:	e023      	b.n	80040d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d009      	beq.n	80040ac <HAL_UART_IRQHandler+0x4f4>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800409c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 f8b5 	bl	8004214 <UART_Transmit_IT>
    return;
 80040aa:	e014      	b.n	80040d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00e      	beq.n	80040d6 <HAL_UART_IRQHandler+0x51e>
 80040b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f8f4 	bl	80042b2 <UART_EndTransmit_IT>
    return;
 80040ca:	e004      	b.n	80040d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80040cc:	bf00      	nop
 80040ce:	e002      	b.n	80040d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040d0:	bf00      	nop
 80040d2:	e000      	b.n	80040d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80040d4:	bf00      	nop
  }
}
 80040d6:	37e8      	adds	r7, #232	@ 0xe8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr

080040ee <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	460b      	mov	r3, r1
 800411c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b095      	sub	sp, #84	@ 0x54
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004150:	643a      	str	r2, [r7, #64]	@ 0x40
 8004152:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3314      	adds	r3, #20
 800416a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	61fb      	str	r3, [r7, #28]
   return(result);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3314      	adds	r3, #20
 8004182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800418a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419c:	2b01      	cmp	r3, #1
 800419e:	d119      	bne.n	80041d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	e853 3f00 	ldrex	r3, [r3]
 80041ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	f023 0310 	bic.w	r3, r3, #16
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	330c      	adds	r3, #12
 80041be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041c0:	61ba      	str	r2, [r7, #24]
 80041c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	6979      	ldr	r1, [r7, #20]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	e841 2300 	strex	r3, r2, [r1]
 80041cc:	613b      	str	r3, [r7, #16]
   return(result);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e5      	bne.n	80041a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80041e2:	bf00      	nop
 80041e4:	3754      	adds	r7, #84	@ 0x54
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr

080041ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff ff7a 	bl	8004100 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004214:	b480      	push	{r7}
 8004216:	b085      	sub	sp, #20
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b21      	cmp	r3, #33	@ 0x21
 8004226:	d13e      	bne.n	80042a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004230:	d114      	bne.n	800425c <UART_Transmit_IT+0x48>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d110      	bne.n	800425c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	1c9a      	adds	r2, r3, #2
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]
 800425a:	e008      	b.n	800426e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	1c59      	adds	r1, r3, #1
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6211      	str	r1, [r2, #32]
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29b      	uxth	r3, r3
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	4619      	mov	r1, r3
 800427c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10f      	bne.n	80042a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68da      	ldr	r2, [r3, #12]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004290:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80042a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ff02 	bl	80040dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b08c      	sub	sp, #48	@ 0x30
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b22      	cmp	r3, #34	@ 0x22
 80042f4:	f040 80ae 	bne.w	8004454 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004300:	d117      	bne.n	8004332 <UART_Receive_IT+0x50>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d113      	bne.n	8004332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b29b      	uxth	r3, r3
 800431c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004320:	b29a      	uxth	r2, r3
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800432a:	1c9a      	adds	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004330:	e026      	b.n	8004380 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004336:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004344:	d007      	beq.n	8004356 <UART_Receive_IT+0x74>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10a      	bne.n	8004364 <UART_Receive_IT+0x82>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	b2da      	uxtb	r2, r3
 800435e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e008      	b.n	8004376 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004370:	b2da      	uxtb	r2, r3
 8004372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004384:	b29b      	uxth	r3, r3
 8004386:	3b01      	subs	r3, #1
 8004388:	b29b      	uxth	r3, r3
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	4619      	mov	r1, r3
 800438e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004390:	2b00      	cmp	r3, #0
 8004392:	d15d      	bne.n	8004450 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0220 	bic.w	r2, r2, #32
 80043a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	695a      	ldr	r2, [r3, #20]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d135      	bne.n	8004446 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	613b      	str	r3, [r7, #16]
   return(result);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004400:	623a      	str	r2, [r7, #32]
 8004402:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	69f9      	ldr	r1, [r7, #28]
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	61bb      	str	r3, [r7, #24]
   return(result);
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e5      	bne.n	80043e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	2b10      	cmp	r3, #16
 8004420:	d10a      	bne.n	8004438 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	60fb      	str	r3, [r7, #12]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fe67 	bl	8004112 <HAL_UARTEx_RxEventCallback>
 8004444:	e002      	b.n	800444c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff fe51 	bl	80040ee <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e002      	b.n	8004456 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3730      	adds	r7, #48	@ 0x30
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800449a:	f023 030c 	bic.w	r3, r3, #12
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	430b      	orrs	r3, r1
 80044a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004574 <UART_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d103      	bne.n	80044d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80044c8:	f7fe fb12 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	e002      	b.n	80044d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7fe fafa 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 80044d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	009a      	lsls	r2, r3, #2
 80044e0:	441a      	add	r2, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ec:	4a22      	ldr	r2, [pc, #136]	@ (8004578 <UART_SetConfig+0x118>)
 80044ee:	fba2 2303 	umull	r2, r3, r2, r3
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	0119      	lsls	r1, r3, #4
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4613      	mov	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	009a      	lsls	r2, r3, #2
 8004500:	441a      	add	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	fbb2 f2f3 	udiv	r2, r2, r3
 800450c:	4b1a      	ldr	r3, [pc, #104]	@ (8004578 <UART_SetConfig+0x118>)
 800450e:	fba3 0302 	umull	r0, r3, r3, r2
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2064      	movs	r0, #100	@ 0x64
 8004516:	fb00 f303 	mul.w	r3, r0, r3
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	3332      	adds	r3, #50	@ 0x32
 8004520:	4a15      	ldr	r2, [pc, #84]	@ (8004578 <UART_SetConfig+0x118>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800452c:	4419      	add	r1, r3
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009a      	lsls	r2, r3, #2
 8004538:	441a      	add	r2, r3
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	fbb2 f2f3 	udiv	r2, r2, r3
 8004544:	4b0c      	ldr	r3, [pc, #48]	@ (8004578 <UART_SetConfig+0x118>)
 8004546:	fba3 0302 	umull	r0, r3, r3, r2
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2064      	movs	r0, #100	@ 0x64
 800454e:	fb00 f303 	mul.w	r3, r0, r3
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	3332      	adds	r3, #50	@ 0x32
 8004558:	4a07      	ldr	r2, [pc, #28]	@ (8004578 <UART_SetConfig+0x118>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	095b      	lsrs	r3, r3, #5
 8004560:	f003 020f 	and.w	r2, r3, #15
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	440a      	add	r2, r1
 800456a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800456c:	bf00      	nop
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40013800 	.word	0x40013800
 8004578:	51eb851f 	.word	0x51eb851f

0800457c <memset>:
 800457c:	4603      	mov	r3, r0
 800457e:	4402      	add	r2, r0
 8004580:	4293      	cmp	r3, r2
 8004582:	d100      	bne.n	8004586 <memset+0xa>
 8004584:	4770      	bx	lr
 8004586:	f803 1b01 	strb.w	r1, [r3], #1
 800458a:	e7f9      	b.n	8004580 <memset+0x4>

0800458c <__libc_init_array>:
 800458c:	b570      	push	{r4, r5, r6, lr}
 800458e:	2600      	movs	r6, #0
 8004590:	4d0c      	ldr	r5, [pc, #48]	@ (80045c4 <__libc_init_array+0x38>)
 8004592:	4c0d      	ldr	r4, [pc, #52]	@ (80045c8 <__libc_init_array+0x3c>)
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	42a6      	cmp	r6, r4
 800459a:	d109      	bne.n	80045b0 <__libc_init_array+0x24>
 800459c:	f000 f81a 	bl	80045d4 <_init>
 80045a0:	2600      	movs	r6, #0
 80045a2:	4d0a      	ldr	r5, [pc, #40]	@ (80045cc <__libc_init_array+0x40>)
 80045a4:	4c0a      	ldr	r4, [pc, #40]	@ (80045d0 <__libc_init_array+0x44>)
 80045a6:	1b64      	subs	r4, r4, r5
 80045a8:	10a4      	asrs	r4, r4, #2
 80045aa:	42a6      	cmp	r6, r4
 80045ac:	d105      	bne.n	80045ba <__libc_init_array+0x2e>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}
 80045b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045b4:	4798      	blx	r3
 80045b6:	3601      	adds	r6, #1
 80045b8:	e7ee      	b.n	8004598 <__libc_init_array+0xc>
 80045ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80045be:	4798      	blx	r3
 80045c0:	3601      	adds	r6, #1
 80045c2:	e7f2      	b.n	80045aa <__libc_init_array+0x1e>
 80045c4:	08004618 	.word	0x08004618
 80045c8:	08004618 	.word	0x08004618
 80045cc:	08004618 	.word	0x08004618
 80045d0:	0800461c 	.word	0x0800461c

080045d4 <_init>:
 80045d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045d6:	bf00      	nop
 80045d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045da:	bc08      	pop	{r3}
 80045dc:	469e      	mov	lr, r3
 80045de:	4770      	bx	lr

080045e0 <_fini>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	bf00      	nop
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr
